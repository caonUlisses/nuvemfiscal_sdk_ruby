=begin
#API Nuvem Fiscal

#API para automação comercial e documentos fiscais.

The version of the OpenAPI document: 2.44.0

Generated by: https://openapi-generator.tech
Generator version: 7.10.0

=end

require 'date'
require 'time'

module NuvemfiscalSdkRuby
  class RpsDadosPrestador
    attr_accessor :cpf_cnpj

    attr_accessor :inscricao_municipal

    attr_accessor :nome_razao_social

    attr_accessor :nome_fantasia

    attr_accessor :fone

    attr_accessor :email

    attr_accessor :endereco

    attr_accessor :optante_simples_nacional

    attr_accessor :regime_tributacao

    attr_accessor :regime_especial_tributacao

    attr_accessor :incentivo_fiscal

    attr_accessor :incentivador_cultural

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'cpf_cnpj' => :'cpf_cnpj',
        :'inscricao_municipal' => :'inscricao_municipal',
        :'nome_razao_social' => :'nome_razao_social',
        :'nome_fantasia' => :'nome_fantasia',
        :'fone' => :'fone',
        :'email' => :'email',
        :'endereco' => :'endereco',
        :'optante_simples_nacional' => :'optante_simples_nacional',
        :'regime_tributacao' => :'regime_tributacao',
        :'regime_especial_tributacao' => :'regime_especial_tributacao',
        :'incentivo_fiscal' => :'incentivo_fiscal',
        :'incentivador_cultural' => :'incentivador_cultural'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'cpf_cnpj' => :'String',
        :'inscricao_municipal' => :'String',
        :'nome_razao_social' => :'String',
        :'nome_fantasia' => :'String',
        :'fone' => :'String',
        :'email' => :'String',
        :'endereco' => :'EmpresaEndereco',
        :'optante_simples_nacional' => :'Boolean',
        :'regime_tributacao' => :'Integer',
        :'regime_especial_tributacao' => :'Integer',
        :'incentivo_fiscal' => :'Boolean',
        :'incentivador_cultural' => :'Boolean'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `NuvemfiscalSdkRuby::RpsDadosPrestador` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `NuvemfiscalSdkRuby::RpsDadosPrestador`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'cpf_cnpj')
        self.cpf_cnpj = attributes[:'cpf_cnpj']
      end

      if attributes.key?(:'inscricao_municipal')
        self.inscricao_municipal = attributes[:'inscricao_municipal']
      end

      if attributes.key?(:'nome_razao_social')
        self.nome_razao_social = attributes[:'nome_razao_social']
      end

      if attributes.key?(:'nome_fantasia')
        self.nome_fantasia = attributes[:'nome_fantasia']
      end

      if attributes.key?(:'fone')
        self.fone = attributes[:'fone']
      end

      if attributes.key?(:'email')
        self.email = attributes[:'email']
      end

      if attributes.key?(:'endereco')
        self.endereco = attributes[:'endereco']
      end

      if attributes.key?(:'optante_simples_nacional')
        self.optante_simples_nacional = attributes[:'optante_simples_nacional']
      end

      if attributes.key?(:'regime_tributacao')
        self.regime_tributacao = attributes[:'regime_tributacao']
      end

      if attributes.key?(:'regime_especial_tributacao')
        self.regime_especial_tributacao = attributes[:'regime_especial_tributacao']
      end

      if attributes.key?(:'incentivo_fiscal')
        self.incentivo_fiscal = attributes[:'incentivo_fiscal']
      end

      if attributes.key?(:'incentivador_cultural')
        self.incentivador_cultural = attributes[:'incentivador_cultural']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          cpf_cnpj == o.cpf_cnpj &&
          inscricao_municipal == o.inscricao_municipal &&
          nome_razao_social == o.nome_razao_social &&
          nome_fantasia == o.nome_fantasia &&
          fone == o.fone &&
          email == o.email &&
          endereco == o.endereco &&
          optante_simples_nacional == o.optante_simples_nacional &&
          regime_tributacao == o.regime_tributacao &&
          regime_especial_tributacao == o.regime_especial_tributacao &&
          incentivo_fiscal == o.incentivo_fiscal &&
          incentivador_cultural == o.incentivador_cultural
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [cpf_cnpj, inscricao_municipal, nome_razao_social, nome_fantasia, fone, email, endereco, optante_simples_nacional, regime_tributacao, regime_especial_tributacao, incentivo_fiscal, incentivador_cultural].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = NuvemfiscalSdkRuby.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
