=begin
#API Nuvem Fiscal

#API para automação comercial e documentos fiscais.

The version of the OpenAPI document: 2.44.0

Generated by: https://openapi-generator.tech
Generator version: 7.10.0

=end

require 'date'
require 'time'

module NuvemfiscalSdkRuby
  class CnpjEmpresa
    # Número de inscrição do CNPJ.
    attr_accessor :cnpj

    # Nome empresarial da pessoa jurídica.
    attr_accessor :razao_social

    # Corresponde ao nome fantasia.
    attr_accessor :nome_fantasia

    # Data de início da atividade.
    attr_accessor :data_inicio_atividade

    # Indicador de matriz/filial:  * `true` - É matriz  * `false` - É filial
    attr_accessor :matriz

    attr_accessor :natureza_juridica

    # Capital social da empresa.
    attr_accessor :capital_social

    attr_accessor :porte

    # O ente federativo responsável é preenchido para os casos de órgãos e  entidades do grupo de natureza jurídica 1XXX. Para as demais naturezas,  este atributo fica em branco.
    attr_accessor :ente_federativo_responsavel

    attr_accessor :situacao_cadastral

    attr_accessor :motivo_situacao_cadastral

    # Nome da cidade no exterior.
    attr_accessor :nome_da_cidade_no_exterior

    attr_accessor :pais

    attr_accessor :atividade_principal

    attr_accessor :atividades_secundarias

    attr_accessor :endereco

    attr_accessor :telefones

    # E-mail do contribuinte.
    attr_accessor :email

    attr_accessor :situacao_especial

    attr_accessor :simples

    attr_accessor :simei

    attr_accessor :socios

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'cnpj' => :'cnpj',
        :'razao_social' => :'razao_social',
        :'nome_fantasia' => :'nome_fantasia',
        :'data_inicio_atividade' => :'data_inicio_atividade',
        :'matriz' => :'matriz',
        :'natureza_juridica' => :'natureza_juridica',
        :'capital_social' => :'capital_social',
        :'porte' => :'porte',
        :'ente_federativo_responsavel' => :'ente_federativo_responsavel',
        :'situacao_cadastral' => :'situacao_cadastral',
        :'motivo_situacao_cadastral' => :'motivo_situacao_cadastral',
        :'nome_da_cidade_no_exterior' => :'nome_da_cidade_no_exterior',
        :'pais' => :'pais',
        :'atividade_principal' => :'atividade_principal',
        :'atividades_secundarias' => :'atividades_secundarias',
        :'endereco' => :'endereco',
        :'telefones' => :'telefones',
        :'email' => :'email',
        :'situacao_especial' => :'situacao_especial',
        :'simples' => :'simples',
        :'simei' => :'simei',
        :'socios' => :'socios'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'cnpj' => :'String',
        :'razao_social' => :'String',
        :'nome_fantasia' => :'String',
        :'data_inicio_atividade' => :'Date',
        :'matriz' => :'Boolean',
        :'natureza_juridica' => :'CnpjNaturezaJuridica',
        :'capital_social' => :'Float',
        :'porte' => :'CnpjPorteEmpresa',
        :'ente_federativo_responsavel' => :'String',
        :'situacao_cadastral' => :'CnpjSituacaoCadastral',
        :'motivo_situacao_cadastral' => :'CnpjMotivoSituacaoCadastral',
        :'nome_da_cidade_no_exterior' => :'String',
        :'pais' => :'CnpjPais',
        :'atividade_principal' => :'CnpjCnae',
        :'atividades_secundarias' => :'Array<CnpjCnaeSecundario>',
        :'endereco' => :'CnpjEndereco',
        :'telefones' => :'Array<CnpjTelefone>',
        :'email' => :'String',
        :'situacao_especial' => :'CnpjSituacaoEspecial',
        :'simples' => :'CnpjOpcaoSimples',
        :'simei' => :'CnpjOpcaoSimei',
        :'socios' => :'Array<CnpjSocio>'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `NuvemfiscalSdkRuby::CnpjEmpresa` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `NuvemfiscalSdkRuby::CnpjEmpresa`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'cnpj')
        self.cnpj = attributes[:'cnpj']
      end

      if attributes.key?(:'razao_social')
        self.razao_social = attributes[:'razao_social']
      end

      if attributes.key?(:'nome_fantasia')
        self.nome_fantasia = attributes[:'nome_fantasia']
      end

      if attributes.key?(:'data_inicio_atividade')
        self.data_inicio_atividade = attributes[:'data_inicio_atividade']
      end

      if attributes.key?(:'matriz')
        self.matriz = attributes[:'matriz']
      end

      if attributes.key?(:'natureza_juridica')
        self.natureza_juridica = attributes[:'natureza_juridica']
      end

      if attributes.key?(:'capital_social')
        self.capital_social = attributes[:'capital_social']
      end

      if attributes.key?(:'porte')
        self.porte = attributes[:'porte']
      end

      if attributes.key?(:'ente_federativo_responsavel')
        self.ente_federativo_responsavel = attributes[:'ente_federativo_responsavel']
      end

      if attributes.key?(:'situacao_cadastral')
        self.situacao_cadastral = attributes[:'situacao_cadastral']
      end

      if attributes.key?(:'motivo_situacao_cadastral')
        self.motivo_situacao_cadastral = attributes[:'motivo_situacao_cadastral']
      end

      if attributes.key?(:'nome_da_cidade_no_exterior')
        self.nome_da_cidade_no_exterior = attributes[:'nome_da_cidade_no_exterior']
      end

      if attributes.key?(:'pais')
        self.pais = attributes[:'pais']
      end

      if attributes.key?(:'atividade_principal')
        self.atividade_principal = attributes[:'atividade_principal']
      end

      if attributes.key?(:'atividades_secundarias')
        if (value = attributes[:'atividades_secundarias']).is_a?(Array)
          self.atividades_secundarias = value
        end
      end

      if attributes.key?(:'endereco')
        self.endereco = attributes[:'endereco']
      end

      if attributes.key?(:'telefones')
        if (value = attributes[:'telefones']).is_a?(Array)
          self.telefones = value
        end
      end

      if attributes.key?(:'email')
        self.email = attributes[:'email']
      end

      if attributes.key?(:'situacao_especial')
        self.situacao_especial = attributes[:'situacao_especial']
      end

      if attributes.key?(:'simples')
        self.simples = attributes[:'simples']
      end

      if attributes.key?(:'simei')
        self.simei = attributes[:'simei']
      end

      if attributes.key?(:'socios')
        if (value = attributes[:'socios']).is_a?(Array)
          self.socios = value
        end
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          cnpj == o.cnpj &&
          razao_social == o.razao_social &&
          nome_fantasia == o.nome_fantasia &&
          data_inicio_atividade == o.data_inicio_atividade &&
          matriz == o.matriz &&
          natureza_juridica == o.natureza_juridica &&
          capital_social == o.capital_social &&
          porte == o.porte &&
          ente_federativo_responsavel == o.ente_federativo_responsavel &&
          situacao_cadastral == o.situacao_cadastral &&
          motivo_situacao_cadastral == o.motivo_situacao_cadastral &&
          nome_da_cidade_no_exterior == o.nome_da_cidade_no_exterior &&
          pais == o.pais &&
          atividade_principal == o.atividade_principal &&
          atividades_secundarias == o.atividades_secundarias &&
          endereco == o.endereco &&
          telefones == o.telefones &&
          email == o.email &&
          situacao_especial == o.situacao_especial &&
          simples == o.simples &&
          simei == o.simei &&
          socios == o.socios
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [cnpj, razao_social, nome_fantasia, data_inicio_atividade, matriz, natureza_juridica, capital_social, porte, ente_federativo_responsavel, situacao_cadastral, motivo_situacao_cadastral, nome_da_cidade_no_exterior, pais, atividade_principal, atividades_secundarias, endereco, telefones, email, situacao_especial, simples, simei, socios].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = NuvemfiscalSdkRuby.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
