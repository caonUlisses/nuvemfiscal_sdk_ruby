=begin
#API Nuvem Fiscal

#API para automação comercial e documentos fiscais.

The version of the OpenAPI document: 2.44.0

Generated by: https://openapi-generator.tech
Generator version: 7.10.0

=end

require 'date'
require 'time'

module NuvemfiscalSdkRuby
  # Grupo de informações relativas à exportação/importação de serviço prestado.
  class ComExterior
    # Modo de Prestação:  * 0 - Desconhecido (tipo não informado na nota de origem)  * 1 - Transfronteiriço  * 2 - Consumo no Brasil  * 3 - Presença Comercial no Exterior  * 4 - Movimento Temporário de Pessoas Físicas
    attr_accessor :md_prestacao

    # Vínculo entre as partes no negócio:  * 0 - Sem vínculo com o tomador/ Prestador  * 1 - Controlada  * 2 - Controladora  * 3 - Coligada  * 4 - Matriz  * 5 - Filial ou sucursal  * 6 - Outro vínculo
    attr_accessor :vinc_prest

    # Identifica a moeda da transação comercial.
    attr_accessor :tp_moeda

    # Valor do serviço prestado expresso em moeda estrangeira especificada em tpmoeda.
    attr_accessor :v_serv_moeda

    # Mecanismo de apoio/fomento ao Comércio Exterior utilizado pelo prestador do serviço:  * 00 - Desconhecido (tipo não informado na nota de origem)  * 01 - Nenhum  * 02 - ACC - Adiantamento sobre Contrato de Câmbio - Redução a Zero do IR e do IOF  * 03 - ACE - Adiantamento sobre Cambiais Entregues - Redução a Zero do IR e do IOF  * 04 - BNDES-Exim Pós-Embarque - Serviços  * 05 - BNDES-Exim Pré-Embarque - Serviços  * 06 - FGE - Fundo de Garantia à Exportação  * 07 - PROEX - EQUALIZAÇÃO  * 08 - PROEX - Financiamento
    attr_accessor :mec_af_comex_p

    # Mecanismo de apoio/fomento ao Comércio Exterior utilizado pelo tomador do serviço:  * 00 - Desconhecido (tipo não informado na nota de origem)  * 01 - Nenhum  * 02 - Adm. Pública e Repr. Internacional  * 03 - Alugueis e Arrend. Mercantil de maquinas, equip., embarc. e aeronaves  * 04 - Arrendamento Mercantil de aeronave para empresa de transporte aéreo público  * 05 - Comissão a agentes externos na exportação  * 06 - Despesas de armazenagem, mov. e transporte de carga no exterior  * 07 - Eventos FIFA (subsidiária)  * 08 - Eventos FIFA  * 09 - Fretes, arrendamentos de embarcações ou aeronaves e outros  * 10 - Material Aeronáutico  * 11 - Promoção de Bens no Exterior  * 12 - Promoção de Dest. Turísticos Brasileiros  * 13 - Promoção do Brasil no Exterior  * 14 - Promoção Serviços no Exterior  * 15 - RECINE  * 16 - RECOPA  * 17 - Registro e Manutenção de marcas, patentes e cultivares  * 18 - REICOMP  * 19 - REIDI  * 20 - REPENEC  * 21 - REPES  * 22 - RETAERO  * 23 - RETID  * 24 - Royalties, Assistência Técnica, Científica e Assemelhados  * 25 - Serviços de avaliação da conformidade vinculados aos Acordos da OMC  * 26 - ZPE
    attr_accessor :mec_af_comex_t

    # Operação está vinculada à Movimentação Temporária de Bens:  * 0 - Desconhecido (tipo não informado na nota de origem)  * 1 - Não  * 2 - Vinculada - Declaração de Importação  * 3 - Vinculada - Declaração de Exportação
    attr_accessor :mov_temp_bens

    # Número da Declaração de Importação (DI/DSI/DA/DRI-E) averbado.
    attr_accessor :n_di

    # Número do Registro de Exportação (RE) averbado.
    attr_accessor :n_re

    # Compartilhar as informações da NFS-e gerada a partir desta DPS com a Secretaria de Comércio Exterior:  * 0 - Não enviar para o MDIC  * 1 - Enviar para o MDIC
    attr_accessor :mdic

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'md_prestacao' => :'mdPrestacao',
        :'vinc_prest' => :'vincPrest',
        :'tp_moeda' => :'tpMoeda',
        :'v_serv_moeda' => :'vServMoeda',
        :'mec_af_comex_p' => :'mecAFComexP',
        :'mec_af_comex_t' => :'mecAFComexT',
        :'mov_temp_bens' => :'movTempBens',
        :'n_di' => :'nDI',
        :'n_re' => :'nRE',
        :'mdic' => :'mdic'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'md_prestacao' => :'Integer',
        :'vinc_prest' => :'Integer',
        :'tp_moeda' => :'String',
        :'v_serv_moeda' => :'Float',
        :'mec_af_comex_p' => :'String',
        :'mec_af_comex_t' => :'String',
        :'mov_temp_bens' => :'Integer',
        :'n_di' => :'String',
        :'n_re' => :'String',
        :'mdic' => :'Integer'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'md_prestacao',
        :'vinc_prest',
        :'tp_moeda',
        :'v_serv_moeda',
        :'mec_af_comex_p',
        :'mec_af_comex_t',
        :'mov_temp_bens',
        :'n_di',
        :'n_re',
        :'mdic'
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `NuvemfiscalSdkRuby::ComExterior` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `NuvemfiscalSdkRuby::ComExterior`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'md_prestacao')
        self.md_prestacao = attributes[:'md_prestacao']
      else
        self.md_prestacao = nil
      end

      if attributes.key?(:'vinc_prest')
        self.vinc_prest = attributes[:'vinc_prest']
      else
        self.vinc_prest = nil
      end

      if attributes.key?(:'tp_moeda')
        self.tp_moeda = attributes[:'tp_moeda']
      else
        self.tp_moeda = nil
      end

      if attributes.key?(:'v_serv_moeda')
        self.v_serv_moeda = attributes[:'v_serv_moeda']
      else
        self.v_serv_moeda = nil
      end

      if attributes.key?(:'mec_af_comex_p')
        self.mec_af_comex_p = attributes[:'mec_af_comex_p']
      else
        self.mec_af_comex_p = nil
      end

      if attributes.key?(:'mec_af_comex_t')
        self.mec_af_comex_t = attributes[:'mec_af_comex_t']
      else
        self.mec_af_comex_t = nil
      end

      if attributes.key?(:'mov_temp_bens')
        self.mov_temp_bens = attributes[:'mov_temp_bens']
      else
        self.mov_temp_bens = nil
      end

      if attributes.key?(:'n_di')
        self.n_di = attributes[:'n_di']
      end

      if attributes.key?(:'n_re')
        self.n_re = attributes[:'n_re']
      end

      if attributes.key?(:'mdic')
        self.mdic = attributes[:'mdic']
      else
        self.mdic = nil
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      if @tp_moeda.to_s.length > 3
        invalid_properties.push('invalid value for "tp_moeda", the character length must be smaller than or equal to 3.')
      end

      if @v_serv_moeda < 0
        invalid_properties.push('invalid value for "v_serv_moeda", must be greater than or equal to 0.')
      end

      if !@n_di.nil? && @n_di.to_s.length > 12
        invalid_properties.push('invalid value for "n_di", the character length must be smaller than or equal to 12.')
      end

      if !@n_di.nil? && @n_di.to_s.length < 1
        invalid_properties.push('invalid value for "n_di", the character length must be great than or equal to 1.')
      end

      if !@n_re.nil? && @n_re.to_s.length > 12
        invalid_properties.push('invalid value for "n_re", the character length must be smaller than or equal to 12.')
      end

      if !@n_re.nil? && @n_re.to_s.length < 1
        invalid_properties.push('invalid value for "n_re", the character length must be great than or equal to 1.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      return false if @tp_moeda.to_s.length > 3
      return false if @v_serv_moeda < 0
      return false if !@n_di.nil? && @n_di.to_s.length > 12
      return false if !@n_di.nil? && @n_di.to_s.length < 1
      return false if !@n_re.nil? && @n_re.to_s.length > 12
      return false if !@n_re.nil? && @n_re.to_s.length < 1
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] tp_moeda Value to be assigned
    def tp_moeda=(tp_moeda)
      if !tp_moeda.nil? && tp_moeda.to_s.length > 3
        fail ArgumentError, 'invalid value for "tp_moeda", the character length must be smaller than or equal to 3.'
      end

      @tp_moeda = tp_moeda
    end

    # Custom attribute writer method with validation
    # @param [Object] v_serv_moeda Value to be assigned
    def v_serv_moeda=(v_serv_moeda)
      if !v_serv_moeda.nil? && v_serv_moeda < 0
        fail ArgumentError, 'invalid value for "v_serv_moeda", must be greater than or equal to 0.'
      end

      @v_serv_moeda = v_serv_moeda
    end

    # Custom attribute writer method with validation
    # @param [Object] n_di Value to be assigned
    def n_di=(n_di)
      if !n_di.nil? && n_di.to_s.length > 12
        fail ArgumentError, 'invalid value for "n_di", the character length must be smaller than or equal to 12.'
      end

      if !n_di.nil? && n_di.to_s.length < 1
        fail ArgumentError, 'invalid value for "n_di", the character length must be great than or equal to 1.'
      end

      @n_di = n_di
    end

    # Custom attribute writer method with validation
    # @param [Object] n_re Value to be assigned
    def n_re=(n_re)
      if !n_re.nil? && n_re.to_s.length > 12
        fail ArgumentError, 'invalid value for "n_re", the character length must be smaller than or equal to 12.'
      end

      if !n_re.nil? && n_re.to_s.length < 1
        fail ArgumentError, 'invalid value for "n_re", the character length must be great than or equal to 1.'
      end

      @n_re = n_re
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          md_prestacao == o.md_prestacao &&
          vinc_prest == o.vinc_prest &&
          tp_moeda == o.tp_moeda &&
          v_serv_moeda == o.v_serv_moeda &&
          mec_af_comex_p == o.mec_af_comex_p &&
          mec_af_comex_t == o.mec_af_comex_t &&
          mov_temp_bens == o.mov_temp_bens &&
          n_di == o.n_di &&
          n_re == o.n_re &&
          mdic == o.mdic
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [md_prestacao, vinc_prest, tp_moeda, v_serv_moeda, mec_af_comex_p, mec_af_comex_t, mov_temp_bens, n_di, n_re, mdic].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = NuvemfiscalSdkRuby.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
