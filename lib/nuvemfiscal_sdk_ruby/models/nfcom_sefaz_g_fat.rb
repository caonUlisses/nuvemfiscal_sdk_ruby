=begin
#API Nuvem Fiscal

#API para automação comercial e documentos fiscais.

The version of the OpenAPI document: 2.44.0

Generated by: https://openapi-generator.tech
Generator version: 7.10.0

=end

require 'date'
require 'time'

module NuvemfiscalSdkRuby
  # Grupo de informações de controle da Fatura.
  class NfcomSefazGFat
    # Ano e mês referência do faturamento (AAAAMM).
    attr_accessor :compet_fat

    # Data de vencimento da fatura.  Formato AAAA-MM-DD.
    attr_accessor :d_venc_fat

    # Período de uso inicial.  Formato AAAA-MM-DD.
    attr_accessor :d_per_uso_ini

    # Período de uso final.  Formato AAAA-MM-DD.
    attr_accessor :d_per_uso_fim

    # Linha digitável do código de barras.
    attr_accessor :cod_barras

    # Código de autorização débito em conta.
    attr_accessor :cod_deb_auto

    # Número do banco para débito em conta.
    attr_accessor :cod_banco

    # Número da agência bancária para débito em conta.
    attr_accessor :cod_agencia

    attr_accessor :ender_corresp

    attr_accessor :g_pix

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'compet_fat' => :'CompetFat',
        :'d_venc_fat' => :'dVencFat',
        :'d_per_uso_ini' => :'dPerUsoIni',
        :'d_per_uso_fim' => :'dPerUsoFim',
        :'cod_barras' => :'codBarras',
        :'cod_deb_auto' => :'codDebAuto',
        :'cod_banco' => :'codBanco',
        :'cod_agencia' => :'codAgencia',
        :'ender_corresp' => :'enderCorresp',
        :'g_pix' => :'gPIX'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'compet_fat' => :'String',
        :'d_venc_fat' => :'Date',
        :'d_per_uso_ini' => :'Date',
        :'d_per_uso_fim' => :'Date',
        :'cod_barras' => :'String',
        :'cod_deb_auto' => :'String',
        :'cod_banco' => :'String',
        :'cod_agencia' => :'String',
        :'ender_corresp' => :'NfcomSefazEndeEmi',
        :'g_pix' => :'NfcomSefazGPIX'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'compet_fat',
        :'d_venc_fat',
        :'d_per_uso_ini',
        :'d_per_uso_fim',
        :'cod_barras',
        :'cod_deb_auto',
        :'cod_banco',
        :'cod_agencia',
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `NuvemfiscalSdkRuby::NfcomSefazGFat` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `NuvemfiscalSdkRuby::NfcomSefazGFat`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'compet_fat')
        self.compet_fat = attributes[:'compet_fat']
      else
        self.compet_fat = nil
      end

      if attributes.key?(:'d_venc_fat')
        self.d_venc_fat = attributes[:'d_venc_fat']
      else
        self.d_venc_fat = nil
      end

      if attributes.key?(:'d_per_uso_ini')
        self.d_per_uso_ini = attributes[:'d_per_uso_ini']
      end

      if attributes.key?(:'d_per_uso_fim')
        self.d_per_uso_fim = attributes[:'d_per_uso_fim']
      end

      if attributes.key?(:'cod_barras')
        self.cod_barras = attributes[:'cod_barras']
      else
        self.cod_barras = nil
      end

      if attributes.key?(:'cod_deb_auto')
        self.cod_deb_auto = attributes[:'cod_deb_auto']
      end

      if attributes.key?(:'cod_banco')
        self.cod_banco = attributes[:'cod_banco']
      end

      if attributes.key?(:'cod_agencia')
        self.cod_agencia = attributes[:'cod_agencia']
      end

      if attributes.key?(:'ender_corresp')
        self.ender_corresp = attributes[:'ender_corresp']
      end

      if attributes.key?(:'g_pix')
        self.g_pix = attributes[:'g_pix']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      if @compet_fat.to_s.length > 6
        invalid_properties.push('invalid value for "compet_fat", the character length must be smaller than or equal to 6.')
      end

      if @compet_fat.to_s.length < 6
        invalid_properties.push('invalid value for "compet_fat", the character length must be great than or equal to 6.')
      end

      if @cod_barras.to_s.length > 48
        invalid_properties.push('invalid value for "cod_barras", the character length must be smaller than or equal to 48.')
      end

      if @cod_barras.to_s.length < 1
        invalid_properties.push('invalid value for "cod_barras", the character length must be great than or equal to 1.')
      end

      if !@cod_deb_auto.nil? && @cod_deb_auto.to_s.length > 20
        invalid_properties.push('invalid value for "cod_deb_auto", the character length must be smaller than or equal to 20.')
      end

      if !@cod_deb_auto.nil? && @cod_deb_auto.to_s.length < 1
        invalid_properties.push('invalid value for "cod_deb_auto", the character length must be great than or equal to 1.')
      end

      if !@cod_banco.nil? && @cod_banco.to_s.length > 5
        invalid_properties.push('invalid value for "cod_banco", the character length must be smaller than or equal to 5.')
      end

      if !@cod_banco.nil? && @cod_banco.to_s.length < 3
        invalid_properties.push('invalid value for "cod_banco", the character length must be great than or equal to 3.')
      end

      if !@cod_agencia.nil? && @cod_agencia.to_s.length > 10
        invalid_properties.push('invalid value for "cod_agencia", the character length must be smaller than or equal to 10.')
      end

      if !@cod_agencia.nil? && @cod_agencia.to_s.length < 1
        invalid_properties.push('invalid value for "cod_agencia", the character length must be great than or equal to 1.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      return false if @compet_fat.to_s.length > 6
      return false if @compet_fat.to_s.length < 6
      return false if @cod_barras.to_s.length > 48
      return false if @cod_barras.to_s.length < 1
      return false if !@cod_deb_auto.nil? && @cod_deb_auto.to_s.length > 20
      return false if !@cod_deb_auto.nil? && @cod_deb_auto.to_s.length < 1
      return false if !@cod_banco.nil? && @cod_banco.to_s.length > 5
      return false if !@cod_banco.nil? && @cod_banco.to_s.length < 3
      return false if !@cod_agencia.nil? && @cod_agencia.to_s.length > 10
      return false if !@cod_agencia.nil? && @cod_agencia.to_s.length < 1
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] compet_fat Value to be assigned
    def compet_fat=(compet_fat)
      if !compet_fat.nil? && compet_fat.to_s.length > 6
        fail ArgumentError, 'invalid value for "compet_fat", the character length must be smaller than or equal to 6.'
      end

      if !compet_fat.nil? && compet_fat.to_s.length < 6
        fail ArgumentError, 'invalid value for "compet_fat", the character length must be great than or equal to 6.'
      end

      @compet_fat = compet_fat
    end

    # Custom attribute writer method with validation
    # @param [Object] cod_barras Value to be assigned
    def cod_barras=(cod_barras)
      if !cod_barras.nil? && cod_barras.to_s.length > 48
        fail ArgumentError, 'invalid value for "cod_barras", the character length must be smaller than or equal to 48.'
      end

      if !cod_barras.nil? && cod_barras.to_s.length < 1
        fail ArgumentError, 'invalid value for "cod_barras", the character length must be great than or equal to 1.'
      end

      @cod_barras = cod_barras
    end

    # Custom attribute writer method with validation
    # @param [Object] cod_deb_auto Value to be assigned
    def cod_deb_auto=(cod_deb_auto)
      if !cod_deb_auto.nil? && cod_deb_auto.to_s.length > 20
        fail ArgumentError, 'invalid value for "cod_deb_auto", the character length must be smaller than or equal to 20.'
      end

      if !cod_deb_auto.nil? && cod_deb_auto.to_s.length < 1
        fail ArgumentError, 'invalid value for "cod_deb_auto", the character length must be great than or equal to 1.'
      end

      @cod_deb_auto = cod_deb_auto
    end

    # Custom attribute writer method with validation
    # @param [Object] cod_banco Value to be assigned
    def cod_banco=(cod_banco)
      if !cod_banco.nil? && cod_banco.to_s.length > 5
        fail ArgumentError, 'invalid value for "cod_banco", the character length must be smaller than or equal to 5.'
      end

      if !cod_banco.nil? && cod_banco.to_s.length < 3
        fail ArgumentError, 'invalid value for "cod_banco", the character length must be great than or equal to 3.'
      end

      @cod_banco = cod_banco
    end

    # Custom attribute writer method with validation
    # @param [Object] cod_agencia Value to be assigned
    def cod_agencia=(cod_agencia)
      if !cod_agencia.nil? && cod_agencia.to_s.length > 10
        fail ArgumentError, 'invalid value for "cod_agencia", the character length must be smaller than or equal to 10.'
      end

      if !cod_agencia.nil? && cod_agencia.to_s.length < 1
        fail ArgumentError, 'invalid value for "cod_agencia", the character length must be great than or equal to 1.'
      end

      @cod_agencia = cod_agencia
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          compet_fat == o.compet_fat &&
          d_venc_fat == o.d_venc_fat &&
          d_per_uso_ini == o.d_per_uso_ini &&
          d_per_uso_fim == o.d_per_uso_fim &&
          cod_barras == o.cod_barras &&
          cod_deb_auto == o.cod_deb_auto &&
          cod_banco == o.cod_banco &&
          cod_agencia == o.cod_agencia &&
          ender_corresp == o.ender_corresp &&
          g_pix == o.g_pix
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [compet_fat, d_venc_fat, d_per_uso_ini, d_per_uso_fim, cod_barras, cod_deb_auto, cod_banco, cod_agencia, ender_corresp, g_pix].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = NuvemfiscalSdkRuby.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
