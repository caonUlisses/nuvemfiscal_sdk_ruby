=begin
#API Nuvem Fiscal

#API para automação comercial e documentos fiscais.

The version of the OpenAPI document: 2.44.0

Generated by: https://openapi-generator.tech
Generator version: 7.10.0

=end

require 'date'
require 'time'

module NuvemfiscalSdkRuby
  # informações dos veículos transportados.
  class CteSefazVeicNovos
    # Chassi do veículo.
    attr_accessor :chassi

    # Cor do veículo.  Código de cada montadora.
    attr_accessor :c_cor

    # Descrição da cor.
    attr_accessor :x_cor

    # Código Marca Modelo.  Utilizar tabela RENAVAM.
    attr_accessor :c_mod

    # Valor Unitário do Veículo.
    attr_accessor :v_unit

    # Frete Unitário.
    attr_accessor :v_frete

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'chassi' => :'chassi',
        :'c_cor' => :'cCor',
        :'x_cor' => :'xCor',
        :'c_mod' => :'cMod',
        :'v_unit' => :'vUnit',
        :'v_frete' => :'vFrete'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'chassi' => :'String',
        :'c_cor' => :'String',
        :'x_cor' => :'String',
        :'c_mod' => :'String',
        :'v_unit' => :'Float',
        :'v_frete' => :'Float'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'chassi',
        :'c_cor',
        :'x_cor',
        :'c_mod',
        :'v_unit',
        :'v_frete'
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `NuvemfiscalSdkRuby::CteSefazVeicNovos` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `NuvemfiscalSdkRuby::CteSefazVeicNovos`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'chassi')
        self.chassi = attributes[:'chassi']
      else
        self.chassi = nil
      end

      if attributes.key?(:'c_cor')
        self.c_cor = attributes[:'c_cor']
      else
        self.c_cor = nil
      end

      if attributes.key?(:'x_cor')
        self.x_cor = attributes[:'x_cor']
      else
        self.x_cor = nil
      end

      if attributes.key?(:'c_mod')
        self.c_mod = attributes[:'c_mod']
      else
        self.c_mod = nil
      end

      if attributes.key?(:'v_unit')
        self.v_unit = attributes[:'v_unit']
      else
        self.v_unit = nil
      end

      if attributes.key?(:'v_frete')
        self.v_frete = attributes[:'v_frete']
      else
        self.v_frete = nil
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      if @chassi.to_s.length > 17
        invalid_properties.push('invalid value for "chassi", the character length must be smaller than or equal to 17.')
      end

      if @c_cor.to_s.length > 4
        invalid_properties.push('invalid value for "c_cor", the character length must be smaller than or equal to 4.')
      end

      if @c_cor.to_s.length < 1
        invalid_properties.push('invalid value for "c_cor", the character length must be great than or equal to 1.')
      end

      if @x_cor.to_s.length > 40
        invalid_properties.push('invalid value for "x_cor", the character length must be smaller than or equal to 40.')
      end

      if @x_cor.to_s.length < 1
        invalid_properties.push('invalid value for "x_cor", the character length must be great than or equal to 1.')
      end

      if @c_mod.to_s.length > 6
        invalid_properties.push('invalid value for "c_mod", the character length must be smaller than or equal to 6.')
      end

      if @c_mod.to_s.length < 1
        invalid_properties.push('invalid value for "c_mod", the character length must be great than or equal to 1.')
      end

      if @v_unit < 0
        invalid_properties.push('invalid value for "v_unit", must be greater than or equal to 0.')
      end

      if @v_frete < 0
        invalid_properties.push('invalid value for "v_frete", must be greater than or equal to 0.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      return false if @chassi.to_s.length > 17
      return false if @c_cor.to_s.length > 4
      return false if @c_cor.to_s.length < 1
      return false if @x_cor.to_s.length > 40
      return false if @x_cor.to_s.length < 1
      return false if @c_mod.to_s.length > 6
      return false if @c_mod.to_s.length < 1
      return false if @v_unit < 0
      return false if @v_frete < 0
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] chassi Value to be assigned
    def chassi=(chassi)
      if !chassi.nil? && chassi.to_s.length > 17
        fail ArgumentError, 'invalid value for "chassi", the character length must be smaller than or equal to 17.'
      end

      @chassi = chassi
    end

    # Custom attribute writer method with validation
    # @param [Object] c_cor Value to be assigned
    def c_cor=(c_cor)
      if !c_cor.nil? && c_cor.to_s.length > 4
        fail ArgumentError, 'invalid value for "c_cor", the character length must be smaller than or equal to 4.'
      end

      if !c_cor.nil? && c_cor.to_s.length < 1
        fail ArgumentError, 'invalid value for "c_cor", the character length must be great than or equal to 1.'
      end

      @c_cor = c_cor
    end

    # Custom attribute writer method with validation
    # @param [Object] x_cor Value to be assigned
    def x_cor=(x_cor)
      if !x_cor.nil? && x_cor.to_s.length > 40
        fail ArgumentError, 'invalid value for "x_cor", the character length must be smaller than or equal to 40.'
      end

      if !x_cor.nil? && x_cor.to_s.length < 1
        fail ArgumentError, 'invalid value for "x_cor", the character length must be great than or equal to 1.'
      end

      @x_cor = x_cor
    end

    # Custom attribute writer method with validation
    # @param [Object] c_mod Value to be assigned
    def c_mod=(c_mod)
      if !c_mod.nil? && c_mod.to_s.length > 6
        fail ArgumentError, 'invalid value for "c_mod", the character length must be smaller than or equal to 6.'
      end

      if !c_mod.nil? && c_mod.to_s.length < 1
        fail ArgumentError, 'invalid value for "c_mod", the character length must be great than or equal to 1.'
      end

      @c_mod = c_mod
    end

    # Custom attribute writer method with validation
    # @param [Object] v_unit Value to be assigned
    def v_unit=(v_unit)
      if !v_unit.nil? && v_unit < 0
        fail ArgumentError, 'invalid value for "v_unit", must be greater than or equal to 0.'
      end

      @v_unit = v_unit
    end

    # Custom attribute writer method with validation
    # @param [Object] v_frete Value to be assigned
    def v_frete=(v_frete)
      if !v_frete.nil? && v_frete < 0
        fail ArgumentError, 'invalid value for "v_frete", must be greater than or equal to 0.'
      end

      @v_frete = v_frete
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          chassi == o.chassi &&
          c_cor == o.c_cor &&
          x_cor == o.x_cor &&
          c_mod == o.c_mod &&
          v_unit == o.v_unit &&
          v_frete == o.v_frete
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [chassi, c_cor, x_cor, c_mod, v_unit, v_frete].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = NuvemfiscalSdkRuby.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
