=begin
#API Nuvem Fiscal

#API para automação comercial e documentos fiscais.

The version of the OpenAPI document: 2.44.0

Generated by: https://openapi-generator.tech
Generator version: 7.10.0

=end

require 'date'
require 'time'

module NuvemfiscalSdkRuby
  # Grupo de informações do endereço da obra do serviço prestado.
  class EnderecoSimples
    # Número do CEP.
    attr_accessor :cep

    attr_accessor :end_ext

    # Tipo e nome do logradouro da localização do imóvel.
    attr_accessor :x_lgr

    # Número do imóvel.
    attr_accessor :nro

    # Complemento do endereço.
    attr_accessor :x_cpl

    # Bairro.
    attr_accessor :x_bairro

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'cep' => :'CEP',
        :'end_ext' => :'endExt',
        :'x_lgr' => :'xLgr',
        :'nro' => :'nro',
        :'x_cpl' => :'xCpl',
        :'x_bairro' => :'xBairro'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'cep' => :'String',
        :'end_ext' => :'EnderExtSimples',
        :'x_lgr' => :'String',
        :'nro' => :'String',
        :'x_cpl' => :'String',
        :'x_bairro' => :'String'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'cep',
        :'x_lgr',
        :'nro',
        :'x_cpl',
        :'x_bairro'
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `NuvemfiscalSdkRuby::EnderecoSimples` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `NuvemfiscalSdkRuby::EnderecoSimples`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'cep')
        self.cep = attributes[:'cep']
      end

      if attributes.key?(:'end_ext')
        self.end_ext = attributes[:'end_ext']
      end

      if attributes.key?(:'x_lgr')
        self.x_lgr = attributes[:'x_lgr']
      else
        self.x_lgr = nil
      end

      if attributes.key?(:'nro')
        self.nro = attributes[:'nro']
      else
        self.nro = nil
      end

      if attributes.key?(:'x_cpl')
        self.x_cpl = attributes[:'x_cpl']
      end

      if attributes.key?(:'x_bairro')
        self.x_bairro = attributes[:'x_bairro']
      else
        self.x_bairro = nil
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      if @x_lgr.to_s.length > 255
        invalid_properties.push('invalid value for "x_lgr", the character length must be smaller than or equal to 255.')
      end

      if @x_lgr.to_s.length < 1
        invalid_properties.push('invalid value for "x_lgr", the character length must be great than or equal to 1.')
      end

      if @nro.to_s.length > 60
        invalid_properties.push('invalid value for "nro", the character length must be smaller than or equal to 60.')
      end

      if @nro.to_s.length < 1
        invalid_properties.push('invalid value for "nro", the character length must be great than or equal to 1.')
      end

      if !@x_cpl.nil? && @x_cpl.to_s.length > 156
        invalid_properties.push('invalid value for "x_cpl", the character length must be smaller than or equal to 156.')
      end

      if !@x_cpl.nil? && @x_cpl.to_s.length < 1
        invalid_properties.push('invalid value for "x_cpl", the character length must be great than or equal to 1.')
      end

      if @x_bairro.to_s.length > 60
        invalid_properties.push('invalid value for "x_bairro", the character length must be smaller than or equal to 60.')
      end

      if @x_bairro.to_s.length < 1
        invalid_properties.push('invalid value for "x_bairro", the character length must be great than or equal to 1.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      return false if @x_lgr.to_s.length > 255
      return false if @x_lgr.to_s.length < 1
      return false if @nro.to_s.length > 60
      return false if @nro.to_s.length < 1
      return false if !@x_cpl.nil? && @x_cpl.to_s.length > 156
      return false if !@x_cpl.nil? && @x_cpl.to_s.length < 1
      return false if @x_bairro.to_s.length > 60
      return false if @x_bairro.to_s.length < 1
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] x_lgr Value to be assigned
    def x_lgr=(x_lgr)
      if !x_lgr.nil? && x_lgr.to_s.length > 255
        fail ArgumentError, 'invalid value for "x_lgr", the character length must be smaller than or equal to 255.'
      end

      if !x_lgr.nil? && x_lgr.to_s.length < 1
        fail ArgumentError, 'invalid value for "x_lgr", the character length must be great than or equal to 1.'
      end

      @x_lgr = x_lgr
    end

    # Custom attribute writer method with validation
    # @param [Object] nro Value to be assigned
    def nro=(nro)
      if !nro.nil? && nro.to_s.length > 60
        fail ArgumentError, 'invalid value for "nro", the character length must be smaller than or equal to 60.'
      end

      if !nro.nil? && nro.to_s.length < 1
        fail ArgumentError, 'invalid value for "nro", the character length must be great than or equal to 1.'
      end

      @nro = nro
    end

    # Custom attribute writer method with validation
    # @param [Object] x_cpl Value to be assigned
    def x_cpl=(x_cpl)
      if !x_cpl.nil? && x_cpl.to_s.length > 156
        fail ArgumentError, 'invalid value for "x_cpl", the character length must be smaller than or equal to 156.'
      end

      if !x_cpl.nil? && x_cpl.to_s.length < 1
        fail ArgumentError, 'invalid value for "x_cpl", the character length must be great than or equal to 1.'
      end

      @x_cpl = x_cpl
    end

    # Custom attribute writer method with validation
    # @param [Object] x_bairro Value to be assigned
    def x_bairro=(x_bairro)
      if !x_bairro.nil? && x_bairro.to_s.length > 60
        fail ArgumentError, 'invalid value for "x_bairro", the character length must be smaller than or equal to 60.'
      end

      if !x_bairro.nil? && x_bairro.to_s.length < 1
        fail ArgumentError, 'invalid value for "x_bairro", the character length must be great than or equal to 1.'
      end

      @x_bairro = x_bairro
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          cep == o.cep &&
          end_ext == o.end_ext &&
          x_lgr == o.x_lgr &&
          nro == o.nro &&
          x_cpl == o.x_cpl &&
          x_bairro == o.x_bairro
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [cep, end_ext, x_lgr, nro, x_cpl, x_bairro].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = NuvemfiscalSdkRuby.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
