=begin
#API Nuvem Fiscal

#API para automação comercial e documentos fiscais.

The version of the OpenAPI document: 2.44.0

Generated by: https://openapi-generator.tech
Generator version: 7.10.0

=end

require 'date'
require 'time'

module NuvemfiscalSdkRuby
  # Dados do Veículo com a Tração.
  class MdfeSefazVeicTracao
    # Código interno do veículo.
    attr_accessor :c_int

    # Placa do veículo.
    attr_accessor :placa

    # RENAVAM do veículo.
    attr_accessor :renavam

    # Tara em KG.
    attr_accessor :tara

    # Capacidade em KG.
    attr_accessor :cap_kg

    # Capacidade em M3.
    attr_accessor :cap_m3

    attr_accessor :prop

    attr_accessor :condutor

    # Tipo de Rodado.  Preencher com:  * 01 - Truck  * 02 - Toco  * 03 - Cavalo Mecânico  * 04 - VAN  * 05 - Utilitário  * 06 - Outros
    attr_accessor :tp_rod

    # Tipo de Carroceria.  Preencher com:  * 00 - não aplicável  * 01 - Aberta  * 02 - Fechada/Baú  * 03 - Granelera  * 04 - Porta Container  * 05 - Sider
    attr_accessor :tp_car

    # UF em que veículo está licenciado.  Sigla da UF de licenciamento do veículo.
    attr_accessor :uf

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'c_int' => :'cInt',
        :'placa' => :'placa',
        :'renavam' => :'RENAVAM',
        :'tara' => :'tara',
        :'cap_kg' => :'capKG',
        :'cap_m3' => :'capM3',
        :'prop' => :'prop',
        :'condutor' => :'condutor',
        :'tp_rod' => :'tpRod',
        :'tp_car' => :'tpCar',
        :'uf' => :'UF'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'c_int' => :'String',
        :'placa' => :'String',
        :'renavam' => :'String',
        :'tara' => :'Integer',
        :'cap_kg' => :'Integer',
        :'cap_m3' => :'Integer',
        :'prop' => :'MdfeSefazProp',
        :'condutor' => :'Array<MdfeSefazCondutor>',
        :'tp_rod' => :'String',
        :'tp_car' => :'String',
        :'uf' => :'String'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'c_int',
        :'placa',
        :'renavam',
        :'tara',
        :'cap_kg',
        :'cap_m3',
        :'tp_rod',
        :'tp_car',
        :'uf'
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `NuvemfiscalSdkRuby::MdfeSefazVeicTracao` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `NuvemfiscalSdkRuby::MdfeSefazVeicTracao`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'c_int')
        self.c_int = attributes[:'c_int']
      end

      if attributes.key?(:'placa')
        self.placa = attributes[:'placa']
      else
        self.placa = nil
      end

      if attributes.key?(:'renavam')
        self.renavam = attributes[:'renavam']
      end

      if attributes.key?(:'tara')
        self.tara = attributes[:'tara']
      else
        self.tara = nil
      end

      if attributes.key?(:'cap_kg')
        self.cap_kg = attributes[:'cap_kg']
      end

      if attributes.key?(:'cap_m3')
        self.cap_m3 = attributes[:'cap_m3']
      end

      if attributes.key?(:'prop')
        self.prop = attributes[:'prop']
      end

      if attributes.key?(:'condutor')
        if (value = attributes[:'condutor']).is_a?(Array)
          self.condutor = value
        end
      else
        self.condutor = nil
      end

      if attributes.key?(:'tp_rod')
        self.tp_rod = attributes[:'tp_rod']
      else
        self.tp_rod = nil
      end

      if attributes.key?(:'tp_car')
        self.tp_car = attributes[:'tp_car']
      else
        self.tp_car = nil
      end

      if attributes.key?(:'uf')
        self.uf = attributes[:'uf']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      if !@c_int.nil? && @c_int.to_s.length > 10
        invalid_properties.push('invalid value for "c_int", the character length must be smaller than or equal to 10.')
      end

      if !@c_int.nil? && @c_int.to_s.length < 1
        invalid_properties.push('invalid value for "c_int", the character length must be great than or equal to 1.')
      end

      if !@renavam.nil? && @renavam.to_s.length > 11
        invalid_properties.push('invalid value for "renavam", the character length must be smaller than or equal to 11.')
      end

      if !@renavam.nil? && @renavam.to_s.length < 9
        invalid_properties.push('invalid value for "renavam", the character length must be great than or equal to 9.')
      end

      if @tara > 999999
        invalid_properties.push('invalid value for "tara", must be smaller than or equal to 999999.')
      end

      if @tara < 0
        invalid_properties.push('invalid value for "tara", must be greater than or equal to 0.')
      end

      if !@cap_kg.nil? && @cap_kg > 999999
        invalid_properties.push('invalid value for "cap_kg", must be smaller than or equal to 999999.')
      end

      if !@cap_kg.nil? && @cap_kg < 0
        invalid_properties.push('invalid value for "cap_kg", must be greater than or equal to 0.')
      end

      if !@cap_m3.nil? && @cap_m3 > 999
        invalid_properties.push('invalid value for "cap_m3", must be smaller than or equal to 999.')
      end

      if !@cap_m3.nil? && @cap_m3 < 0
        invalid_properties.push('invalid value for "cap_m3", must be greater than or equal to 0.')
      end

      if @condutor.nil?
        invalid_properties.push('invalid value for "condutor", condutor cannot be nil.')
      end

      if @condutor.length > 10
        invalid_properties.push('invalid value for "condutor", number of items must be less than or equal to 10.')
      end

      if @condutor.length < 1
        invalid_properties.push('invalid value for "condutor", number of items must be greater than or equal to 1.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      return false if !@c_int.nil? && @c_int.to_s.length > 10
      return false if !@c_int.nil? && @c_int.to_s.length < 1
      return false if !@renavam.nil? && @renavam.to_s.length > 11
      return false if !@renavam.nil? && @renavam.to_s.length < 9
      return false if @tara > 999999
      return false if @tara < 0
      return false if !@cap_kg.nil? && @cap_kg > 999999
      return false if !@cap_kg.nil? && @cap_kg < 0
      return false if !@cap_m3.nil? && @cap_m3 > 999
      return false if !@cap_m3.nil? && @cap_m3 < 0
      return false if @condutor.nil?
      return false if @condutor.length > 10
      return false if @condutor.length < 1
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] c_int Value to be assigned
    def c_int=(c_int)
      if !c_int.nil? && c_int.to_s.length > 10
        fail ArgumentError, 'invalid value for "c_int", the character length must be smaller than or equal to 10.'
      end

      if !c_int.nil? && c_int.to_s.length < 1
        fail ArgumentError, 'invalid value for "c_int", the character length must be great than or equal to 1.'
      end

      @c_int = c_int
    end

    # Custom attribute writer method with validation
    # @param [Object] renavam Value to be assigned
    def renavam=(renavam)
      if !renavam.nil? && renavam.to_s.length > 11
        fail ArgumentError, 'invalid value for "renavam", the character length must be smaller than or equal to 11.'
      end

      if !renavam.nil? && renavam.to_s.length < 9
        fail ArgumentError, 'invalid value for "renavam", the character length must be great than or equal to 9.'
      end

      @renavam = renavam
    end

    # Custom attribute writer method with validation
    # @param [Object] tara Value to be assigned
    def tara=(tara)
      if !tara.nil? && tara > 999999
        fail ArgumentError, 'invalid value for "tara", must be smaller than or equal to 999999.'
      end

      if !tara.nil? && tara < 0
        fail ArgumentError, 'invalid value for "tara", must be greater than or equal to 0.'
      end

      @tara = tara
    end

    # Custom attribute writer method with validation
    # @param [Object] cap_kg Value to be assigned
    def cap_kg=(cap_kg)
      if !cap_kg.nil? && cap_kg > 999999
        fail ArgumentError, 'invalid value for "cap_kg", must be smaller than or equal to 999999.'
      end

      if !cap_kg.nil? && cap_kg < 0
        fail ArgumentError, 'invalid value for "cap_kg", must be greater than or equal to 0.'
      end

      @cap_kg = cap_kg
    end

    # Custom attribute writer method with validation
    # @param [Object] cap_m3 Value to be assigned
    def cap_m3=(cap_m3)
      if !cap_m3.nil? && cap_m3 > 999
        fail ArgumentError, 'invalid value for "cap_m3", must be smaller than or equal to 999.'
      end

      if !cap_m3.nil? && cap_m3 < 0
        fail ArgumentError, 'invalid value for "cap_m3", must be greater than or equal to 0.'
      end

      @cap_m3 = cap_m3
    end

    # Custom attribute writer method with validation
    # @param [Object] condutor Value to be assigned
    def condutor=(condutor)
      if condutor.nil?
        fail ArgumentError, 'condutor cannot be nil'
      end

      if condutor.length > 10
        fail ArgumentError, 'invalid value for "condutor", number of items must be less than or equal to 10.'
      end

      if condutor.length < 1
        fail ArgumentError, 'invalid value for "condutor", number of items must be greater than or equal to 1.'
      end

      @condutor = condutor
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          c_int == o.c_int &&
          placa == o.placa &&
          renavam == o.renavam &&
          tara == o.tara &&
          cap_kg == o.cap_kg &&
          cap_m3 == o.cap_m3 &&
          prop == o.prop &&
          condutor == o.condutor &&
          tp_rod == o.tp_rod &&
          tp_car == o.tp_car &&
          uf == o.uf
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [c_int, placa, renavam, tara, cap_kg, cap_m3, prop, condutor, tp_rod, tp_car, uf].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = NuvemfiscalSdkRuby.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
