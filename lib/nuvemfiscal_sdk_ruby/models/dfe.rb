=begin
#API Nuvem Fiscal

#API para automação comercial e documentos fiscais.

The version of the OpenAPI document: 2.44.0

Generated by: https://openapi-generator.tech
Generator version: 7.10.0

=end

require 'date'
require 'time'

module NuvemfiscalSdkRuby
  class Dfe
    # ID único gerado pela Nuvem Fiscal para este documento.
    attr_accessor :id

    attr_accessor :ambiente

    # Data/hora em que o documento foi criado na Nuvem Fiscal. Representado no formato <a href=\"https://en.wikipedia.org/wiki/ISO_8601\" target=\"blank\">`ISO 8601`</a>.
    attr_accessor :created_at

    # * `pendente`: o pedido de emissão do documento foi recebido pela Nuvem Fiscal e está na fila de processamento.  * `autorizado`, `rejeitado` ou `denegado`: o documento foi transmitido para a SEFAZ, que retornou um desses status.  * `cancelado`: um evento de cancelamento foi homologado pela SEFAZ e associado ao documento.  * `encerrado`: um evento de encerramento foi homologado pela SEFAZ e associado a um MDF-e.  * `erro`: status próprio da Nuvem Fiscal que significa, na maioria das vezes, que houve algum erro que impediu a transmissão do documento para a SEFAZ (erros de validação, erros interno do servidor, timeouts, etc).
    attr_accessor :status

    # Seu identificador único para este documento. Opcional, ajuda a evitar o envio duplicado de um mesmo documento.
    attr_accessor :referencia

    attr_accessor :data_emissao

    attr_accessor :modelo

    attr_accessor :serie

    attr_accessor :numero

    attr_accessor :tipo_emissao

    attr_accessor :valor_total

    # Chave de acesso do DF-e.
    attr_accessor :chave

    attr_accessor :autorizacao

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'id' => :'id',
        :'ambiente' => :'ambiente',
        :'created_at' => :'created_at',
        :'status' => :'status',
        :'referencia' => :'referencia',
        :'data_emissao' => :'data_emissao',
        :'modelo' => :'modelo',
        :'serie' => :'serie',
        :'numero' => :'numero',
        :'tipo_emissao' => :'tipo_emissao',
        :'valor_total' => :'valor_total',
        :'chave' => :'chave',
        :'autorizacao' => :'autorizacao'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'id' => :'String',
        :'ambiente' => :'String',
        :'created_at' => :'Time',
        :'status' => :'String',
        :'referencia' => :'String',
        :'data_emissao' => :'Time',
        :'modelo' => :'Integer',
        :'serie' => :'Integer',
        :'numero' => :'Integer',
        :'tipo_emissao' => :'Integer',
        :'valor_total' => :'Float',
        :'chave' => :'String',
        :'autorizacao' => :'DfeAutorizacao'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'referencia',
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `NuvemfiscalSdkRuby::Dfe` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `NuvemfiscalSdkRuby::Dfe`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.key?(:'ambiente')
        self.ambiente = attributes[:'ambiente']
      end

      if attributes.key?(:'created_at')
        self.created_at = attributes[:'created_at']
      end

      if attributes.key?(:'status')
        self.status = attributes[:'status']
      end

      if attributes.key?(:'referencia')
        self.referencia = attributes[:'referencia']
      end

      if attributes.key?(:'data_emissao')
        self.data_emissao = attributes[:'data_emissao']
      end

      if attributes.key?(:'modelo')
        self.modelo = attributes[:'modelo']
      end

      if attributes.key?(:'serie')
        self.serie = attributes[:'serie']
      end

      if attributes.key?(:'numero')
        self.numero = attributes[:'numero']
      end

      if attributes.key?(:'tipo_emissao')
        self.tipo_emissao = attributes[:'tipo_emissao']
      end

      if attributes.key?(:'valor_total')
        self.valor_total = attributes[:'valor_total']
      end

      if attributes.key?(:'chave')
        self.chave = attributes[:'chave']
      end

      if attributes.key?(:'autorizacao')
        self.autorizacao = attributes[:'autorizacao']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      ambiente_validator = EnumAttributeValidator.new('String', ["homologacao", "producao"])
      return false unless ambiente_validator.valid?(@ambiente)
      status_validator = EnumAttributeValidator.new('String', ["pendente", "autorizado", "rejeitado", "denegado", "encerrado", "cancelado", "erro"])
      return false unless status_validator.valid?(@status)
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] ambiente Object to be assigned
    def ambiente=(ambiente)
      validator = EnumAttributeValidator.new('String', ["homologacao", "producao"])
      unless validator.valid?(ambiente)
        fail ArgumentError, "invalid value for \"ambiente\", must be one of #{validator.allowable_values}."
      end
      @ambiente = ambiente
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] status Object to be assigned
    def status=(status)
      validator = EnumAttributeValidator.new('String', ["pendente", "autorizado", "rejeitado", "denegado", "encerrado", "cancelado", "erro"])
      unless validator.valid?(status)
        fail ArgumentError, "invalid value for \"status\", must be one of #{validator.allowable_values}."
      end
      @status = status
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          id == o.id &&
          ambiente == o.ambiente &&
          created_at == o.created_at &&
          status == o.status &&
          referencia == o.referencia &&
          data_emissao == o.data_emissao &&
          modelo == o.modelo &&
          serie == o.serie &&
          numero == o.numero &&
          tipo_emissao == o.tipo_emissao &&
          valor_total == o.valor_total &&
          chave == o.chave &&
          autorizacao == o.autorizacao
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [id, ambiente, created_at, status, referencia, data_emissao, modelo, serie, numero, tipo_emissao, valor_total, chave, autorizacao].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = NuvemfiscalSdkRuby.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
