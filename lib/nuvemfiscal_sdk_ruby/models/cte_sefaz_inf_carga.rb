=begin
#API Nuvem Fiscal

#API para automação comercial e documentos fiscais.

The version of the OpenAPI document: 2.44.0

Generated by: https://openapi-generator.tech
Generator version: 7.10.0

=end

require 'date'
require 'time'

module NuvemfiscalSdkRuby
  # Informações da Carga do CT-e.
  class CteSefazInfCarga
    # Valor total da carga.  Dever ser informado para todos os modais, com exceção para o Dutoviário.
    attr_accessor :v_carga

    # Produto predominante.  Informar a descrição do produto predominante.
    attr_accessor :pro_pred

    # Outras características da carga.  \"FRIA\", \"GRANEL\", \"REFRIGERADA\", \"Medidas: 12X12X12\".
    attr_accessor :x_out_cat

    attr_accessor :inf_q

    # Valor da Carga para efeito de averbação.  Normalmente igual ao valor declarado da mercadoria, diferente por exemplo, quando a mercadoria transportada é isenta de tributos nacionais para exportação, onde é preciso averbar um valor maior, pois no caso de indenização, o valor a ser pago será maior.
    attr_accessor :v_carga_averb

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'v_carga' => :'vCarga',
        :'pro_pred' => :'proPred',
        :'x_out_cat' => :'xOutCat',
        :'inf_q' => :'infQ',
        :'v_carga_averb' => :'vCargaAverb'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'v_carga' => :'Float',
        :'pro_pred' => :'String',
        :'x_out_cat' => :'String',
        :'inf_q' => :'Array<CteSefazInfQ>',
        :'v_carga_averb' => :'Float'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'v_carga',
        :'pro_pred',
        :'x_out_cat',
        :'v_carga_averb'
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `NuvemfiscalSdkRuby::CteSefazInfCarga` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `NuvemfiscalSdkRuby::CteSefazInfCarga`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'v_carga')
        self.v_carga = attributes[:'v_carga']
      end

      if attributes.key?(:'pro_pred')
        self.pro_pred = attributes[:'pro_pred']
      else
        self.pro_pred = nil
      end

      if attributes.key?(:'x_out_cat')
        self.x_out_cat = attributes[:'x_out_cat']
      end

      if attributes.key?(:'inf_q')
        if (value = attributes[:'inf_q']).is_a?(Array)
          self.inf_q = value
        end
      else
        self.inf_q = nil
      end

      if attributes.key?(:'v_carga_averb')
        self.v_carga_averb = attributes[:'v_carga_averb']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      if !@v_carga.nil? && @v_carga < 0
        invalid_properties.push('invalid value for "v_carga", must be greater than or equal to 0.')
      end

      if @pro_pred.to_s.length > 60
        invalid_properties.push('invalid value for "pro_pred", the character length must be smaller than or equal to 60.')
      end

      if @pro_pred.to_s.length < 1
        invalid_properties.push('invalid value for "pro_pred", the character length must be great than or equal to 1.')
      end

      if !@x_out_cat.nil? && @x_out_cat.to_s.length > 30
        invalid_properties.push('invalid value for "x_out_cat", the character length must be smaller than or equal to 30.')
      end

      if !@x_out_cat.nil? && @x_out_cat.to_s.length < 1
        invalid_properties.push('invalid value for "x_out_cat", the character length must be great than or equal to 1.')
      end

      if @inf_q.nil?
        invalid_properties.push('invalid value for "inf_q", inf_q cannot be nil.')
      end

      if @inf_q.length < 1
        invalid_properties.push('invalid value for "inf_q", number of items must be greater than or equal to 1.')
      end

      if !@v_carga_averb.nil? && @v_carga_averb <= 0
        invalid_properties.push('invalid value for "v_carga_averb", must be greater than 0.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      return false if !@v_carga.nil? && @v_carga < 0
      return false if @pro_pred.to_s.length > 60
      return false if @pro_pred.to_s.length < 1
      return false if !@x_out_cat.nil? && @x_out_cat.to_s.length > 30
      return false if !@x_out_cat.nil? && @x_out_cat.to_s.length < 1
      return false if @inf_q.nil?
      return false if @inf_q.length < 1
      return false if !@v_carga_averb.nil? && @v_carga_averb <= 0
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] v_carga Value to be assigned
    def v_carga=(v_carga)
      if !v_carga.nil? && v_carga < 0
        fail ArgumentError, 'invalid value for "v_carga", must be greater than or equal to 0.'
      end

      @v_carga = v_carga
    end

    # Custom attribute writer method with validation
    # @param [Object] pro_pred Value to be assigned
    def pro_pred=(pro_pred)
      if !pro_pred.nil? && pro_pred.to_s.length > 60
        fail ArgumentError, 'invalid value for "pro_pred", the character length must be smaller than or equal to 60.'
      end

      if !pro_pred.nil? && pro_pred.to_s.length < 1
        fail ArgumentError, 'invalid value for "pro_pred", the character length must be great than or equal to 1.'
      end

      @pro_pred = pro_pred
    end

    # Custom attribute writer method with validation
    # @param [Object] x_out_cat Value to be assigned
    def x_out_cat=(x_out_cat)
      if !x_out_cat.nil? && x_out_cat.to_s.length > 30
        fail ArgumentError, 'invalid value for "x_out_cat", the character length must be smaller than or equal to 30.'
      end

      if !x_out_cat.nil? && x_out_cat.to_s.length < 1
        fail ArgumentError, 'invalid value for "x_out_cat", the character length must be great than or equal to 1.'
      end

      @x_out_cat = x_out_cat
    end

    # Custom attribute writer method with validation
    # @param [Object] inf_q Value to be assigned
    def inf_q=(inf_q)
      if inf_q.nil?
        fail ArgumentError, 'inf_q cannot be nil'
      end

      if inf_q.length < 1
        fail ArgumentError, 'invalid value for "inf_q", number of items must be greater than or equal to 1.'
      end

      @inf_q = inf_q
    end

    # Custom attribute writer method with validation
    # @param [Object] v_carga_averb Value to be assigned
    def v_carga_averb=(v_carga_averb)
      if !v_carga_averb.nil? && v_carga_averb <= 0
        fail ArgumentError, 'invalid value for "v_carga_averb", must be greater than 0.'
      end

      @v_carga_averb = v_carga_averb
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          v_carga == o.v_carga &&
          pro_pred == o.pro_pred &&
          x_out_cat == o.x_out_cat &&
          inf_q == o.inf_q &&
          v_carga_averb == o.v_carga_averb
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [v_carga, pro_pred, x_out_cat, inf_q, v_carga_averb].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = NuvemfiscalSdkRuby.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
