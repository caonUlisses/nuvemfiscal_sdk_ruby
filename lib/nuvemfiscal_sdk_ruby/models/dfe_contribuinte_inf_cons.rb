=begin
#API Nuvem Fiscal

#API para automação comercial e documentos fiscais.

The version of the OpenAPI document: 2.44.0

Generated by: https://openapi-generator.tech
Generator version: 7.10.0

=end

require 'date'
require 'time'

module NuvemfiscalSdkRuby
  # Dados do Resultado do Dados do Pedido de Consulta de cadastro de contribuintes.
  class DfeContribuinteInfCons
    # Código do status da mensagem enviada.
    attr_accessor :codigo_status

    # Descrição literal do status do serviço solicitado.
    attr_accessor :motivo_status

    # sigla da UF consultada, utilizar SU para SUFRAMA.
    attr_accessor :uf

    # Inscrição Estadual do contribuinte.
    attr_accessor :ie

    # CNPJ do contribuinte.
    attr_accessor :cnpj

    # CPF do contribuinte.
    attr_accessor :cpf

    # Data da Consulta.
    attr_accessor :data_consulta

    # código da UF de atendimento.
    attr_accessor :uf_atendimento

    attr_accessor :informacoes_cadastrais

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'codigo_status' => :'codigo_status',
        :'motivo_status' => :'motivo_status',
        :'uf' => :'uf',
        :'ie' => :'ie',
        :'cnpj' => :'cnpj',
        :'cpf' => :'cpf',
        :'data_consulta' => :'data_consulta',
        :'uf_atendimento' => :'uf_atendimento',
        :'informacoes_cadastrais' => :'informacoes_cadastrais'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'codigo_status' => :'Integer',
        :'motivo_status' => :'String',
        :'uf' => :'String',
        :'ie' => :'String',
        :'cnpj' => :'String',
        :'cpf' => :'String',
        :'data_consulta' => :'Time',
        :'uf_atendimento' => :'Integer',
        :'informacoes_cadastrais' => :'Array<DfeContribuinteInfCad>'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'codigo_status',
        :'motivo_status',
        :'uf',
        :'ie',
        :'cnpj',
        :'cpf',
        :'data_consulta',
        :'uf_atendimento',
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `NuvemfiscalSdkRuby::DfeContribuinteInfCons` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `NuvemfiscalSdkRuby::DfeContribuinteInfCons`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'codigo_status')
        self.codigo_status = attributes[:'codigo_status']
      else
        self.codigo_status = nil
      end

      if attributes.key?(:'motivo_status')
        self.motivo_status = attributes[:'motivo_status']
      else
        self.motivo_status = nil
      end

      if attributes.key?(:'uf')
        self.uf = attributes[:'uf']
      else
        self.uf = nil
      end

      if attributes.key?(:'ie')
        self.ie = attributes[:'ie']
      end

      if attributes.key?(:'cnpj')
        self.cnpj = attributes[:'cnpj']
      end

      if attributes.key?(:'cpf')
        self.cpf = attributes[:'cpf']
      end

      if attributes.key?(:'data_consulta')
        self.data_consulta = attributes[:'data_consulta']
      else
        self.data_consulta = nil
      end

      if attributes.key?(:'uf_atendimento')
        self.uf_atendimento = attributes[:'uf_atendimento']
      else
        self.uf_atendimento = nil
      end

      if attributes.key?(:'informacoes_cadastrais')
        if (value = attributes[:'informacoes_cadastrais']).is_a?(Array)
          self.informacoes_cadastrais = value
        end
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      if @codigo_status > 999
        invalid_properties.push('invalid value for "codigo_status", must be smaller than or equal to 999.')
      end

      if @codigo_status < 0
        invalid_properties.push('invalid value for "codigo_status", must be greater than or equal to 0.')
      end

      if @motivo_status.to_s.length > 255
        invalid_properties.push('invalid value for "motivo_status", the character length must be smaller than or equal to 255.')
      end

      if @motivo_status.to_s.length < 1
        invalid_properties.push('invalid value for "motivo_status", the character length must be great than or equal to 1.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      return false if @codigo_status > 999
      return false if @codigo_status < 0
      return false if @motivo_status.to_s.length > 255
      return false if @motivo_status.to_s.length < 1
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] codigo_status Value to be assigned
    def codigo_status=(codigo_status)
      if !codigo_status.nil? && codigo_status > 999
        fail ArgumentError, 'invalid value for "codigo_status", must be smaller than or equal to 999.'
      end

      if !codigo_status.nil? && codigo_status < 0
        fail ArgumentError, 'invalid value for "codigo_status", must be greater than or equal to 0.'
      end

      @codigo_status = codigo_status
    end

    # Custom attribute writer method with validation
    # @param [Object] motivo_status Value to be assigned
    def motivo_status=(motivo_status)
      if !motivo_status.nil? && motivo_status.to_s.length > 255
        fail ArgumentError, 'invalid value for "motivo_status", the character length must be smaller than or equal to 255.'
      end

      if !motivo_status.nil? && motivo_status.to_s.length < 1
        fail ArgumentError, 'invalid value for "motivo_status", the character length must be great than or equal to 1.'
      end

      @motivo_status = motivo_status
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          codigo_status == o.codigo_status &&
          motivo_status == o.motivo_status &&
          uf == o.uf &&
          ie == o.ie &&
          cnpj == o.cnpj &&
          cpf == o.cpf &&
          data_consulta == o.data_consulta &&
          uf_atendimento == o.uf_atendimento &&
          informacoes_cadastrais == o.informacoes_cadastrais
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [codigo_status, motivo_status, uf, ie, cnpj, cpf, data_consulta, uf_atendimento, informacoes_cadastrais].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = NuvemfiscalSdkRuby.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
