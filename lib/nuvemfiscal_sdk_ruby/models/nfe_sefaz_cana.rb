=begin
#API Nuvem Fiscal

#API para automação comercial e documentos fiscais.

The version of the OpenAPI document: 2.44.0

Generated by: https://openapi-generator.tech
Generator version: 7.10.0

=end

require 'date'
require 'time'

module NuvemfiscalSdkRuby
  # Informações de registro aquisições de cana.
  class NfeSefazCana
    # Identificação da safra.
    attr_accessor :safra

    # Mês e Ano de Referência, formato: MM/AAAA.
    attr_accessor :ref

    attr_accessor :for_dia

    # Total do mês.
    attr_accessor :q_tot_mes

    # Total Anterior.
    attr_accessor :q_tot_ant

    # Total Geral.
    attr_accessor :q_tot_ger

    attr_accessor :deduc

    # Valor  dos fornecimentos.
    attr_accessor :v_for

    # Valor Total das Deduções.
    attr_accessor :v_tot_ded

    # Valor Líquido dos fornecimentos.
    attr_accessor :v_liq_for

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'safra' => :'safra',
        :'ref' => :'ref',
        :'for_dia' => :'forDia',
        :'q_tot_mes' => :'qTotMes',
        :'q_tot_ant' => :'qTotAnt',
        :'q_tot_ger' => :'qTotGer',
        :'deduc' => :'deduc',
        :'v_for' => :'vFor',
        :'v_tot_ded' => :'vTotDed',
        :'v_liq_for' => :'vLiqFor'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'safra' => :'String',
        :'ref' => :'String',
        :'for_dia' => :'Array<NfeSefazForDia>',
        :'q_tot_mes' => :'Float',
        :'q_tot_ant' => :'Float',
        :'q_tot_ger' => :'Float',
        :'deduc' => :'Array<NfeSefazDeduc>',
        :'v_for' => :'Float',
        :'v_tot_ded' => :'Float',
        :'v_liq_for' => :'Float'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'safra',
        :'ref',
        :'q_tot_mes',
        :'q_tot_ant',
        :'q_tot_ger',
        :'v_for',
        :'v_tot_ded',
        :'v_liq_for'
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `NuvemfiscalSdkRuby::NfeSefazCana` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `NuvemfiscalSdkRuby::NfeSefazCana`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'safra')
        self.safra = attributes[:'safra']
      else
        self.safra = nil
      end

      if attributes.key?(:'ref')
        self.ref = attributes[:'ref']
      else
        self.ref = nil
      end

      if attributes.key?(:'for_dia')
        if (value = attributes[:'for_dia']).is_a?(Array)
          self.for_dia = value
        end
      else
        self.for_dia = nil
      end

      if attributes.key?(:'q_tot_mes')
        self.q_tot_mes = attributes[:'q_tot_mes']
      else
        self.q_tot_mes = nil
      end

      if attributes.key?(:'q_tot_ant')
        self.q_tot_ant = attributes[:'q_tot_ant']
      else
        self.q_tot_ant = nil
      end

      if attributes.key?(:'q_tot_ger')
        self.q_tot_ger = attributes[:'q_tot_ger']
      else
        self.q_tot_ger = nil
      end

      if attributes.key?(:'deduc')
        if (value = attributes[:'deduc']).is_a?(Array)
          self.deduc = value
        end
      end

      if attributes.key?(:'v_for')
        self.v_for = attributes[:'v_for']
      else
        self.v_for = nil
      end

      if attributes.key?(:'v_tot_ded')
        self.v_tot_ded = attributes[:'v_tot_ded']
      else
        self.v_tot_ded = nil
      end

      if attributes.key?(:'v_liq_for')
        self.v_liq_for = attributes[:'v_liq_for']
      else
        self.v_liq_for = nil
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      if @safra.to_s.length > 9
        invalid_properties.push('invalid value for "safra", the character length must be smaller than or equal to 9.')
      end

      if @safra.to_s.length < 4
        invalid_properties.push('invalid value for "safra", the character length must be great than or equal to 4.')
      end

      if @for_dia.nil?
        invalid_properties.push('invalid value for "for_dia", for_dia cannot be nil.')
      end

      if @for_dia.length > 31
        invalid_properties.push('invalid value for "for_dia", number of items must be less than or equal to 31.')
      end

      if @for_dia.length < 1
        invalid_properties.push('invalid value for "for_dia", number of items must be greater than or equal to 1.')
      end

      if @q_tot_mes < 0
        invalid_properties.push('invalid value for "q_tot_mes", must be greater than or equal to 0.')
      end

      if @q_tot_ant < 0
        invalid_properties.push('invalid value for "q_tot_ant", must be greater than or equal to 0.')
      end

      if @q_tot_ger < 0
        invalid_properties.push('invalid value for "q_tot_ger", must be greater than or equal to 0.')
      end

      if !@deduc.nil? && @deduc.length > 10
        invalid_properties.push('invalid value for "deduc", number of items must be less than or equal to 10.')
      end

      if @v_for < 0
        invalid_properties.push('invalid value for "v_for", must be greater than or equal to 0.')
      end

      if @v_tot_ded < 0
        invalid_properties.push('invalid value for "v_tot_ded", must be greater than or equal to 0.')
      end

      if @v_liq_for < 0
        invalid_properties.push('invalid value for "v_liq_for", must be greater than or equal to 0.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      return false if @safra.to_s.length > 9
      return false if @safra.to_s.length < 4
      return false if @for_dia.nil?
      return false if @for_dia.length > 31
      return false if @for_dia.length < 1
      return false if @q_tot_mes < 0
      return false if @q_tot_ant < 0
      return false if @q_tot_ger < 0
      return false if !@deduc.nil? && @deduc.length > 10
      return false if @v_for < 0
      return false if @v_tot_ded < 0
      return false if @v_liq_for < 0
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] safra Value to be assigned
    def safra=(safra)
      if !safra.nil? && safra.to_s.length > 9
        fail ArgumentError, 'invalid value for "safra", the character length must be smaller than or equal to 9.'
      end

      if !safra.nil? && safra.to_s.length < 4
        fail ArgumentError, 'invalid value for "safra", the character length must be great than or equal to 4.'
      end

      @safra = safra
    end

    # Custom attribute writer method with validation
    # @param [Object] for_dia Value to be assigned
    def for_dia=(for_dia)
      if for_dia.nil?
        fail ArgumentError, 'for_dia cannot be nil'
      end

      if for_dia.length > 31
        fail ArgumentError, 'invalid value for "for_dia", number of items must be less than or equal to 31.'
      end

      if for_dia.length < 1
        fail ArgumentError, 'invalid value for "for_dia", number of items must be greater than or equal to 1.'
      end

      @for_dia = for_dia
    end

    # Custom attribute writer method with validation
    # @param [Object] q_tot_mes Value to be assigned
    def q_tot_mes=(q_tot_mes)
      if !q_tot_mes.nil? && q_tot_mes < 0
        fail ArgumentError, 'invalid value for "q_tot_mes", must be greater than or equal to 0.'
      end

      @q_tot_mes = q_tot_mes
    end

    # Custom attribute writer method with validation
    # @param [Object] q_tot_ant Value to be assigned
    def q_tot_ant=(q_tot_ant)
      if !q_tot_ant.nil? && q_tot_ant < 0
        fail ArgumentError, 'invalid value for "q_tot_ant", must be greater than or equal to 0.'
      end

      @q_tot_ant = q_tot_ant
    end

    # Custom attribute writer method with validation
    # @param [Object] q_tot_ger Value to be assigned
    def q_tot_ger=(q_tot_ger)
      if !q_tot_ger.nil? && q_tot_ger < 0
        fail ArgumentError, 'invalid value for "q_tot_ger", must be greater than or equal to 0.'
      end

      @q_tot_ger = q_tot_ger
    end

    # Custom attribute writer method with validation
    # @param [Object] deduc Value to be assigned
    def deduc=(deduc)
      if deduc.nil?
        fail ArgumentError, 'deduc cannot be nil'
      end

      if deduc.length > 10
        fail ArgumentError, 'invalid value for "deduc", number of items must be less than or equal to 10.'
      end

      @deduc = deduc
    end

    # Custom attribute writer method with validation
    # @param [Object] v_for Value to be assigned
    def v_for=(v_for)
      if !v_for.nil? && v_for < 0
        fail ArgumentError, 'invalid value for "v_for", must be greater than or equal to 0.'
      end

      @v_for = v_for
    end

    # Custom attribute writer method with validation
    # @param [Object] v_tot_ded Value to be assigned
    def v_tot_ded=(v_tot_ded)
      if !v_tot_ded.nil? && v_tot_ded < 0
        fail ArgumentError, 'invalid value for "v_tot_ded", must be greater than or equal to 0.'
      end

      @v_tot_ded = v_tot_ded
    end

    # Custom attribute writer method with validation
    # @param [Object] v_liq_for Value to be assigned
    def v_liq_for=(v_liq_for)
      if !v_liq_for.nil? && v_liq_for < 0
        fail ArgumentError, 'invalid value for "v_liq_for", must be greater than or equal to 0.'
      end

      @v_liq_for = v_liq_for
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          safra == o.safra &&
          ref == o.ref &&
          for_dia == o.for_dia &&
          q_tot_mes == o.q_tot_mes &&
          q_tot_ant == o.q_tot_ant &&
          q_tot_ger == o.q_tot_ger &&
          deduc == o.deduc &&
          v_for == o.v_for &&
          v_tot_ded == o.v_tot_ded &&
          v_liq_for == o.v_liq_for
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [safra, ref, for_dia, q_tot_mes, q_tot_ant, q_tot_ger, deduc, v_for, v_tot_ded, v_liq_for].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = NuvemfiscalSdkRuby.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
