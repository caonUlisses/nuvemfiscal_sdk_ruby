=begin
#API Nuvem Fiscal

#API para automação comercial e documentos fiscais.

The version of the OpenAPI document: 2.44.0

Generated by: https://openapi-generator.tech
Generator version: 7.10.0

=end

require 'date'
require 'time'

module NuvemfiscalSdkRuby
  class RpsServicoValores
    # Valor unitário do serviço.
    attr_accessor :valor_unitario

    # Valor total do serviço.
    attr_accessor :valor_servicos

    attr_accessor :valor_deducoes

    attr_accessor :valor_pis

    attr_accessor :valor_cofins

    attr_accessor :valor_inss

    attr_accessor :valor_ir

    attr_accessor :valor_csll

    attr_accessor :valor_outras_retencoes

    attr_accessor :valor_iss

    attr_accessor :valor_iss_retido

    attr_accessor :valor_liquido

    attr_accessor :aliquota_iss

    attr_accessor :aliquota_pis

    attr_accessor :aliquota_cofins

    attr_accessor :aliquota_inss

    attr_accessor :aliquota_ir

    attr_accessor :aliquota_csll

    attr_accessor :desconto_incondicionado

    attr_accessor :desconto_condicionado

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'valor_unitario' => :'valor_unitario',
        :'valor_servicos' => :'valor_servicos',
        :'valor_deducoes' => :'valor_deducoes',
        :'valor_pis' => :'valor_pis',
        :'valor_cofins' => :'valor_cofins',
        :'valor_inss' => :'valor_inss',
        :'valor_ir' => :'valor_ir',
        :'valor_csll' => :'valor_csll',
        :'valor_outras_retencoes' => :'valor_outras_retencoes',
        :'valor_iss' => :'valor_iss',
        :'valor_iss_retido' => :'valor_iss_retido',
        :'valor_liquido' => :'valor_liquido',
        :'aliquota_iss' => :'aliquota_iss',
        :'aliquota_pis' => :'aliquota_pis',
        :'aliquota_cofins' => :'aliquota_cofins',
        :'aliquota_inss' => :'aliquota_inss',
        :'aliquota_ir' => :'aliquota_ir',
        :'aliquota_csll' => :'aliquota_csll',
        :'desconto_incondicionado' => :'desconto_incondicionado',
        :'desconto_condicionado' => :'desconto_condicionado'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'valor_unitario' => :'Float',
        :'valor_servicos' => :'Float',
        :'valor_deducoes' => :'Float',
        :'valor_pis' => :'Float',
        :'valor_cofins' => :'Float',
        :'valor_inss' => :'Float',
        :'valor_ir' => :'Float',
        :'valor_csll' => :'Float',
        :'valor_outras_retencoes' => :'Float',
        :'valor_iss' => :'Float',
        :'valor_iss_retido' => :'Float',
        :'valor_liquido' => :'Float',
        :'aliquota_iss' => :'Float',
        :'aliquota_pis' => :'Float',
        :'aliquota_cofins' => :'Float',
        :'aliquota_inss' => :'Float',
        :'aliquota_ir' => :'Float',
        :'aliquota_csll' => :'Float',
        :'desconto_incondicionado' => :'Float',
        :'desconto_condicionado' => :'Float'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `NuvemfiscalSdkRuby::RpsServicoValores` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `NuvemfiscalSdkRuby::RpsServicoValores`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'valor_unitario')
        self.valor_unitario = attributes[:'valor_unitario']
      else
        self.valor_unitario = nil
      end

      if attributes.key?(:'valor_servicos')
        self.valor_servicos = attributes[:'valor_servicos']
      end

      if attributes.key?(:'valor_deducoes')
        self.valor_deducoes = attributes[:'valor_deducoes']
      end

      if attributes.key?(:'valor_pis')
        self.valor_pis = attributes[:'valor_pis']
      end

      if attributes.key?(:'valor_cofins')
        self.valor_cofins = attributes[:'valor_cofins']
      end

      if attributes.key?(:'valor_inss')
        self.valor_inss = attributes[:'valor_inss']
      end

      if attributes.key?(:'valor_ir')
        self.valor_ir = attributes[:'valor_ir']
      end

      if attributes.key?(:'valor_csll')
        self.valor_csll = attributes[:'valor_csll']
      end

      if attributes.key?(:'valor_outras_retencoes')
        self.valor_outras_retencoes = attributes[:'valor_outras_retencoes']
      end

      if attributes.key?(:'valor_iss')
        self.valor_iss = attributes[:'valor_iss']
      end

      if attributes.key?(:'valor_iss_retido')
        self.valor_iss_retido = attributes[:'valor_iss_retido']
      end

      if attributes.key?(:'valor_liquido')
        self.valor_liquido = attributes[:'valor_liquido']
      end

      if attributes.key?(:'aliquota_iss')
        self.aliquota_iss = attributes[:'aliquota_iss']
      end

      if attributes.key?(:'aliquota_pis')
        self.aliquota_pis = attributes[:'aliquota_pis']
      end

      if attributes.key?(:'aliquota_cofins')
        self.aliquota_cofins = attributes[:'aliquota_cofins']
      end

      if attributes.key?(:'aliquota_inss')
        self.aliquota_inss = attributes[:'aliquota_inss']
      end

      if attributes.key?(:'aliquota_ir')
        self.aliquota_ir = attributes[:'aliquota_ir']
      end

      if attributes.key?(:'aliquota_csll')
        self.aliquota_csll = attributes[:'aliquota_csll']
      end

      if attributes.key?(:'desconto_incondicionado')
        self.desconto_incondicionado = attributes[:'desconto_incondicionado']
      end

      if attributes.key?(:'desconto_condicionado')
        self.desconto_condicionado = attributes[:'desconto_condicionado']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      if @valor_unitario.nil?
        invalid_properties.push('invalid value for "valor_unitario", valor_unitario cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      return false if @valor_unitario.nil?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          valor_unitario == o.valor_unitario &&
          valor_servicos == o.valor_servicos &&
          valor_deducoes == o.valor_deducoes &&
          valor_pis == o.valor_pis &&
          valor_cofins == o.valor_cofins &&
          valor_inss == o.valor_inss &&
          valor_ir == o.valor_ir &&
          valor_csll == o.valor_csll &&
          valor_outras_retencoes == o.valor_outras_retencoes &&
          valor_iss == o.valor_iss &&
          valor_iss_retido == o.valor_iss_retido &&
          valor_liquido == o.valor_liquido &&
          aliquota_iss == o.aliquota_iss &&
          aliquota_pis == o.aliquota_pis &&
          aliquota_cofins == o.aliquota_cofins &&
          aliquota_inss == o.aliquota_inss &&
          aliquota_ir == o.aliquota_ir &&
          aliquota_csll == o.aliquota_csll &&
          desconto_incondicionado == o.desconto_incondicionado &&
          desconto_condicionado == o.desconto_condicionado
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [valor_unitario, valor_servicos, valor_deducoes, valor_pis, valor_cofins, valor_inss, valor_ir, valor_csll, valor_outras_retencoes, valor_iss, valor_iss_retido, valor_liquido, aliquota_iss, aliquota_pis, aliquota_cofins, aliquota_inss, aliquota_ir, aliquota_csll, desconto_incondicionado, desconto_condicionado].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = NuvemfiscalSdkRuby.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
