=begin
#API Nuvem Fiscal

#API para automação comercial e documentos fiscais.

The version of the OpenAPI document: 2.44.0

Generated by: https://openapi-generator.tech
Generator version: 7.10.0

=end

require 'date'
require 'time'

module NuvemfiscalSdkRuby
  # Informações do Pagamento do Frete.
  class MdfeSefazInfPag
    # Razão social ou Nome do respnsável pelo pagamento.
    attr_accessor :x_nome

    # Número do CPF do responsável pelo pgto.  Informar os zeros não significativos.
    attr_accessor :cpf

    # Número do CNPJ do responsável pelo pgto.  Informar os zeros não significativos.
    attr_accessor :cnpj

    # Identificador do responsável pelo pgto em caso de ser estrangeiro.
    attr_accessor :id_estrangeiro

    attr_accessor :comp

    # Valor Total do Contrato.
    attr_accessor :v_contrato

    # Indicador de operação de transporte de alto desempenho.  Operação de transporte com utilização de veículos de frotas dedicadas ou fidelizadas.  Preencher com “1” para indicar operação de transporte de alto desempenho, demais casos não informar a tag.
    attr_accessor :ind_alto_desemp

    # Indicador da Forma de Pagamento:0-Pagamento à Vista  * 1 - Pagamento à Prazo
    attr_accessor :ind_pag

    # Valor do Adiantamento (usar apenas em pagamento à Prazo.
    attr_accessor :v_adiant

    # Indicador para declarar concordância em antecipar o adiantamento.  Informar a tag somente se for autorizado antecipar o adiantamento.
    attr_accessor :ind_antecipa_adiant

    attr_accessor :inf_prazo

    # Tipo de Permissão em relação a antecipação das parcelas.  * 0 - Não permite antecipar  * 1 - Permite antecipar as parcelas  * 2 - Permite antecipar as parcelas mediante confirmação
    attr_accessor :tp_antecip

    attr_accessor :inf_banc

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'x_nome' => :'xNome',
        :'cpf' => :'CPF',
        :'cnpj' => :'CNPJ',
        :'id_estrangeiro' => :'idEstrangeiro',
        :'comp' => :'Comp',
        :'v_contrato' => :'vContrato',
        :'ind_alto_desemp' => :'indAltoDesemp',
        :'ind_pag' => :'indPag',
        :'v_adiant' => :'vAdiant',
        :'ind_antecipa_adiant' => :'indAntecipaAdiant',
        :'inf_prazo' => :'infPrazo',
        :'tp_antecip' => :'tpAntecip',
        :'inf_banc' => :'infBanc'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'x_nome' => :'String',
        :'cpf' => :'String',
        :'cnpj' => :'String',
        :'id_estrangeiro' => :'String',
        :'comp' => :'Array<MdfeSefazComp>',
        :'v_contrato' => :'Float',
        :'ind_alto_desemp' => :'Integer',
        :'ind_pag' => :'Integer',
        :'v_adiant' => :'Float',
        :'ind_antecipa_adiant' => :'Integer',
        :'inf_prazo' => :'Array<MdfeSefazInfPrazo>',
        :'tp_antecip' => :'Integer',
        :'inf_banc' => :'MdfeSefazInfBanc'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'x_nome',
        :'cpf',
        :'cnpj',
        :'id_estrangeiro',
        :'v_contrato',
        :'ind_alto_desemp',
        :'ind_pag',
        :'v_adiant',
        :'ind_antecipa_adiant',
        :'tp_antecip',
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `NuvemfiscalSdkRuby::MdfeSefazInfPag` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `NuvemfiscalSdkRuby::MdfeSefazInfPag`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'x_nome')
        self.x_nome = attributes[:'x_nome']
      end

      if attributes.key?(:'cpf')
        self.cpf = attributes[:'cpf']
      end

      if attributes.key?(:'cnpj')
        self.cnpj = attributes[:'cnpj']
      end

      if attributes.key?(:'id_estrangeiro')
        self.id_estrangeiro = attributes[:'id_estrangeiro']
      end

      if attributes.key?(:'comp')
        if (value = attributes[:'comp']).is_a?(Array)
          self.comp = value
        end
      else
        self.comp = nil
      end

      if attributes.key?(:'v_contrato')
        self.v_contrato = attributes[:'v_contrato']
      else
        self.v_contrato = nil
      end

      if attributes.key?(:'ind_alto_desemp')
        self.ind_alto_desemp = attributes[:'ind_alto_desemp']
      end

      if attributes.key?(:'ind_pag')
        self.ind_pag = attributes[:'ind_pag']
      else
        self.ind_pag = nil
      end

      if attributes.key?(:'v_adiant')
        self.v_adiant = attributes[:'v_adiant']
      end

      if attributes.key?(:'ind_antecipa_adiant')
        self.ind_antecipa_adiant = attributes[:'ind_antecipa_adiant']
      end

      if attributes.key?(:'inf_prazo')
        if (value = attributes[:'inf_prazo']).is_a?(Array)
          self.inf_prazo = value
        end
      end

      if attributes.key?(:'tp_antecip')
        self.tp_antecip = attributes[:'tp_antecip']
      end

      if attributes.key?(:'inf_banc')
        self.inf_banc = attributes[:'inf_banc']
      else
        self.inf_banc = nil
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      if !@x_nome.nil? && @x_nome.to_s.length > 60
        invalid_properties.push('invalid value for "x_nome", the character length must be smaller than or equal to 60.')
      end

      if !@x_nome.nil? && @x_nome.to_s.length < 2
        invalid_properties.push('invalid value for "x_nome", the character length must be great than or equal to 2.')
      end

      if !@id_estrangeiro.nil? && @id_estrangeiro.to_s.length > 20
        invalid_properties.push('invalid value for "id_estrangeiro", the character length must be smaller than or equal to 20.')
      end

      if !@id_estrangeiro.nil? && @id_estrangeiro.to_s.length < 2
        invalid_properties.push('invalid value for "id_estrangeiro", the character length must be great than or equal to 2.')
      end

      if @comp.nil?
        invalid_properties.push('invalid value for "comp", comp cannot be nil.')
      end

      if @comp.length < 1
        invalid_properties.push('invalid value for "comp", number of items must be greater than or equal to 1.')
      end

      if @v_contrato < 0
        invalid_properties.push('invalid value for "v_contrato", must be greater than or equal to 0.')
      end

      if !@v_adiant.nil? && @v_adiant < 0
        invalid_properties.push('invalid value for "v_adiant", must be greater than or equal to 0.')
      end

      if @inf_banc.nil?
        invalid_properties.push('invalid value for "inf_banc", inf_banc cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      return false if !@x_nome.nil? && @x_nome.to_s.length > 60
      return false if !@x_nome.nil? && @x_nome.to_s.length < 2
      return false if !@id_estrangeiro.nil? && @id_estrangeiro.to_s.length > 20
      return false if !@id_estrangeiro.nil? && @id_estrangeiro.to_s.length < 2
      return false if @comp.nil?
      return false if @comp.length < 1
      return false if @v_contrato < 0
      return false if !@v_adiant.nil? && @v_adiant < 0
      return false if @inf_banc.nil?
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] x_nome Value to be assigned
    def x_nome=(x_nome)
      if !x_nome.nil? && x_nome.to_s.length > 60
        fail ArgumentError, 'invalid value for "x_nome", the character length must be smaller than or equal to 60.'
      end

      if !x_nome.nil? && x_nome.to_s.length < 2
        fail ArgumentError, 'invalid value for "x_nome", the character length must be great than or equal to 2.'
      end

      @x_nome = x_nome
    end

    # Custom attribute writer method with validation
    # @param [Object] id_estrangeiro Value to be assigned
    def id_estrangeiro=(id_estrangeiro)
      if !id_estrangeiro.nil? && id_estrangeiro.to_s.length > 20
        fail ArgumentError, 'invalid value for "id_estrangeiro", the character length must be smaller than or equal to 20.'
      end

      if !id_estrangeiro.nil? && id_estrangeiro.to_s.length < 2
        fail ArgumentError, 'invalid value for "id_estrangeiro", the character length must be great than or equal to 2.'
      end

      @id_estrangeiro = id_estrangeiro
    end

    # Custom attribute writer method with validation
    # @param [Object] comp Value to be assigned
    def comp=(comp)
      if comp.nil?
        fail ArgumentError, 'comp cannot be nil'
      end

      if comp.length < 1
        fail ArgumentError, 'invalid value for "comp", number of items must be greater than or equal to 1.'
      end

      @comp = comp
    end

    # Custom attribute writer method with validation
    # @param [Object] v_contrato Value to be assigned
    def v_contrato=(v_contrato)
      if !v_contrato.nil? && v_contrato < 0
        fail ArgumentError, 'invalid value for "v_contrato", must be greater than or equal to 0.'
      end

      @v_contrato = v_contrato
    end

    # Custom attribute writer method with validation
    # @param [Object] v_adiant Value to be assigned
    def v_adiant=(v_adiant)
      if !v_adiant.nil? && v_adiant < 0
        fail ArgumentError, 'invalid value for "v_adiant", must be greater than or equal to 0.'
      end

      @v_adiant = v_adiant
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          x_nome == o.x_nome &&
          cpf == o.cpf &&
          cnpj == o.cnpj &&
          id_estrangeiro == o.id_estrangeiro &&
          comp == o.comp &&
          v_contrato == o.v_contrato &&
          ind_alto_desemp == o.ind_alto_desemp &&
          ind_pag == o.ind_pag &&
          v_adiant == o.v_adiant &&
          ind_antecipa_adiant == o.ind_antecipa_adiant &&
          inf_prazo == o.inf_prazo &&
          tp_antecip == o.tp_antecip &&
          inf_banc == o.inf_banc
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [x_nome, cpf, cnpj, id_estrangeiro, comp, v_contrato, ind_alto_desemp, ind_pag, v_adiant, ind_antecipa_adiant, inf_prazo, tp_antecip, inf_banc].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = NuvemfiscalSdkRuby.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
