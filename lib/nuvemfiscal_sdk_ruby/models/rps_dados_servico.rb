=begin
#API Nuvem Fiscal

#API para automação comercial e documentos fiscais.

The version of the OpenAPI document: 2.44.0

Generated by: https://openapi-generator.tech
Generator version: 7.10.0

=end

require 'date'
require 'time'

module NuvemfiscalSdkRuby
  class RpsDadosServico
    # Reter ISSQN.
    attr_accessor :iss_retido

    # Responsável pela retenção:  * 0 - Prestador;  * 1 - Tomador;  * 2 - Intermediário.
    attr_accessor :responsavel_retencao

    # Código do item da lista de serviço, geralmente segue a LC116, podendo variar de acordo com a prefeitura.    Você pode encontrar esse dado no portal da prefeitura, em uma nota emitida ou junto ao contador.
    attr_accessor :item_lista_servico

    # Código CNAE (Classificação Nacional de Atividades Econômicas).
    attr_accessor :codigo_cnae

    # Código de tributação do município.
    attr_accessor :codigo_tributacao_municipio

    # Detalhamento do serviço prestado.
    attr_accessor :discriminacao

    # Código IBGE do município de prestação do serviço.  Caso não informado, será considerado o município do prestador.
    attr_accessor :codigo_municipio

    # Código do país de prestação do serviço.
    attr_accessor :codigo_pais

    # Tipo de Tributação do Serviço:  * 1 - Isento de ISS  * 2 - Imune  * 3 - Não Incidência no Município  * 4 - Não Tributável  * 5 - Retido  * 6 - Tributável Dentro do Município  * 7 - Tributável Fora do Município  * 8 - Tributável Dentro do Município pelo tomador
    attr_accessor :tipo_tributacao

    # Exigibilidade do ISS:  * 1 - Exigível  * 2 - Não Incidência  * 3 - Isenção  * 4 - Exportação  * 5 - Imunidade  * 6 - Suspenso por Decisão Judicial  * 7 - Suspenso por Processo Administrativo
    attr_accessor :exigibilidade_iss

    # Código IBGE do município de incidência do ISSQN.
    attr_accessor :codigo_municipio_incidencia

    # Número do Processo de Suspensão da Exigibilidade.
    attr_accessor :numero_processo

    # Unidade do serviço prestado.
    attr_accessor :unidade

    # Quantidade dos serviços prestados.
    attr_accessor :quantidade

    attr_accessor :valores

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'iss_retido' => :'iss_retido',
        :'responsavel_retencao' => :'responsavel_retencao',
        :'item_lista_servico' => :'item_lista_servico',
        :'codigo_cnae' => :'codigo_cnae',
        :'codigo_tributacao_municipio' => :'codigo_tributacao_municipio',
        :'discriminacao' => :'discriminacao',
        :'codigo_municipio' => :'codigo_municipio',
        :'codigo_pais' => :'codigo_pais',
        :'tipo_tributacao' => :'tipo_tributacao',
        :'exigibilidade_iss' => :'exigibilidade_iss',
        :'codigo_municipio_incidencia' => :'codigo_municipio_incidencia',
        :'numero_processo' => :'numero_processo',
        :'unidade' => :'unidade',
        :'quantidade' => :'quantidade',
        :'valores' => :'valores'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'iss_retido' => :'Boolean',
        :'responsavel_retencao' => :'Integer',
        :'item_lista_servico' => :'String',
        :'codigo_cnae' => :'String',
        :'codigo_tributacao_municipio' => :'String',
        :'discriminacao' => :'String',
        :'codigo_municipio' => :'String',
        :'codigo_pais' => :'String',
        :'tipo_tributacao' => :'Integer',
        :'exigibilidade_iss' => :'Integer',
        :'codigo_municipio_incidencia' => :'String',
        :'numero_processo' => :'String',
        :'unidade' => :'String',
        :'quantidade' => :'Float',
        :'valores' => :'RpsServicoValores'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `NuvemfiscalSdkRuby::RpsDadosServico` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `NuvemfiscalSdkRuby::RpsDadosServico`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'iss_retido')
        self.iss_retido = attributes[:'iss_retido']
      else
        self.iss_retido = false
      end

      if attributes.key?(:'responsavel_retencao')
        self.responsavel_retencao = attributes[:'responsavel_retencao']
      end

      if attributes.key?(:'item_lista_servico')
        self.item_lista_servico = attributes[:'item_lista_servico']
      else
        self.item_lista_servico = nil
      end

      if attributes.key?(:'codigo_cnae')
        self.codigo_cnae = attributes[:'codigo_cnae']
      end

      if attributes.key?(:'codigo_tributacao_municipio')
        self.codigo_tributacao_municipio = attributes[:'codigo_tributacao_municipio']
      end

      if attributes.key?(:'discriminacao')
        self.discriminacao = attributes[:'discriminacao']
      else
        self.discriminacao = nil
      end

      if attributes.key?(:'codigo_municipio')
        self.codigo_municipio = attributes[:'codigo_municipio']
      end

      if attributes.key?(:'codigo_pais')
        self.codigo_pais = attributes[:'codigo_pais']
      end

      if attributes.key?(:'tipo_tributacao')
        self.tipo_tributacao = attributes[:'tipo_tributacao']
      end

      if attributes.key?(:'exigibilidade_iss')
        self.exigibilidade_iss = attributes[:'exigibilidade_iss']
      end

      if attributes.key?(:'codigo_municipio_incidencia')
        self.codigo_municipio_incidencia = attributes[:'codigo_municipio_incidencia']
      end

      if attributes.key?(:'numero_processo')
        self.numero_processo = attributes[:'numero_processo']
      end

      if attributes.key?(:'unidade')
        self.unidade = attributes[:'unidade']
      end

      if attributes.key?(:'quantidade')
        self.quantidade = attributes[:'quantidade']
      end

      if attributes.key?(:'valores')
        self.valores = attributes[:'valores']
      else
        self.valores = nil
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      if @item_lista_servico.nil?
        invalid_properties.push('invalid value for "item_lista_servico", item_lista_servico cannot be nil.')
      end

      if @discriminacao.nil?
        invalid_properties.push('invalid value for "discriminacao", discriminacao cannot be nil.')
      end

      if !@quantidade.nil? && @quantidade <= 0
        invalid_properties.push('invalid value for "quantidade", must be greater than 0.')
      end

      if @valores.nil?
        invalid_properties.push('invalid value for "valores", valores cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      return false if @item_lista_servico.nil?
      return false if @discriminacao.nil?
      return false if !@quantidade.nil? && @quantidade <= 0
      return false if @valores.nil?
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] quantidade Value to be assigned
    def quantidade=(quantidade)
      if quantidade.nil?
        fail ArgumentError, 'quantidade cannot be nil'
      end

      if quantidade <= 0
        fail ArgumentError, 'invalid value for "quantidade", must be greater than 0.'
      end

      @quantidade = quantidade
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          iss_retido == o.iss_retido &&
          responsavel_retencao == o.responsavel_retencao &&
          item_lista_servico == o.item_lista_servico &&
          codigo_cnae == o.codigo_cnae &&
          codigo_tributacao_municipio == o.codigo_tributacao_municipio &&
          discriminacao == o.discriminacao &&
          codigo_municipio == o.codigo_municipio &&
          codigo_pais == o.codigo_pais &&
          tipo_tributacao == o.tipo_tributacao &&
          exigibilidade_iss == o.exigibilidade_iss &&
          codigo_municipio_incidencia == o.codigo_municipio_incidencia &&
          numero_processo == o.numero_processo &&
          unidade == o.unidade &&
          quantidade == o.quantidade &&
          valores == o.valores
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [iss_retido, responsavel_retencao, item_lista_servico, codigo_cnae, codigo_tributacao_municipio, discriminacao, codigo_municipio, codigo_pais, tipo_tributacao, exigibilidade_iss, codigo_municipio_incidencia, numero_processo, unidade, quantidade, valores].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = NuvemfiscalSdkRuby.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
