=begin
#API Nuvem Fiscal

#API para automação comercial e documentos fiscais.

The version of the OpenAPI document: 2.44.0

Generated by: https://openapi-generator.tech
Generator version: 7.10.0

=end

require 'date'
require 'time'

module NuvemfiscalSdkRuby
  # Totais referentes ao ISSQN.
  class NfeSefazISSQNtot
    # Valor Total dos Serviços sob não-incidência ou não tributados pelo ICMS.
    attr_accessor :v_serv

    # Base de Cálculo do ISS.
    attr_accessor :v_bc

    # Valor Total do ISS.
    attr_accessor :v_iss

    # Valor do PIS sobre serviços.
    attr_accessor :v_pis

    # Valor do COFINS sobre serviços.
    attr_accessor :v_cofins

    # Data da prestação do serviço  (AAAA-MM-DD).
    attr_accessor :d_compet

    # Valor dedução para redução da base de cálculo.
    attr_accessor :v_deducao

    # Valor outras retenções.
    attr_accessor :v_outro

    # Valor desconto incondicionado.
    attr_accessor :v_desc_incond

    # Valor desconto condicionado.
    attr_accessor :v_desc_cond

    # Valor Total Retenção ISS.
    attr_accessor :v_iss_ret

    # Código do regime especial de tributação.
    attr_accessor :c_reg_trib

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'v_serv' => :'vServ',
        :'v_bc' => :'vBC',
        :'v_iss' => :'vISS',
        :'v_pis' => :'vPIS',
        :'v_cofins' => :'vCOFINS',
        :'d_compet' => :'dCompet',
        :'v_deducao' => :'vDeducao',
        :'v_outro' => :'vOutro',
        :'v_desc_incond' => :'vDescIncond',
        :'v_desc_cond' => :'vDescCond',
        :'v_iss_ret' => :'vISSRet',
        :'c_reg_trib' => :'cRegTrib'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'v_serv' => :'Float',
        :'v_bc' => :'Float',
        :'v_iss' => :'Float',
        :'v_pis' => :'Float',
        :'v_cofins' => :'Float',
        :'d_compet' => :'Date',
        :'v_deducao' => :'Float',
        :'v_outro' => :'Float',
        :'v_desc_incond' => :'Float',
        :'v_desc_cond' => :'Float',
        :'v_iss_ret' => :'Float',
        :'c_reg_trib' => :'Integer'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'v_serv',
        :'v_bc',
        :'v_iss',
        :'v_pis',
        :'v_cofins',
        :'d_compet',
        :'v_deducao',
        :'v_outro',
        :'v_desc_incond',
        :'v_desc_cond',
        :'v_iss_ret',
        :'c_reg_trib'
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `NuvemfiscalSdkRuby::NfeSefazISSQNtot` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `NuvemfiscalSdkRuby::NfeSefazISSQNtot`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'v_serv')
        self.v_serv = attributes[:'v_serv']
      end

      if attributes.key?(:'v_bc')
        self.v_bc = attributes[:'v_bc']
      end

      if attributes.key?(:'v_iss')
        self.v_iss = attributes[:'v_iss']
      end

      if attributes.key?(:'v_pis')
        self.v_pis = attributes[:'v_pis']
      end

      if attributes.key?(:'v_cofins')
        self.v_cofins = attributes[:'v_cofins']
      end

      if attributes.key?(:'d_compet')
        self.d_compet = attributes[:'d_compet']
      else
        self.d_compet = nil
      end

      if attributes.key?(:'v_deducao')
        self.v_deducao = attributes[:'v_deducao']
      end

      if attributes.key?(:'v_outro')
        self.v_outro = attributes[:'v_outro']
      end

      if attributes.key?(:'v_desc_incond')
        self.v_desc_incond = attributes[:'v_desc_incond']
      end

      if attributes.key?(:'v_desc_cond')
        self.v_desc_cond = attributes[:'v_desc_cond']
      end

      if attributes.key?(:'v_iss_ret')
        self.v_iss_ret = attributes[:'v_iss_ret']
      end

      if attributes.key?(:'c_reg_trib')
        self.c_reg_trib = attributes[:'c_reg_trib']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      if !@v_serv.nil? && @v_serv <= 0
        invalid_properties.push('invalid value for "v_serv", must be greater than 0.')
      end

      if !@v_bc.nil? && @v_bc <= 0
        invalid_properties.push('invalid value for "v_bc", must be greater than 0.')
      end

      if !@v_iss.nil? && @v_iss <= 0
        invalid_properties.push('invalid value for "v_iss", must be greater than 0.')
      end

      if !@v_pis.nil? && @v_pis <= 0
        invalid_properties.push('invalid value for "v_pis", must be greater than 0.')
      end

      if !@v_cofins.nil? && @v_cofins <= 0
        invalid_properties.push('invalid value for "v_cofins", must be greater than 0.')
      end

      if !@v_deducao.nil? && @v_deducao <= 0
        invalid_properties.push('invalid value for "v_deducao", must be greater than 0.')
      end

      if !@v_outro.nil? && @v_outro <= 0
        invalid_properties.push('invalid value for "v_outro", must be greater than 0.')
      end

      if !@v_desc_incond.nil? && @v_desc_incond <= 0
        invalid_properties.push('invalid value for "v_desc_incond", must be greater than 0.')
      end

      if !@v_desc_cond.nil? && @v_desc_cond <= 0
        invalid_properties.push('invalid value for "v_desc_cond", must be greater than 0.')
      end

      if !@v_iss_ret.nil? && @v_iss_ret <= 0
        invalid_properties.push('invalid value for "v_iss_ret", must be greater than 0.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      return false if !@v_serv.nil? && @v_serv <= 0
      return false if !@v_bc.nil? && @v_bc <= 0
      return false if !@v_iss.nil? && @v_iss <= 0
      return false if !@v_pis.nil? && @v_pis <= 0
      return false if !@v_cofins.nil? && @v_cofins <= 0
      return false if !@v_deducao.nil? && @v_deducao <= 0
      return false if !@v_outro.nil? && @v_outro <= 0
      return false if !@v_desc_incond.nil? && @v_desc_incond <= 0
      return false if !@v_desc_cond.nil? && @v_desc_cond <= 0
      return false if !@v_iss_ret.nil? && @v_iss_ret <= 0
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] v_serv Value to be assigned
    def v_serv=(v_serv)
      if !v_serv.nil? && v_serv <= 0
        fail ArgumentError, 'invalid value for "v_serv", must be greater than 0.'
      end

      @v_serv = v_serv
    end

    # Custom attribute writer method with validation
    # @param [Object] v_bc Value to be assigned
    def v_bc=(v_bc)
      if !v_bc.nil? && v_bc <= 0
        fail ArgumentError, 'invalid value for "v_bc", must be greater than 0.'
      end

      @v_bc = v_bc
    end

    # Custom attribute writer method with validation
    # @param [Object] v_iss Value to be assigned
    def v_iss=(v_iss)
      if !v_iss.nil? && v_iss <= 0
        fail ArgumentError, 'invalid value for "v_iss", must be greater than 0.'
      end

      @v_iss = v_iss
    end

    # Custom attribute writer method with validation
    # @param [Object] v_pis Value to be assigned
    def v_pis=(v_pis)
      if !v_pis.nil? && v_pis <= 0
        fail ArgumentError, 'invalid value for "v_pis", must be greater than 0.'
      end

      @v_pis = v_pis
    end

    # Custom attribute writer method with validation
    # @param [Object] v_cofins Value to be assigned
    def v_cofins=(v_cofins)
      if !v_cofins.nil? && v_cofins <= 0
        fail ArgumentError, 'invalid value for "v_cofins", must be greater than 0.'
      end

      @v_cofins = v_cofins
    end

    # Custom attribute writer method with validation
    # @param [Object] v_deducao Value to be assigned
    def v_deducao=(v_deducao)
      if !v_deducao.nil? && v_deducao <= 0
        fail ArgumentError, 'invalid value for "v_deducao", must be greater than 0.'
      end

      @v_deducao = v_deducao
    end

    # Custom attribute writer method with validation
    # @param [Object] v_outro Value to be assigned
    def v_outro=(v_outro)
      if !v_outro.nil? && v_outro <= 0
        fail ArgumentError, 'invalid value for "v_outro", must be greater than 0.'
      end

      @v_outro = v_outro
    end

    # Custom attribute writer method with validation
    # @param [Object] v_desc_incond Value to be assigned
    def v_desc_incond=(v_desc_incond)
      if !v_desc_incond.nil? && v_desc_incond <= 0
        fail ArgumentError, 'invalid value for "v_desc_incond", must be greater than 0.'
      end

      @v_desc_incond = v_desc_incond
    end

    # Custom attribute writer method with validation
    # @param [Object] v_desc_cond Value to be assigned
    def v_desc_cond=(v_desc_cond)
      if !v_desc_cond.nil? && v_desc_cond <= 0
        fail ArgumentError, 'invalid value for "v_desc_cond", must be greater than 0.'
      end

      @v_desc_cond = v_desc_cond
    end

    # Custom attribute writer method with validation
    # @param [Object] v_iss_ret Value to be assigned
    def v_iss_ret=(v_iss_ret)
      if !v_iss_ret.nil? && v_iss_ret <= 0
        fail ArgumentError, 'invalid value for "v_iss_ret", must be greater than 0.'
      end

      @v_iss_ret = v_iss_ret
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          v_serv == o.v_serv &&
          v_bc == o.v_bc &&
          v_iss == o.v_iss &&
          v_pis == o.v_pis &&
          v_cofins == o.v_cofins &&
          d_compet == o.d_compet &&
          v_deducao == o.v_deducao &&
          v_outro == o.v_outro &&
          v_desc_incond == o.v_desc_incond &&
          v_desc_cond == o.v_desc_cond &&
          v_iss_ret == o.v_iss_ret &&
          c_reg_trib == o.c_reg_trib
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [v_serv, v_bc, v_iss, v_pis, v_cofins, d_compet, v_deducao, v_outro, v_desc_incond, v_desc_cond, v_iss_ret, c_reg_trib].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = NuvemfiscalSdkRuby.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
