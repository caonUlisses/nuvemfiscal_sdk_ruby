=begin
#API Nuvem Fiscal

#API para automação comercial e documentos fiscais.

The version of the OpenAPI document: 2.44.0

Generated by: https://openapi-generator.tech
Generator version: 7.10.0

=end

require 'date'
require 'time'

module NuvemfiscalSdkRuby
  # Delcaração de Importação  (NT 2011/004).
  class NfeSefazDI
    # Número do Documento de Importação (DI, DSI, DIRE, DUImp) (NT2011/004).
    attr_accessor :n_di

    # Data de registro da DI/DSI/DA (AAAA-MM-DD).
    attr_accessor :d_di

    # Local do desembaraço aduaneiro.
    attr_accessor :x_loc_desemb

    # UF onde ocorreu o desembaraço aduaneiro.
    attr_accessor :uf_desemb

    # Data do desembaraço aduaneiro (AAAA-MM-DD).
    attr_accessor :d_desemb

    # Via de transporte internacional informada na DI ou na Declaração Única de Importação (DUImp):  * 1 - Maritima  * 2 - Fluvial  * 3 - Lacustre  * 4 - Aerea  * 5 - Postal  * 6 - Ferroviaria  * 7 - Rodoviaria  * 8 - Conduto  * 9 - Meios Proprios  * 10 - Entrada/Saida Ficta  * 11 - Courier  * 12 - Em maos  * 13 - Por reboque
    attr_accessor :tp_via_transp

    # Valor Adicional ao frete para renovação de marinha mercante.
    attr_accessor :v_afrmm

    # Forma de Importação quanto a intermediação  * 1 - por conta propria  * 2 - por conta e ordem  * 3 - encomenda
    attr_accessor :tp_intermedio

    # CNPJ do adquirente ou do encomendante.
    attr_accessor :cnpj

    # CPF do adquirente ou do encomendante.
    attr_accessor :cpf

    # Sigla da UF do adquirente ou do encomendante.
    attr_accessor :uf_terceiro

    # Código do exportador (usado nos sistemas internos de informação do emitente da NF-e).
    attr_accessor :c_exportador

    attr_accessor :adi

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'n_di' => :'nDI',
        :'d_di' => :'dDI',
        :'x_loc_desemb' => :'xLocDesemb',
        :'uf_desemb' => :'UFDesemb',
        :'d_desemb' => :'dDesemb',
        :'tp_via_transp' => :'tpViaTransp',
        :'v_afrmm' => :'vAFRMM',
        :'tp_intermedio' => :'tpIntermedio',
        :'cnpj' => :'CNPJ',
        :'cpf' => :'CPF',
        :'uf_terceiro' => :'UFTerceiro',
        :'c_exportador' => :'cExportador',
        :'adi' => :'adi'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'n_di' => :'String',
        :'d_di' => :'Date',
        :'x_loc_desemb' => :'String',
        :'uf_desemb' => :'String',
        :'d_desemb' => :'Date',
        :'tp_via_transp' => :'Integer',
        :'v_afrmm' => :'Float',
        :'tp_intermedio' => :'Integer',
        :'cnpj' => :'String',
        :'cpf' => :'String',
        :'uf_terceiro' => :'String',
        :'c_exportador' => :'String',
        :'adi' => :'Array<NfeSefazAdi>'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'n_di',
        :'d_di',
        :'x_loc_desemb',
        :'uf_desemb',
        :'d_desemb',
        :'tp_via_transp',
        :'v_afrmm',
        :'tp_intermedio',
        :'cnpj',
        :'cpf',
        :'uf_terceiro',
        :'c_exportador',
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `NuvemfiscalSdkRuby::NfeSefazDI` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `NuvemfiscalSdkRuby::NfeSefazDI`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'n_di')
        self.n_di = attributes[:'n_di']
      else
        self.n_di = nil
      end

      if attributes.key?(:'d_di')
        self.d_di = attributes[:'d_di']
      else
        self.d_di = nil
      end

      if attributes.key?(:'x_loc_desemb')
        self.x_loc_desemb = attributes[:'x_loc_desemb']
      else
        self.x_loc_desemb = nil
      end

      if attributes.key?(:'uf_desemb')
        self.uf_desemb = attributes[:'uf_desemb']
      else
        self.uf_desemb = nil
      end

      if attributes.key?(:'d_desemb')
        self.d_desemb = attributes[:'d_desemb']
      else
        self.d_desemb = nil
      end

      if attributes.key?(:'tp_via_transp')
        self.tp_via_transp = attributes[:'tp_via_transp']
      else
        self.tp_via_transp = nil
      end

      if attributes.key?(:'v_afrmm')
        self.v_afrmm = attributes[:'v_afrmm']
      end

      if attributes.key?(:'tp_intermedio')
        self.tp_intermedio = attributes[:'tp_intermedio']
      else
        self.tp_intermedio = nil
      end

      if attributes.key?(:'cnpj')
        self.cnpj = attributes[:'cnpj']
      end

      if attributes.key?(:'cpf')
        self.cpf = attributes[:'cpf']
      end

      if attributes.key?(:'uf_terceiro')
        self.uf_terceiro = attributes[:'uf_terceiro']
      end

      if attributes.key?(:'c_exportador')
        self.c_exportador = attributes[:'c_exportador']
      else
        self.c_exportador = nil
      end

      if attributes.key?(:'adi')
        if (value = attributes[:'adi']).is_a?(Array)
          self.adi = value
        end
      else
        self.adi = nil
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      if @n_di.to_s.length > 15
        invalid_properties.push('invalid value for "n_di", the character length must be smaller than or equal to 15.')
      end

      if @n_di.to_s.length < 1
        invalid_properties.push('invalid value for "n_di", the character length must be great than or equal to 1.')
      end

      if @x_loc_desemb.to_s.length > 60
        invalid_properties.push('invalid value for "x_loc_desemb", the character length must be smaller than or equal to 60.')
      end

      if @x_loc_desemb.to_s.length < 1
        invalid_properties.push('invalid value for "x_loc_desemb", the character length must be great than or equal to 1.')
      end

      if !@v_afrmm.nil? && @v_afrmm < 0
        invalid_properties.push('invalid value for "v_afrmm", must be greater than or equal to 0.')
      end

      if !@cnpj.nil? && @cnpj.to_s.length > 14
        invalid_properties.push('invalid value for "cnpj", the character length must be smaller than or equal to 14.')
      end

      if !@cpf.nil? && @cpf.to_s.length > 11
        invalid_properties.push('invalid value for "cpf", the character length must be smaller than or equal to 11.')
      end

      if @c_exportador.to_s.length > 60
        invalid_properties.push('invalid value for "c_exportador", the character length must be smaller than or equal to 60.')
      end

      if @c_exportador.to_s.length < 1
        invalid_properties.push('invalid value for "c_exportador", the character length must be great than or equal to 1.')
      end

      if @adi.nil?
        invalid_properties.push('invalid value for "adi", adi cannot be nil.')
      end

      if @adi.length > 999
        invalid_properties.push('invalid value for "adi", number of items must be less than or equal to 999.')
      end

      if @adi.length < 1
        invalid_properties.push('invalid value for "adi", number of items must be greater than or equal to 1.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      return false if @n_di.to_s.length > 15
      return false if @n_di.to_s.length < 1
      return false if @x_loc_desemb.to_s.length > 60
      return false if @x_loc_desemb.to_s.length < 1
      return false if !@v_afrmm.nil? && @v_afrmm < 0
      return false if !@cnpj.nil? && @cnpj.to_s.length > 14
      return false if !@cpf.nil? && @cpf.to_s.length > 11
      return false if @c_exportador.to_s.length > 60
      return false if @c_exportador.to_s.length < 1
      return false if @adi.nil?
      return false if @adi.length > 999
      return false if @adi.length < 1
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] n_di Value to be assigned
    def n_di=(n_di)
      if !n_di.nil? && n_di.to_s.length > 15
        fail ArgumentError, 'invalid value for "n_di", the character length must be smaller than or equal to 15.'
      end

      if !n_di.nil? && n_di.to_s.length < 1
        fail ArgumentError, 'invalid value for "n_di", the character length must be great than or equal to 1.'
      end

      @n_di = n_di
    end

    # Custom attribute writer method with validation
    # @param [Object] x_loc_desemb Value to be assigned
    def x_loc_desemb=(x_loc_desemb)
      if !x_loc_desemb.nil? && x_loc_desemb.to_s.length > 60
        fail ArgumentError, 'invalid value for "x_loc_desemb", the character length must be smaller than or equal to 60.'
      end

      if !x_loc_desemb.nil? && x_loc_desemb.to_s.length < 1
        fail ArgumentError, 'invalid value for "x_loc_desemb", the character length must be great than or equal to 1.'
      end

      @x_loc_desemb = x_loc_desemb
    end

    # Custom attribute writer method with validation
    # @param [Object] v_afrmm Value to be assigned
    def v_afrmm=(v_afrmm)
      if !v_afrmm.nil? && v_afrmm < 0
        fail ArgumentError, 'invalid value for "v_afrmm", must be greater than or equal to 0.'
      end

      @v_afrmm = v_afrmm
    end

    # Custom attribute writer method with validation
    # @param [Object] cnpj Value to be assigned
    def cnpj=(cnpj)
      if !cnpj.nil? && cnpj.to_s.length > 14
        fail ArgumentError, 'invalid value for "cnpj", the character length must be smaller than or equal to 14.'
      end

      @cnpj = cnpj
    end

    # Custom attribute writer method with validation
    # @param [Object] cpf Value to be assigned
    def cpf=(cpf)
      if !cpf.nil? && cpf.to_s.length > 11
        fail ArgumentError, 'invalid value for "cpf", the character length must be smaller than or equal to 11.'
      end

      @cpf = cpf
    end

    # Custom attribute writer method with validation
    # @param [Object] c_exportador Value to be assigned
    def c_exportador=(c_exportador)
      if !c_exportador.nil? && c_exportador.to_s.length > 60
        fail ArgumentError, 'invalid value for "c_exportador", the character length must be smaller than or equal to 60.'
      end

      if !c_exportador.nil? && c_exportador.to_s.length < 1
        fail ArgumentError, 'invalid value for "c_exportador", the character length must be great than or equal to 1.'
      end

      @c_exportador = c_exportador
    end

    # Custom attribute writer method with validation
    # @param [Object] adi Value to be assigned
    def adi=(adi)
      if adi.nil?
        fail ArgumentError, 'adi cannot be nil'
      end

      if adi.length > 999
        fail ArgumentError, 'invalid value for "adi", number of items must be less than or equal to 999.'
      end

      if adi.length < 1
        fail ArgumentError, 'invalid value for "adi", number of items must be greater than or equal to 1.'
      end

      @adi = adi
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          n_di == o.n_di &&
          d_di == o.d_di &&
          x_loc_desemb == o.x_loc_desemb &&
          uf_desemb == o.uf_desemb &&
          d_desemb == o.d_desemb &&
          tp_via_transp == o.tp_via_transp &&
          v_afrmm == o.v_afrmm &&
          tp_intermedio == o.tp_intermedio &&
          cnpj == o.cnpj &&
          cpf == o.cpf &&
          uf_terceiro == o.uf_terceiro &&
          c_exportador == o.c_exportador &&
          adi == o.adi
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [n_di, d_di, x_loc_desemb, uf_desemb, d_desemb, tp_via_transp, v_afrmm, tp_intermedio, cnpj, cpf, uf_terceiro, c_exportador, adi].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = NuvemfiscalSdkRuby.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
