=begin
#API Nuvem Fiscal

#API para automação comercial e documentos fiscais.

The version of the OpenAPI document: 2.44.0

Generated by: https://openapi-generator.tech
Generator version: 7.10.0

=end

require 'date'
require 'time'

module NuvemfiscalSdkRuby
  # Quadro Societário.
  class CnpjSocio
    attr_accessor :identificador_socio

    # Nome do sócio pessoa física ou a razão social e/ou nome empresarial da  pessoa jurídica e/ou nome do sócio/razão social do sócio estrangeiro.
    attr_accessor :nome

    # CPF ou CNPJ do sócio (sócio estrangeiro não tem esta informação).
    attr_accessor :cpf_cnpj

    attr_accessor :qualificacao

    # Data de entrada na sociedade.
    attr_accessor :data_entrada_sociedade

    attr_accessor :pais

    attr_accessor :representante_legal

    attr_accessor :faixa_etaria

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'identificador_socio' => :'identificador_socio',
        :'nome' => :'nome',
        :'cpf_cnpj' => :'cpf_cnpj',
        :'qualificacao' => :'qualificacao',
        :'data_entrada_sociedade' => :'data_entrada_sociedade',
        :'pais' => :'pais',
        :'representante_legal' => :'representante_legal',
        :'faixa_etaria' => :'faixa_etaria'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'identificador_socio' => :'CnpjIdentificadorSocio',
        :'nome' => :'String',
        :'cpf_cnpj' => :'String',
        :'qualificacao' => :'CnpjQualificacaoSocio',
        :'data_entrada_sociedade' => :'Date',
        :'pais' => :'CnpjPais',
        :'representante_legal' => :'CnpjRepresentanteLegal',
        :'faixa_etaria' => :'CnpjFaixaEtaria'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `NuvemfiscalSdkRuby::CnpjSocio` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `NuvemfiscalSdkRuby::CnpjSocio`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'identificador_socio')
        self.identificador_socio = attributes[:'identificador_socio']
      end

      if attributes.key?(:'nome')
        self.nome = attributes[:'nome']
      end

      if attributes.key?(:'cpf_cnpj')
        self.cpf_cnpj = attributes[:'cpf_cnpj']
      end

      if attributes.key?(:'qualificacao')
        self.qualificacao = attributes[:'qualificacao']
      end

      if attributes.key?(:'data_entrada_sociedade')
        self.data_entrada_sociedade = attributes[:'data_entrada_sociedade']
      end

      if attributes.key?(:'pais')
        self.pais = attributes[:'pais']
      end

      if attributes.key?(:'representante_legal')
        self.representante_legal = attributes[:'representante_legal']
      end

      if attributes.key?(:'faixa_etaria')
        self.faixa_etaria = attributes[:'faixa_etaria']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          identificador_socio == o.identificador_socio &&
          nome == o.nome &&
          cpf_cnpj == o.cpf_cnpj &&
          qualificacao == o.qualificacao &&
          data_entrada_sociedade == o.data_entrada_sociedade &&
          pais == o.pais &&
          representante_legal == o.representante_legal &&
          faixa_etaria == o.faixa_etaria
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [identificador_socio, nome, cpf_cnpj, qualificacao, data_entrada_sociedade, pais, representante_legal, faixa_etaria].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = NuvemfiscalSdkRuby.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
