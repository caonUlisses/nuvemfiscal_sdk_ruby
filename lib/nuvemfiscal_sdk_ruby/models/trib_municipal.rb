=begin
#API Nuvem Fiscal

#API para automação comercial e documentos fiscais.

The version of the OpenAPI document: 2.44.0

Generated by: https://openapi-generator.tech
Generator version: 7.10.0

=end

require 'date'
require 'time'

module NuvemfiscalSdkRuby
  # Grupo de informações relacionados ao Imposto Sobre Serviços de Qualquer Natureza - ISSQN.
  class TribMunicipal
    # Tributação do ISSQN sobre o serviço prestado:  * 1 - Operação tributável  * 2 - Imunidade  * 3 - Exportação de serviço  * 4 - Não Incidência
    attr_accessor :trib_issqn

    # Código do município de incidência do ISSQN (tabela do IBGE).    Caso o envio seja pelo Sistema Nacional NFS-e, essa propriedade é ignorada e o município de incidência do ISSQN é determinado automaticamente pela SEFIN nacional, conforme regras do aspecto espacial da lei complementar federal (LC 116/03) que são válidas para todos os municípios.
    attr_accessor :c_loc_incid

    # Código do país onde se verficou o resultado da prestação do serviço para o caso de Exportação de Serviço.(Tabela de Países ISO).
    attr_accessor :c_pais_result

    attr_accessor :bm

    attr_accessor :exig_susp

    # Identificação da Imunidade do ISSQN - somente para o caso de Imunidade:  * 0 - Imunidade (tipo não informado na nota de origem)  * 1 - Patrimônio, renda ou serviços, uns dos outros (CF88, Art 150, VI, a)  * 2 - Templos de qualquer culto (CF88, Art 150, VI, b)  * 3 - Patrimônio, renda ou serviços dos partidos políticos, inclusive suas fundações, das entidades sindicais dos trabalhadores, das instituições de educação e de assistência social, sem fins lucrativos, atendidos os requisitos da lei (CF88, Art 150, VI, c)  * 4 - Livros, jornais, periódicos e o papel destinado a sua impressão (CF88, Art 150, VI, d)
    attr_accessor :tp_imunidade

    # Valor da Base de Cálculo do ISSQN (R$).    Caso você não informe esse campo, vamos calculá-lo automaticamente.    **Atenção**: Para emissões pelo Sistema Nacional NFS-e, esse campo é ignorado e o valor é determinado automaticamente pela SEFIN nacional.
    attr_accessor :v_bc

    # Valor da alíquota (%%) do serviço prestado relativo ao município sujeito ativo (município de incidência) do ISSQN.    **Observações**:  * Se o município de incidência pertence ao Sistema Nacional NFS-e a alíquota estará parametrizada e, portanto, será fornecida pelo sistema.  * Se o município de incidência não pertence ao Sistema Nacional NFS-e a alíquota não estará parametrizada e, por isso, deverá ser fornecida pelo emitente.
    attr_accessor :p_aliq

    # Valor do ISSQN (R$).    Caso você não informe esse campo, vamos calculá-lo automaticamente.    **Atenção**: Para emissões pelo Sistema Nacional NFS-e, esse campo é ignorado e o valor é determinado automaticamente pela SEFIN nacional.
    attr_accessor :v_issqn

    # Tipo de retencao do ISSQN:  * 1 - Não Retido  * 2 - Retido pelo Tomador  * 3 - Retido pelo Intermediario
    attr_accessor :tp_ret_issqn

    # Valor Líquido (R$).    Caso você não informe esse campo, vamos calculá-lo automaticamente.    **Atenção**: Para emissões pelo Sistema Nacional NFS-e, esse campo é ignorado e o valor é determinado automaticamente pela SEFIN nacional.
    attr_accessor :v_liq

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'trib_issqn' => :'tribISSQN',
        :'c_loc_incid' => :'cLocIncid',
        :'c_pais_result' => :'cPaisResult',
        :'bm' => :'BM',
        :'exig_susp' => :'exigSusp',
        :'tp_imunidade' => :'tpImunidade',
        :'v_bc' => :'vBC',
        :'p_aliq' => :'pAliq',
        :'v_issqn' => :'vISSQN',
        :'tp_ret_issqn' => :'tpRetISSQN',
        :'v_liq' => :'vLiq'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'trib_issqn' => :'Integer',
        :'c_loc_incid' => :'String',
        :'c_pais_result' => :'String',
        :'bm' => :'BeneficioMunicipal',
        :'exig_susp' => :'ExigSuspensa',
        :'tp_imunidade' => :'Integer',
        :'v_bc' => :'Float',
        :'p_aliq' => :'Float',
        :'v_issqn' => :'Float',
        :'tp_ret_issqn' => :'Integer',
        :'v_liq' => :'Float'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'trib_issqn',
        :'c_loc_incid',
        :'c_pais_result',
        :'tp_imunidade',
        :'v_bc',
        :'p_aliq',
        :'v_issqn',
        :'tp_ret_issqn',
        :'v_liq'
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `NuvemfiscalSdkRuby::TribMunicipal` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `NuvemfiscalSdkRuby::TribMunicipal`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'trib_issqn')
        self.trib_issqn = attributes[:'trib_issqn']
      else
        self.trib_issqn = nil
      end

      if attributes.key?(:'c_loc_incid')
        self.c_loc_incid = attributes[:'c_loc_incid']
      end

      if attributes.key?(:'c_pais_result')
        self.c_pais_result = attributes[:'c_pais_result']
      end

      if attributes.key?(:'bm')
        self.bm = attributes[:'bm']
      end

      if attributes.key?(:'exig_susp')
        self.exig_susp = attributes[:'exig_susp']
      end

      if attributes.key?(:'tp_imunidade')
        self.tp_imunidade = attributes[:'tp_imunidade']
      end

      if attributes.key?(:'v_bc')
        self.v_bc = attributes[:'v_bc']
      end

      if attributes.key?(:'p_aliq')
        self.p_aliq = attributes[:'p_aliq']
      end

      if attributes.key?(:'v_issqn')
        self.v_issqn = attributes[:'v_issqn']
      end

      if attributes.key?(:'tp_ret_issqn')
        self.tp_ret_issqn = attributes[:'tp_ret_issqn']
      end

      if attributes.key?(:'v_liq')
        self.v_liq = attributes[:'v_liq']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      if !@v_bc.nil? && @v_bc < 0
        invalid_properties.push('invalid value for "v_bc", must be greater than or equal to 0.')
      end

      if !@p_aliq.nil? && @p_aliq < 0
        invalid_properties.push('invalid value for "p_aliq", must be greater than or equal to 0.')
      end

      if !@v_issqn.nil? && @v_issqn < 0
        invalid_properties.push('invalid value for "v_issqn", must be greater than or equal to 0.')
      end

      if !@v_liq.nil? && @v_liq < 0
        invalid_properties.push('invalid value for "v_liq", must be greater than or equal to 0.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      return false if !@v_bc.nil? && @v_bc < 0
      return false if !@p_aliq.nil? && @p_aliq < 0
      return false if !@v_issqn.nil? && @v_issqn < 0
      return false if !@v_liq.nil? && @v_liq < 0
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] v_bc Value to be assigned
    def v_bc=(v_bc)
      if !v_bc.nil? && v_bc < 0
        fail ArgumentError, 'invalid value for "v_bc", must be greater than or equal to 0.'
      end

      @v_bc = v_bc
    end

    # Custom attribute writer method with validation
    # @param [Object] p_aliq Value to be assigned
    def p_aliq=(p_aliq)
      if !p_aliq.nil? && p_aliq < 0
        fail ArgumentError, 'invalid value for "p_aliq", must be greater than or equal to 0.'
      end

      @p_aliq = p_aliq
    end

    # Custom attribute writer method with validation
    # @param [Object] v_issqn Value to be assigned
    def v_issqn=(v_issqn)
      if !v_issqn.nil? && v_issqn < 0
        fail ArgumentError, 'invalid value for "v_issqn", must be greater than or equal to 0.'
      end

      @v_issqn = v_issqn
    end

    # Custom attribute writer method with validation
    # @param [Object] v_liq Value to be assigned
    def v_liq=(v_liq)
      if !v_liq.nil? && v_liq < 0
        fail ArgumentError, 'invalid value for "v_liq", must be greater than or equal to 0.'
      end

      @v_liq = v_liq
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          trib_issqn == o.trib_issqn &&
          c_loc_incid == o.c_loc_incid &&
          c_pais_result == o.c_pais_result &&
          bm == o.bm &&
          exig_susp == o.exig_susp &&
          tp_imunidade == o.tp_imunidade &&
          v_bc == o.v_bc &&
          p_aliq == o.p_aliq &&
          v_issqn == o.v_issqn &&
          tp_ret_issqn == o.tp_ret_issqn &&
          v_liq == o.v_liq
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [trib_issqn, c_loc_incid, c_pais_result, bm, exig_susp, tp_imunidade, v_bc, p_aliq, v_issqn, tp_ret_issqn, v_liq].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = NuvemfiscalSdkRuby.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
