=begin
#API Nuvem Fiscal

#API para automação comercial e documentos fiscais.

The version of the OpenAPI document: 2.44.0

Generated by: https://openapi-generator.tech
Generator version: 7.10.0

=end

require 'date'
require 'time'

module NuvemfiscalSdkRuby
  # Informar apenas para operações com combustíveis líquidos.
  class NfeSefazComb
    # Código de produto da ANP. codificação de produtos do SIMP (http://www.anp.gov.br).
    attr_accessor :c_prod_anp

    # Descrição do Produto conforme ANP. Utilizar a descrição de produtos do Sistema de Informações de Movimentação de Produtos - SIMP (http://www.anp.gov.br/simp/).
    attr_accessor :desc_anp

    # Percentual do GLP derivado do petróleo no produto GLP (cProdANP=210203001). Informar em número decimal o percentual do GLP derivado de petróleo no produto GLP. Valores 0 a 100.
    attr_accessor :p_glp

    # Percentual de gás natural nacional - GLGNn para o produto GLP (cProdANP=210203001). Informar em número decimal o percentual do Gás Natural Nacional - GLGNn para o produto GLP. Valores de 0 a 100.
    attr_accessor :p_gnn

    # Percentual de gás natural importado GLGNi para o produto GLP (cProdANP=210203001). Informar em número deciaml o percentual do Gás Natural Importado - GLGNi para o produto GLP. Valores de 0 a 100.
    attr_accessor :p_gni

    # Valor de partida (cProdANP=210203001). Deve ser informado neste campo o valor por quilograma sem ICMS.
    attr_accessor :v_part

    # Código de autorização / registro do CODIF. Informar apenas quando a UF utilizar o CODIF (Sistema de Controle do    Diferimento do Imposto nas Operações com AEAC - Álcool Etílico Anidro Combustível).
    attr_accessor :codif

    # Quantidade de combustível  faturada à temperatura ambiente.  Informar quando a quantidade  faturada informada no campo  qCom (I10) tiver sido ajustada para  uma temperatura diferente da  ambiente.
    attr_accessor :q_temp

    # Sigla da UF de Consumo.
    attr_accessor :uf_cons

    attr_accessor :cide

    attr_accessor :encerrante

    # Percentual do índice de mistura do Biodiesel (B100) no Óleo Diesel B instituído pelo órgão regulamentador.
    attr_accessor :p_bio

    attr_accessor :orig_comb

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'c_prod_anp' => :'cProdANP',
        :'desc_anp' => :'descANP',
        :'p_glp' => :'pGLP',
        :'p_gnn' => :'pGNn',
        :'p_gni' => :'pGNi',
        :'v_part' => :'vPart',
        :'codif' => :'CODIF',
        :'q_temp' => :'qTemp',
        :'uf_cons' => :'UFCons',
        :'cide' => :'CIDE',
        :'encerrante' => :'encerrante',
        :'p_bio' => :'pBio',
        :'orig_comb' => :'origComb'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'c_prod_anp' => :'Integer',
        :'desc_anp' => :'String',
        :'p_glp' => :'Float',
        :'p_gnn' => :'Float',
        :'p_gni' => :'Float',
        :'v_part' => :'Float',
        :'codif' => :'String',
        :'q_temp' => :'Float',
        :'uf_cons' => :'String',
        :'cide' => :'NfeSefazCIDE',
        :'encerrante' => :'NfeSefazEncerrante',
        :'p_bio' => :'Float',
        :'orig_comb' => :'Array<NfeSefazOrigComb>'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'c_prod_anp',
        :'desc_anp',
        :'p_glp',
        :'p_gnn',
        :'p_gni',
        :'v_part',
        :'codif',
        :'q_temp',
        :'uf_cons',
        :'p_bio',
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `NuvemfiscalSdkRuby::NfeSefazComb` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `NuvemfiscalSdkRuby::NfeSefazComb`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'c_prod_anp')
        self.c_prod_anp = attributes[:'c_prod_anp']
      else
        self.c_prod_anp = nil
      end

      if attributes.key?(:'desc_anp')
        self.desc_anp = attributes[:'desc_anp']
      else
        self.desc_anp = nil
      end

      if attributes.key?(:'p_glp')
        self.p_glp = attributes[:'p_glp']
      end

      if attributes.key?(:'p_gnn')
        self.p_gnn = attributes[:'p_gnn']
      end

      if attributes.key?(:'p_gni')
        self.p_gni = attributes[:'p_gni']
      end

      if attributes.key?(:'v_part')
        self.v_part = attributes[:'v_part']
      end

      if attributes.key?(:'codif')
        self.codif = attributes[:'codif']
      end

      if attributes.key?(:'q_temp')
        self.q_temp = attributes[:'q_temp']
      end

      if attributes.key?(:'uf_cons')
        self.uf_cons = attributes[:'uf_cons']
      else
        self.uf_cons = nil
      end

      if attributes.key?(:'cide')
        self.cide = attributes[:'cide']
      end

      if attributes.key?(:'encerrante')
        self.encerrante = attributes[:'encerrante']
      end

      if attributes.key?(:'p_bio')
        self.p_bio = attributes[:'p_bio']
      end

      if attributes.key?(:'orig_comb')
        if (value = attributes[:'orig_comb']).is_a?(Array)
          self.orig_comb = value
        end
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      if @c_prod_anp > 999999999
        invalid_properties.push('invalid value for "c_prod_anp", must be smaller than or equal to 999999999.')
      end

      if @c_prod_anp < 0
        invalid_properties.push('invalid value for "c_prod_anp", must be greater than or equal to 0.')
      end

      if @desc_anp.to_s.length > 95
        invalid_properties.push('invalid value for "desc_anp", the character length must be smaller than or equal to 95.')
      end

      if @desc_anp.to_s.length < 2
        invalid_properties.push('invalid value for "desc_anp", the character length must be great than or equal to 2.')
      end

      if !@p_glp.nil? && @p_glp > 1E+2
        invalid_properties.push('invalid value for "p_glp", must be smaller than or equal to 1E+2.')
      end

      if !@p_glp.nil? && @p_glp < 0
        invalid_properties.push('invalid value for "p_glp", must be greater than or equal to 0.')
      end

      if !@p_gnn.nil? && @p_gnn > 1E+2
        invalid_properties.push('invalid value for "p_gnn", must be smaller than or equal to 1E+2.')
      end

      if !@p_gnn.nil? && @p_gnn < 0
        invalid_properties.push('invalid value for "p_gnn", must be greater than or equal to 0.')
      end

      if !@p_gni.nil? && @p_gni > 1E+2
        invalid_properties.push('invalid value for "p_gni", must be smaller than or equal to 1E+2.')
      end

      if !@p_gni.nil? && @p_gni < 0
        invalid_properties.push('invalid value for "p_gni", must be greater than or equal to 0.')
      end

      if !@v_part.nil? && @v_part < 0
        invalid_properties.push('invalid value for "v_part", must be greater than or equal to 0.')
      end

      if !@q_temp.nil? && @q_temp < 0
        invalid_properties.push('invalid value for "q_temp", must be greater than or equal to 0.')
      end

      if !@p_bio.nil? && @p_bio > 1E+2
        invalid_properties.push('invalid value for "p_bio", must be smaller than or equal to 1E+2.')
      end

      if !@p_bio.nil? && @p_bio <= 0
        invalid_properties.push('invalid value for "p_bio", must be greater than 0.')
      end

      if !@orig_comb.nil? && @orig_comb.length > 30
        invalid_properties.push('invalid value for "orig_comb", number of items must be less than or equal to 30.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      return false if @c_prod_anp > 999999999
      return false if @c_prod_anp < 0
      return false if @desc_anp.to_s.length > 95
      return false if @desc_anp.to_s.length < 2
      return false if !@p_glp.nil? && @p_glp > 1E+2
      return false if !@p_glp.nil? && @p_glp < 0
      return false if !@p_gnn.nil? && @p_gnn > 1E+2
      return false if !@p_gnn.nil? && @p_gnn < 0
      return false if !@p_gni.nil? && @p_gni > 1E+2
      return false if !@p_gni.nil? && @p_gni < 0
      return false if !@v_part.nil? && @v_part < 0
      return false if !@q_temp.nil? && @q_temp < 0
      return false if !@p_bio.nil? && @p_bio > 1E+2
      return false if !@p_bio.nil? && @p_bio <= 0
      return false if !@orig_comb.nil? && @orig_comb.length > 30
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] c_prod_anp Value to be assigned
    def c_prod_anp=(c_prod_anp)
      if !c_prod_anp.nil? && c_prod_anp > 999999999
        fail ArgumentError, 'invalid value for "c_prod_anp", must be smaller than or equal to 999999999.'
      end

      if !c_prod_anp.nil? && c_prod_anp < 0
        fail ArgumentError, 'invalid value for "c_prod_anp", must be greater than or equal to 0.'
      end

      @c_prod_anp = c_prod_anp
    end

    # Custom attribute writer method with validation
    # @param [Object] desc_anp Value to be assigned
    def desc_anp=(desc_anp)
      if !desc_anp.nil? && desc_anp.to_s.length > 95
        fail ArgumentError, 'invalid value for "desc_anp", the character length must be smaller than or equal to 95.'
      end

      if !desc_anp.nil? && desc_anp.to_s.length < 2
        fail ArgumentError, 'invalid value for "desc_anp", the character length must be great than or equal to 2.'
      end

      @desc_anp = desc_anp
    end

    # Custom attribute writer method with validation
    # @param [Object] p_glp Value to be assigned
    def p_glp=(p_glp)
      if !p_glp.nil? && p_glp > 1E+2
        fail ArgumentError, 'invalid value for "p_glp", must be smaller than or equal to 1E+2.'
      end

      if !p_glp.nil? && p_glp < 0
        fail ArgumentError, 'invalid value for "p_glp", must be greater than or equal to 0.'
      end

      @p_glp = p_glp
    end

    # Custom attribute writer method with validation
    # @param [Object] p_gnn Value to be assigned
    def p_gnn=(p_gnn)
      if !p_gnn.nil? && p_gnn > 1E+2
        fail ArgumentError, 'invalid value for "p_gnn", must be smaller than or equal to 1E+2.'
      end

      if !p_gnn.nil? && p_gnn < 0
        fail ArgumentError, 'invalid value for "p_gnn", must be greater than or equal to 0.'
      end

      @p_gnn = p_gnn
    end

    # Custom attribute writer method with validation
    # @param [Object] p_gni Value to be assigned
    def p_gni=(p_gni)
      if !p_gni.nil? && p_gni > 1E+2
        fail ArgumentError, 'invalid value for "p_gni", must be smaller than or equal to 1E+2.'
      end

      if !p_gni.nil? && p_gni < 0
        fail ArgumentError, 'invalid value for "p_gni", must be greater than or equal to 0.'
      end

      @p_gni = p_gni
    end

    # Custom attribute writer method with validation
    # @param [Object] v_part Value to be assigned
    def v_part=(v_part)
      if !v_part.nil? && v_part < 0
        fail ArgumentError, 'invalid value for "v_part", must be greater than or equal to 0.'
      end

      @v_part = v_part
    end

    # Custom attribute writer method with validation
    # @param [Object] q_temp Value to be assigned
    def q_temp=(q_temp)
      if !q_temp.nil? && q_temp < 0
        fail ArgumentError, 'invalid value for "q_temp", must be greater than or equal to 0.'
      end

      @q_temp = q_temp
    end

    # Custom attribute writer method with validation
    # @param [Object] p_bio Value to be assigned
    def p_bio=(p_bio)
      if !p_bio.nil? && p_bio > 1E+2
        fail ArgumentError, 'invalid value for "p_bio", must be smaller than or equal to 1E+2.'
      end

      if !p_bio.nil? && p_bio <= 0
        fail ArgumentError, 'invalid value for "p_bio", must be greater than 0.'
      end

      @p_bio = p_bio
    end

    # Custom attribute writer method with validation
    # @param [Object] orig_comb Value to be assigned
    def orig_comb=(orig_comb)
      if orig_comb.nil?
        fail ArgumentError, 'orig_comb cannot be nil'
      end

      if orig_comb.length > 30
        fail ArgumentError, 'invalid value for "orig_comb", number of items must be less than or equal to 30.'
      end

      @orig_comb = orig_comb
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          c_prod_anp == o.c_prod_anp &&
          desc_anp == o.desc_anp &&
          p_glp == o.p_glp &&
          p_gnn == o.p_gnn &&
          p_gni == o.p_gni &&
          v_part == o.v_part &&
          codif == o.codif &&
          q_temp == o.q_temp &&
          uf_cons == o.uf_cons &&
          cide == o.cide &&
          encerrante == o.encerrante &&
          p_bio == o.p_bio &&
          orig_comb == o.orig_comb
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [c_prod_anp, desc_anp, p_glp, p_gnn, p_gni, v_part, codif, q_temp, uf_cons, cide, encerrante, p_bio, orig_comb].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = NuvemfiscalSdkRuby.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
