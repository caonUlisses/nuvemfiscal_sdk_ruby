=begin
#API Nuvem Fiscal

#API para automação comercial e documentos fiscais.

The version of the OpenAPI document: 2.44.0

Generated by: https://openapi-generator.tech
Generator version: 7.10.0

=end

require 'date'
require 'time'

module NuvemfiscalSdkRuby
  class DfePedidoInutilizacao
    # Identificação do Ambiente.
    attr_accessor :ambiente

    # CNPJ do emitente.
    attr_accessor :cnpj

    # Ano de inutilização da numeração.
    attr_accessor :ano

    # Série da NF-e.
    attr_accessor :serie

    # Número da NF-e inicial.
    attr_accessor :numero_inicial

    # Número da NF-e final.
    attr_accessor :numero_final

    # Justificativa do pedido de inutilização.
    attr_accessor :justificativa

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'ambiente' => :'ambiente',
        :'cnpj' => :'cnpj',
        :'ano' => :'ano',
        :'serie' => :'serie',
        :'numero_inicial' => :'numero_inicial',
        :'numero_final' => :'numero_final',
        :'justificativa' => :'justificativa'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'ambiente' => :'String',
        :'cnpj' => :'String',
        :'ano' => :'Integer',
        :'serie' => :'Integer',
        :'numero_inicial' => :'Integer',
        :'numero_final' => :'Integer',
        :'justificativa' => :'String'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `NuvemfiscalSdkRuby::DfePedidoInutilizacao` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `NuvemfiscalSdkRuby::DfePedidoInutilizacao`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'ambiente')
        self.ambiente = attributes[:'ambiente']
      else
        self.ambiente = nil
      end

      if attributes.key?(:'cnpj')
        self.cnpj = attributes[:'cnpj']
      else
        self.cnpj = nil
      end

      if attributes.key?(:'ano')
        self.ano = attributes[:'ano']
      else
        self.ano = nil
      end

      if attributes.key?(:'serie')
        self.serie = attributes[:'serie']
      else
        self.serie = nil
      end

      if attributes.key?(:'numero_inicial')
        self.numero_inicial = attributes[:'numero_inicial']
      else
        self.numero_inicial = nil
      end

      if attributes.key?(:'numero_final')
        self.numero_final = attributes[:'numero_final']
      else
        self.numero_final = nil
      end

      if attributes.key?(:'justificativa')
        self.justificativa = attributes[:'justificativa']
      else
        self.justificativa = nil
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      if @ambiente.nil?
        invalid_properties.push('invalid value for "ambiente", ambiente cannot be nil.')
      end

      if @cnpj.nil?
        invalid_properties.push('invalid value for "cnpj", cnpj cannot be nil.')
      end

      if @ano.nil?
        invalid_properties.push('invalid value for "ano", ano cannot be nil.')
      end

      if @serie.nil?
        invalid_properties.push('invalid value for "serie", serie cannot be nil.')
      end

      if @serie > 999
        invalid_properties.push('invalid value for "serie", must be smaller than or equal to 999.')
      end

      if @serie < 0
        invalid_properties.push('invalid value for "serie", must be greater than or equal to 0.')
      end

      if @numero_inicial.nil?
        invalid_properties.push('invalid value for "numero_inicial", numero_inicial cannot be nil.')
      end

      if @numero_inicial > 999999999
        invalid_properties.push('invalid value for "numero_inicial", must be smaller than or equal to 999999999.')
      end

      if @numero_inicial < 1
        invalid_properties.push('invalid value for "numero_inicial", must be greater than or equal to 1.')
      end

      if @numero_final.nil?
        invalid_properties.push('invalid value for "numero_final", numero_final cannot be nil.')
      end

      if @numero_final > 999999999
        invalid_properties.push('invalid value for "numero_final", must be smaller than or equal to 999999999.')
      end

      if @numero_final < 1
        invalid_properties.push('invalid value for "numero_final", must be greater than or equal to 1.')
      end

      if @justificativa.nil?
        invalid_properties.push('invalid value for "justificativa", justificativa cannot be nil.')
      end

      if @justificativa.to_s.length > 255
        invalid_properties.push('invalid value for "justificativa", the character length must be smaller than or equal to 255.')
      end

      if @justificativa.to_s.length < 15
        invalid_properties.push('invalid value for "justificativa", the character length must be great than or equal to 15.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      return false if @ambiente.nil?
      ambiente_validator = EnumAttributeValidator.new('String', ["homologacao", "producao"])
      return false unless ambiente_validator.valid?(@ambiente)
      return false if @cnpj.nil?
      return false if @ano.nil?
      return false if @serie.nil?
      return false if @serie > 999
      return false if @serie < 0
      return false if @numero_inicial.nil?
      return false if @numero_inicial > 999999999
      return false if @numero_inicial < 1
      return false if @numero_final.nil?
      return false if @numero_final > 999999999
      return false if @numero_final < 1
      return false if @justificativa.nil?
      return false if @justificativa.to_s.length > 255
      return false if @justificativa.to_s.length < 15
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] ambiente Object to be assigned
    def ambiente=(ambiente)
      validator = EnumAttributeValidator.new('String', ["homologacao", "producao"])
      unless validator.valid?(ambiente)
        fail ArgumentError, "invalid value for \"ambiente\", must be one of #{validator.allowable_values}."
      end
      @ambiente = ambiente
    end

    # Custom attribute writer method with validation
    # @param [Object] serie Value to be assigned
    def serie=(serie)
      if serie.nil?
        fail ArgumentError, 'serie cannot be nil'
      end

      if serie > 999
        fail ArgumentError, 'invalid value for "serie", must be smaller than or equal to 999.'
      end

      if serie < 0
        fail ArgumentError, 'invalid value for "serie", must be greater than or equal to 0.'
      end

      @serie = serie
    end

    # Custom attribute writer method with validation
    # @param [Object] numero_inicial Value to be assigned
    def numero_inicial=(numero_inicial)
      if numero_inicial.nil?
        fail ArgumentError, 'numero_inicial cannot be nil'
      end

      if numero_inicial > 999999999
        fail ArgumentError, 'invalid value for "numero_inicial", must be smaller than or equal to 999999999.'
      end

      if numero_inicial < 1
        fail ArgumentError, 'invalid value for "numero_inicial", must be greater than or equal to 1.'
      end

      @numero_inicial = numero_inicial
    end

    # Custom attribute writer method with validation
    # @param [Object] numero_final Value to be assigned
    def numero_final=(numero_final)
      if numero_final.nil?
        fail ArgumentError, 'numero_final cannot be nil'
      end

      if numero_final > 999999999
        fail ArgumentError, 'invalid value for "numero_final", must be smaller than or equal to 999999999.'
      end

      if numero_final < 1
        fail ArgumentError, 'invalid value for "numero_final", must be greater than or equal to 1.'
      end

      @numero_final = numero_final
    end

    # Custom attribute writer method with validation
    # @param [Object] justificativa Value to be assigned
    def justificativa=(justificativa)
      if justificativa.nil?
        fail ArgumentError, 'justificativa cannot be nil'
      end

      if justificativa.to_s.length > 255
        fail ArgumentError, 'invalid value for "justificativa", the character length must be smaller than or equal to 255.'
      end

      if justificativa.to_s.length < 15
        fail ArgumentError, 'invalid value for "justificativa", the character length must be great than or equal to 15.'
      end

      @justificativa = justificativa
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          ambiente == o.ambiente &&
          cnpj == o.cnpj &&
          ano == o.ano &&
          serie == o.serie &&
          numero_inicial == o.numero_inicial &&
          numero_final == o.numero_final &&
          justificativa == o.justificativa
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [ambiente, cnpj, ano, serie, numero_inicial, numero_final, justificativa].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = NuvemfiscalSdkRuby.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
