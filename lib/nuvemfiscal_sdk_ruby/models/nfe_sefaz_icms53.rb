=begin
#API Nuvem Fiscal

#API para automação comercial e documentos fiscais.

The version of the OpenAPI document: 2.44.0

Generated by: https://openapi-generator.tech
Generator version: 7.10.0

=end

require 'date'
require 'time'

module NuvemfiscalSdkRuby
  # Tributação monofásica sobre combustíveis com recolhimento diferido.
  class NfeSefazICMS53
    # Origem da mercadoria:  * 0 - Nacional, exceto as indicadas nos códigos 3, 4, 5 e 8;  * 1 - Estrangeira - Importação direta, exceto a indicada no código 6;  * 2 - Estrangeira - Adquirida no mercado interno, exceto a indicada no código 7;  * 3 - Nacional, mercadoria ou bem com Conteúdo de Importação superior a 40%% e inferior ou igual a 70%%;  * 4 - Nacional, cuja produção tenha sido feita em conformidade com os processos produtivos básicos de que tratam as legislações citadas nos Ajustes;  * 5 - Nacional, mercadoria ou bem com Conteúdo de Importação inferior ou igual a 40%%;  * 6 - Estrangeira - Importação direta, sem similar nacional, constante em lista da CAMEX e gás natural;  * 7 - Estrangeira - Adquirida no mercado interno, sem similar nacional, constante lista CAMEX e gás natural;  * 8 - Nacional, mercadoria ou bem com Conteúdo de Importação superior a 70%%.
    attr_accessor :orig

    # Tributção pelo ICMS  * 53 - Tributação monofásica sobre combustíveis com recolhimento diferido
    attr_accessor :cst

    # Quantidade tributada.
    attr_accessor :q_bc_mono

    # Alíquota ad rem do imposto.
    attr_accessor :ad_rem_icms

    # Valor do ICMS da operação.
    attr_accessor :v_icms_mono_op

    # Percentual do diferemento.
    attr_accessor :p_dif

    # Valor do ICMS diferido.
    attr_accessor :v_icms_mono_dif

    # Valor do ICMS próprio devido.
    attr_accessor :v_icms_mono

    # Quantidade tributada diferida.  OBS: Campo revogado pela NT2023.001v1.20
    attr_accessor :q_bc_mono_dif

    # Alíquota ad rem do imposto diferido.  OBS: Campo revogado pela NT2023.001v1.20
    attr_accessor :ad_rem_icms_dif

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'orig' => :'orig',
        :'cst' => :'CST',
        :'q_bc_mono' => :'qBCMono',
        :'ad_rem_icms' => :'adRemICMS',
        :'v_icms_mono_op' => :'vICMSMonoOp',
        :'p_dif' => :'pDif',
        :'v_icms_mono_dif' => :'vICMSMonoDif',
        :'v_icms_mono' => :'vICMSMono',
        :'q_bc_mono_dif' => :'qBCMonoDif',
        :'ad_rem_icms_dif' => :'adRemICMSDif'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'orig' => :'Integer',
        :'cst' => :'String',
        :'q_bc_mono' => :'Float',
        :'ad_rem_icms' => :'Float',
        :'v_icms_mono_op' => :'Float',
        :'p_dif' => :'Float',
        :'v_icms_mono_dif' => :'Float',
        :'v_icms_mono' => :'Float',
        :'q_bc_mono_dif' => :'Float',
        :'ad_rem_icms_dif' => :'Float'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'orig',
        :'cst',
        :'q_bc_mono',
        :'ad_rem_icms',
        :'v_icms_mono_op',
        :'p_dif',
        :'v_icms_mono_dif',
        :'v_icms_mono',
        :'q_bc_mono_dif',
        :'ad_rem_icms_dif'
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `NuvemfiscalSdkRuby::NfeSefazICMS53` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `NuvemfiscalSdkRuby::NfeSefazICMS53`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'orig')
        self.orig = attributes[:'orig']
      else
        self.orig = nil
      end

      if attributes.key?(:'cst')
        self.cst = attributes[:'cst']
      else
        self.cst = nil
      end

      if attributes.key?(:'q_bc_mono')
        self.q_bc_mono = attributes[:'q_bc_mono']
      end

      if attributes.key?(:'ad_rem_icms')
        self.ad_rem_icms = attributes[:'ad_rem_icms']
      end

      if attributes.key?(:'v_icms_mono_op')
        self.v_icms_mono_op = attributes[:'v_icms_mono_op']
      end

      if attributes.key?(:'p_dif')
        self.p_dif = attributes[:'p_dif']
      end

      if attributes.key?(:'v_icms_mono_dif')
        self.v_icms_mono_dif = attributes[:'v_icms_mono_dif']
      end

      if attributes.key?(:'v_icms_mono')
        self.v_icms_mono = attributes[:'v_icms_mono']
      end

      if attributes.key?(:'q_bc_mono_dif')
        self.q_bc_mono_dif = attributes[:'q_bc_mono_dif']
      end

      if attributes.key?(:'ad_rem_icms_dif')
        self.ad_rem_icms_dif = attributes[:'ad_rem_icms_dif']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      if !@q_bc_mono.nil? && @q_bc_mono < 0
        invalid_properties.push('invalid value for "q_bc_mono", must be greater than or equal to 0.')
      end

      if !@ad_rem_icms.nil? && @ad_rem_icms < 0
        invalid_properties.push('invalid value for "ad_rem_icms", must be greater than or equal to 0.')
      end

      if !@v_icms_mono_op.nil? && @v_icms_mono_op < 0
        invalid_properties.push('invalid value for "v_icms_mono_op", must be greater than or equal to 0.')
      end

      if !@p_dif.nil? && @p_dif > 1E+2
        invalid_properties.push('invalid value for "p_dif", must be smaller than or equal to 1E+2.')
      end

      if !@p_dif.nil? && @p_dif < 0
        invalid_properties.push('invalid value for "p_dif", must be greater than or equal to 0.')
      end

      if !@v_icms_mono_dif.nil? && @v_icms_mono_dif < 0
        invalid_properties.push('invalid value for "v_icms_mono_dif", must be greater than or equal to 0.')
      end

      if !@v_icms_mono.nil? && @v_icms_mono < 0
        invalid_properties.push('invalid value for "v_icms_mono", must be greater than or equal to 0.')
      end

      if !@q_bc_mono_dif.nil? && @q_bc_mono_dif < 0
        invalid_properties.push('invalid value for "q_bc_mono_dif", must be greater than or equal to 0.')
      end

      if !@ad_rem_icms_dif.nil? && @ad_rem_icms_dif < 0
        invalid_properties.push('invalid value for "ad_rem_icms_dif", must be greater than or equal to 0.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      return false if !@q_bc_mono.nil? && @q_bc_mono < 0
      return false if !@ad_rem_icms.nil? && @ad_rem_icms < 0
      return false if !@v_icms_mono_op.nil? && @v_icms_mono_op < 0
      return false if !@p_dif.nil? && @p_dif > 1E+2
      return false if !@p_dif.nil? && @p_dif < 0
      return false if !@v_icms_mono_dif.nil? && @v_icms_mono_dif < 0
      return false if !@v_icms_mono.nil? && @v_icms_mono < 0
      return false if !@q_bc_mono_dif.nil? && @q_bc_mono_dif < 0
      return false if !@ad_rem_icms_dif.nil? && @ad_rem_icms_dif < 0
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] q_bc_mono Value to be assigned
    def q_bc_mono=(q_bc_mono)
      if !q_bc_mono.nil? && q_bc_mono < 0
        fail ArgumentError, 'invalid value for "q_bc_mono", must be greater than or equal to 0.'
      end

      @q_bc_mono = q_bc_mono
    end

    # Custom attribute writer method with validation
    # @param [Object] ad_rem_icms Value to be assigned
    def ad_rem_icms=(ad_rem_icms)
      if !ad_rem_icms.nil? && ad_rem_icms < 0
        fail ArgumentError, 'invalid value for "ad_rem_icms", must be greater than or equal to 0.'
      end

      @ad_rem_icms = ad_rem_icms
    end

    # Custom attribute writer method with validation
    # @param [Object] v_icms_mono_op Value to be assigned
    def v_icms_mono_op=(v_icms_mono_op)
      if !v_icms_mono_op.nil? && v_icms_mono_op < 0
        fail ArgumentError, 'invalid value for "v_icms_mono_op", must be greater than or equal to 0.'
      end

      @v_icms_mono_op = v_icms_mono_op
    end

    # Custom attribute writer method with validation
    # @param [Object] p_dif Value to be assigned
    def p_dif=(p_dif)
      if !p_dif.nil? && p_dif > 1E+2
        fail ArgumentError, 'invalid value for "p_dif", must be smaller than or equal to 1E+2.'
      end

      if !p_dif.nil? && p_dif < 0
        fail ArgumentError, 'invalid value for "p_dif", must be greater than or equal to 0.'
      end

      @p_dif = p_dif
    end

    # Custom attribute writer method with validation
    # @param [Object] v_icms_mono_dif Value to be assigned
    def v_icms_mono_dif=(v_icms_mono_dif)
      if !v_icms_mono_dif.nil? && v_icms_mono_dif < 0
        fail ArgumentError, 'invalid value for "v_icms_mono_dif", must be greater than or equal to 0.'
      end

      @v_icms_mono_dif = v_icms_mono_dif
    end

    # Custom attribute writer method with validation
    # @param [Object] v_icms_mono Value to be assigned
    def v_icms_mono=(v_icms_mono)
      if !v_icms_mono.nil? && v_icms_mono < 0
        fail ArgumentError, 'invalid value for "v_icms_mono", must be greater than or equal to 0.'
      end

      @v_icms_mono = v_icms_mono
    end

    # Custom attribute writer method with validation
    # @param [Object] q_bc_mono_dif Value to be assigned
    def q_bc_mono_dif=(q_bc_mono_dif)
      if !q_bc_mono_dif.nil? && q_bc_mono_dif < 0
        fail ArgumentError, 'invalid value for "q_bc_mono_dif", must be greater than or equal to 0.'
      end

      @q_bc_mono_dif = q_bc_mono_dif
    end

    # Custom attribute writer method with validation
    # @param [Object] ad_rem_icms_dif Value to be assigned
    def ad_rem_icms_dif=(ad_rem_icms_dif)
      if !ad_rem_icms_dif.nil? && ad_rem_icms_dif < 0
        fail ArgumentError, 'invalid value for "ad_rem_icms_dif", must be greater than or equal to 0.'
      end

      @ad_rem_icms_dif = ad_rem_icms_dif
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          orig == o.orig &&
          cst == o.cst &&
          q_bc_mono == o.q_bc_mono &&
          ad_rem_icms == o.ad_rem_icms &&
          v_icms_mono_op == o.v_icms_mono_op &&
          p_dif == o.p_dif &&
          v_icms_mono_dif == o.v_icms_mono_dif &&
          v_icms_mono == o.v_icms_mono &&
          q_bc_mono_dif == o.q_bc_mono_dif &&
          ad_rem_icms_dif == o.ad_rem_icms_dif
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [orig, cst, q_bc_mono, ad_rem_icms, v_icms_mono_op, p_dif, v_icms_mono_dif, v_icms_mono, q_bc_mono_dif, ad_rem_icms_dif].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = NuvemfiscalSdkRuby.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
