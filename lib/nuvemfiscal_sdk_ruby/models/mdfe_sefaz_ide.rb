=begin
#API Nuvem Fiscal

#API para automação comercial e documentos fiscais.

The version of the OpenAPI document: 2.44.0

Generated by: https://openapi-generator.tech
Generator version: 7.10.0

=end

require 'date'
require 'time'

module NuvemfiscalSdkRuby
  # Identificação do MDF-e.
  class MdfeSefazIde
    # Código da UF do emitente do MDF-e.  Código da UF do emitente do Documento Fiscal. Utilizar a  Tabela do IBGE de código de unidades da federação.
    attr_accessor :c_uf

    # Tipo do Ambiente.  * 1 - Produção  * 2 - Homologação
    attr_accessor :tp_amb

    # Tipo do Emitente.  * 1 - Prestador de serviço de transporte  * 2 - Transportador de Carga Própria 3 - Prestador de serviço de transporte que emitirá CT-e Globalizado  OBS: Deve ser preenchido com 2 para emitentes de NF-e e pelas transportadoras quando estiverem fazendo transporte de carga própria. Deve ser preenchido com 3 para transportador de carga que emitirá à posteriori CT-e Globalizado relacionando as NF-e.
    attr_accessor :tp_emit

    # Tipo do Transportador.  * 1 - ETC  * 2 - TAC  * 3 - CTC
    attr_accessor :tp_transp

    # Modelo do Manifesto Eletrônico.  Utilizar o código 58 para identificação do MDF-e.
    attr_accessor :mod

    # Série do Manifesto.  Informar a série do documento fiscal (informar zero se inexistente).  Série na faixa [920-969]: Reservada para emissão por contribuinte pessoa física com inscrição estadual.
    attr_accessor :serie

    # Número do Manifesto.  Número que identifica o Manifesto. 1 a 999999999.
    attr_accessor :n_mdf

    # Código numérico que compõe a Chave de Acesso.  Código aleatório gerado pelo emitente, com o objetivo de evitar acessos indevidos ao documento.    *Geramos automaticamente quando nenhum valor é informado.*
    attr_accessor :c_mdf

    # Digito verificador da chave de acesso do Manifesto.  Informar o dígito  de controle da chave de acesso do MDF-e, que deve ser calculado com a aplicação do algoritmo módulo 11 (base 2,9) da chave de acesso.    *Geramos automaticamente quando nenhum valor é informado.*
    attr_accessor :c_dv

    # Modalidade de transporte.  * 1 - Rodoviário  * 2 - Aéreo  * 3 - Aquaviário  * 4 - Ferroviário
    attr_accessor :modal

    # Data e hora de emissão do Manifesto.  Formato AAAA-MM-DDTHH:MM:DD TZD.
    attr_accessor :dh_emi

    # Forma de emissão do Manifesto.  * 1 - Normal  * 2 - Contingência  * 3 - Regime Especial NFF
    attr_accessor :tp_emis

    # Identificação do processo de emissão do Manifesto.  * 0 - emissão de MDF-e com aplicativo do contribuinte
    attr_accessor :proc_emi

    # Versão do processo de emissão.  Informar a versão do aplicativo emissor de MDF-e.
    attr_accessor :ver_proc

    # Sigla da UF do Carregamento.  Utilizar a Tabela do IBGE de código de unidades da federação.  Informar 'EX' para operações com o exterior.
    attr_accessor :uf_ini

    # Sigla da UF do Descarregamento.  Utilizar a Tabela do IBGE de código de unidades da federação.  Informar 'EX' para operações com o exterior.
    attr_accessor :uf_fim

    attr_accessor :inf_mun_carrega

    attr_accessor :inf_percurso

    # Data e hora previstos de inicio da viagem.  Formato AAAA-MM-DDTHH:MM:DD TZD.
    attr_accessor :dh_ini_viagem

    # Indicador de participação do Canal Verde.
    attr_accessor :ind_canal_verde

    # Indicador de MDF-e com inclusão da Carga posterior a emissão por evento de inclusão de DF-e.
    attr_accessor :ind_carrega_posterior

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'c_uf' => :'cUF',
        :'tp_amb' => :'tpAmb',
        :'tp_emit' => :'tpEmit',
        :'tp_transp' => :'tpTransp',
        :'mod' => :'mod',
        :'serie' => :'serie',
        :'n_mdf' => :'nMDF',
        :'c_mdf' => :'cMDF',
        :'c_dv' => :'cDV',
        :'modal' => :'modal',
        :'dh_emi' => :'dhEmi',
        :'tp_emis' => :'tpEmis',
        :'proc_emi' => :'procEmi',
        :'ver_proc' => :'verProc',
        :'uf_ini' => :'UFIni',
        :'uf_fim' => :'UFFim',
        :'inf_mun_carrega' => :'infMunCarrega',
        :'inf_percurso' => :'infPercurso',
        :'dh_ini_viagem' => :'dhIniViagem',
        :'ind_canal_verde' => :'indCanalVerde',
        :'ind_carrega_posterior' => :'indCarregaPosterior'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'c_uf' => :'Integer',
        :'tp_amb' => :'Integer',
        :'tp_emit' => :'Integer',
        :'tp_transp' => :'Integer',
        :'mod' => :'Integer',
        :'serie' => :'Integer',
        :'n_mdf' => :'Integer',
        :'c_mdf' => :'String',
        :'c_dv' => :'Integer',
        :'modal' => :'Integer',
        :'dh_emi' => :'Time',
        :'tp_emis' => :'Integer',
        :'proc_emi' => :'String',
        :'ver_proc' => :'String',
        :'uf_ini' => :'String',
        :'uf_fim' => :'String',
        :'inf_mun_carrega' => :'Array<MdfeSefazInfMunCarrega>',
        :'inf_percurso' => :'Array<MdfeSefazInfPercurso>',
        :'dh_ini_viagem' => :'Time',
        :'ind_canal_verde' => :'Integer',
        :'ind_carrega_posterior' => :'Integer'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'c_uf',
        :'tp_amb',
        :'tp_emit',
        :'tp_transp',
        :'mod',
        :'serie',
        :'n_mdf',
        :'c_mdf',
        :'c_dv',
        :'modal',
        :'dh_emi',
        :'tp_emis',
        :'proc_emi',
        :'ver_proc',
        :'uf_ini',
        :'uf_fim',
        :'dh_ini_viagem',
        :'ind_canal_verde',
        :'ind_carrega_posterior'
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `NuvemfiscalSdkRuby::MdfeSefazIde` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `NuvemfiscalSdkRuby::MdfeSefazIde`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'c_uf')
        self.c_uf = attributes[:'c_uf']
      else
        self.c_uf = nil
      end

      if attributes.key?(:'tp_amb')
        self.tp_amb = attributes[:'tp_amb']
      end

      if attributes.key?(:'tp_emit')
        self.tp_emit = attributes[:'tp_emit']
      else
        self.tp_emit = nil
      end

      if attributes.key?(:'tp_transp')
        self.tp_transp = attributes[:'tp_transp']
      end

      if attributes.key?(:'mod')
        self.mod = attributes[:'mod']
      end

      if attributes.key?(:'serie')
        self.serie = attributes[:'serie']
      else
        self.serie = nil
      end

      if attributes.key?(:'n_mdf')
        self.n_mdf = attributes[:'n_mdf']
      else
        self.n_mdf = nil
      end

      if attributes.key?(:'c_mdf')
        self.c_mdf = attributes[:'c_mdf']
      end

      if attributes.key?(:'c_dv')
        self.c_dv = attributes[:'c_dv']
      end

      if attributes.key?(:'modal')
        self.modal = attributes[:'modal']
      else
        self.modal = nil
      end

      if attributes.key?(:'dh_emi')
        self.dh_emi = attributes[:'dh_emi']
      else
        self.dh_emi = nil
      end

      if attributes.key?(:'tp_emis')
        self.tp_emis = attributes[:'tp_emis']
      else
        self.tp_emis = nil
      end

      if attributes.key?(:'proc_emi')
        self.proc_emi = attributes[:'proc_emi']
      else
        self.proc_emi = nil
      end

      if attributes.key?(:'ver_proc')
        self.ver_proc = attributes[:'ver_proc']
      else
        self.ver_proc = nil
      end

      if attributes.key?(:'uf_ini')
        self.uf_ini = attributes[:'uf_ini']
      else
        self.uf_ini = nil
      end

      if attributes.key?(:'uf_fim')
        self.uf_fim = attributes[:'uf_fim']
      else
        self.uf_fim = nil
      end

      if attributes.key?(:'inf_mun_carrega')
        if (value = attributes[:'inf_mun_carrega']).is_a?(Array)
          self.inf_mun_carrega = value
        end
      else
        self.inf_mun_carrega = nil
      end

      if attributes.key?(:'inf_percurso')
        if (value = attributes[:'inf_percurso']).is_a?(Array)
          self.inf_percurso = value
        end
      end

      if attributes.key?(:'dh_ini_viagem')
        self.dh_ini_viagem = attributes[:'dh_ini_viagem']
      end

      if attributes.key?(:'ind_canal_verde')
        self.ind_canal_verde = attributes[:'ind_canal_verde']
      end

      if attributes.key?(:'ind_carrega_posterior')
        self.ind_carrega_posterior = attributes[:'ind_carrega_posterior']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      if @serie > 999
        invalid_properties.push('invalid value for "serie", must be smaller than or equal to 999.')
      end

      if @serie < 0
        invalid_properties.push('invalid value for "serie", must be greater than or equal to 0.')
      end

      if @n_mdf > 999999999
        invalid_properties.push('invalid value for "n_mdf", must be smaller than or equal to 999999999.')
      end

      if @n_mdf < 1
        invalid_properties.push('invalid value for "n_mdf", must be greater than or equal to 1.')
      end

      if !@c_dv.nil? && @c_dv > 9
        invalid_properties.push('invalid value for "c_dv", must be smaller than or equal to 9.')
      end

      if !@c_dv.nil? && @c_dv < 0
        invalid_properties.push('invalid value for "c_dv", must be greater than or equal to 0.')
      end

      if @ver_proc.to_s.length > 20
        invalid_properties.push('invalid value for "ver_proc", the character length must be smaller than or equal to 20.')
      end

      if @ver_proc.to_s.length < 1
        invalid_properties.push('invalid value for "ver_proc", the character length must be great than or equal to 1.')
      end

      if @inf_mun_carrega.nil?
        invalid_properties.push('invalid value for "inf_mun_carrega", inf_mun_carrega cannot be nil.')
      end

      if @inf_mun_carrega.length > 50
        invalid_properties.push('invalid value for "inf_mun_carrega", number of items must be less than or equal to 50.')
      end

      if @inf_mun_carrega.length < 1
        invalid_properties.push('invalid value for "inf_mun_carrega", number of items must be greater than or equal to 1.')
      end

      if !@inf_percurso.nil? && @inf_percurso.length > 25
        invalid_properties.push('invalid value for "inf_percurso", number of items must be less than or equal to 25.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      return false if @serie > 999
      return false if @serie < 0
      return false if @n_mdf > 999999999
      return false if @n_mdf < 1
      return false if !@c_dv.nil? && @c_dv > 9
      return false if !@c_dv.nil? && @c_dv < 0
      return false if @ver_proc.to_s.length > 20
      return false if @ver_proc.to_s.length < 1
      return false if @inf_mun_carrega.nil?
      return false if @inf_mun_carrega.length > 50
      return false if @inf_mun_carrega.length < 1
      return false if !@inf_percurso.nil? && @inf_percurso.length > 25
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] serie Value to be assigned
    def serie=(serie)
      if !serie.nil? && serie > 999
        fail ArgumentError, 'invalid value for "serie", must be smaller than or equal to 999.'
      end

      if !serie.nil? && serie < 0
        fail ArgumentError, 'invalid value for "serie", must be greater than or equal to 0.'
      end

      @serie = serie
    end

    # Custom attribute writer method with validation
    # @param [Object] n_mdf Value to be assigned
    def n_mdf=(n_mdf)
      if !n_mdf.nil? && n_mdf > 999999999
        fail ArgumentError, 'invalid value for "n_mdf", must be smaller than or equal to 999999999.'
      end

      if !n_mdf.nil? && n_mdf < 1
        fail ArgumentError, 'invalid value for "n_mdf", must be greater than or equal to 1.'
      end

      @n_mdf = n_mdf
    end

    # Custom attribute writer method with validation
    # @param [Object] c_dv Value to be assigned
    def c_dv=(c_dv)
      if !c_dv.nil? && c_dv > 9
        fail ArgumentError, 'invalid value for "c_dv", must be smaller than or equal to 9.'
      end

      if !c_dv.nil? && c_dv < 0
        fail ArgumentError, 'invalid value for "c_dv", must be greater than or equal to 0.'
      end

      @c_dv = c_dv
    end

    # Custom attribute writer method with validation
    # @param [Object] ver_proc Value to be assigned
    def ver_proc=(ver_proc)
      if !ver_proc.nil? && ver_proc.to_s.length > 20
        fail ArgumentError, 'invalid value for "ver_proc", the character length must be smaller than or equal to 20.'
      end

      if !ver_proc.nil? && ver_proc.to_s.length < 1
        fail ArgumentError, 'invalid value for "ver_proc", the character length must be great than or equal to 1.'
      end

      @ver_proc = ver_proc
    end

    # Custom attribute writer method with validation
    # @param [Object] inf_mun_carrega Value to be assigned
    def inf_mun_carrega=(inf_mun_carrega)
      if inf_mun_carrega.nil?
        fail ArgumentError, 'inf_mun_carrega cannot be nil'
      end

      if inf_mun_carrega.length > 50
        fail ArgumentError, 'invalid value for "inf_mun_carrega", number of items must be less than or equal to 50.'
      end

      if inf_mun_carrega.length < 1
        fail ArgumentError, 'invalid value for "inf_mun_carrega", number of items must be greater than or equal to 1.'
      end

      @inf_mun_carrega = inf_mun_carrega
    end

    # Custom attribute writer method with validation
    # @param [Object] inf_percurso Value to be assigned
    def inf_percurso=(inf_percurso)
      if inf_percurso.nil?
        fail ArgumentError, 'inf_percurso cannot be nil'
      end

      if inf_percurso.length > 25
        fail ArgumentError, 'invalid value for "inf_percurso", number of items must be less than or equal to 25.'
      end

      @inf_percurso = inf_percurso
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          c_uf == o.c_uf &&
          tp_amb == o.tp_amb &&
          tp_emit == o.tp_emit &&
          tp_transp == o.tp_transp &&
          mod == o.mod &&
          serie == o.serie &&
          n_mdf == o.n_mdf &&
          c_mdf == o.c_mdf &&
          c_dv == o.c_dv &&
          modal == o.modal &&
          dh_emi == o.dh_emi &&
          tp_emis == o.tp_emis &&
          proc_emi == o.proc_emi &&
          ver_proc == o.ver_proc &&
          uf_ini == o.uf_ini &&
          uf_fim == o.uf_fim &&
          inf_mun_carrega == o.inf_mun_carrega &&
          inf_percurso == o.inf_percurso &&
          dh_ini_viagem == o.dh_ini_viagem &&
          ind_canal_verde == o.ind_canal_verde &&
          ind_carrega_posterior == o.ind_carrega_posterior
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [c_uf, tp_amb, tp_emit, tp_transp, mod, serie, n_mdf, c_mdf, c_dv, modal, dh_emi, tp_emis, proc_emi, ver_proc, uf_ini, uf_fim, inf_mun_carrega, inf_percurso, dh_ini_viagem, ind_canal_verde, ind_carrega_posterior].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = NuvemfiscalSdkRuby.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
