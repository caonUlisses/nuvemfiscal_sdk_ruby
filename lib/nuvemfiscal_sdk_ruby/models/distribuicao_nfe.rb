=begin
#API Nuvem Fiscal

#API para automação comercial e documentos fiscais.

The version of the OpenAPI document: 2.44.0

Generated by: https://openapi-generator.tech
Generator version: 7.10.0

=end

require 'date'
require 'time'

module NuvemfiscalSdkRuby
  class DistribuicaoNfe
    # ID único gerado pela Nuvem Fiscal para o pedido de distribuição.
    attr_accessor :id

    # Data/hora em que o pedido foi criado na Nuvem Fiscal. Representado no formato <a href=\"https://en.wikipedia.org/wiki/ISO_8601\" target=\"blank\">`ISO 8601`</a>.
    attr_accessor :created_at

    # Indica o status da distribuição.
    attr_accessor :status

    # Identificação do Ambiente.
    attr_accessor :ambiente

    # Sigla da UF do autor.
    attr_accessor :uf_autor

    attr_accessor :tipo_consulta

    # Distribuição de conjunto de DF-e a partir do NSU informado.    *Obrigatório quando `tipo_consulta` for `distNSU`.*
    attr_accessor :dist_nsu

    # Consulta DF-e vinculado ao NSU informado.    *Obrigatório quando `tipo_consulta` for `consNSU`.*
    attr_accessor :cons_nsu

    # Consulta de NF-e por chave de acesso informada.    *Obrigatório quando `tipo_consulta` for `consChNFe`.*
    attr_accessor :cons_chave

    # Código do status de processamento da requisição.
    attr_accessor :codigo_status

    # Descrição do status de processamento da requisição.
    attr_accessor :motivo_status

    # Data e Hora de processamento da requisição.
    attr_accessor :data_hora_resposta

    # Último NSU pesquisado no Ambiente Nacional. Se for o caso, o solicitante pode continuar a consulta a partir deste NSU para obter novos resultados.
    attr_accessor :ultimo_nsu

    # Maior NSU existente no Ambiente Nacional para o CNPJ/CPF informado.
    attr_accessor :max_nsu

    # Conjunto de informações resumidas e documentos fiscais eletrônicos de interesse da pessoa ou empresa.
    attr_accessor :documentos

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'id' => :'id',
        :'created_at' => :'created_at',
        :'status' => :'status',
        :'ambiente' => :'ambiente',
        :'uf_autor' => :'uf_autor',
        :'tipo_consulta' => :'tipo_consulta',
        :'dist_nsu' => :'dist_nsu',
        :'cons_nsu' => :'cons_nsu',
        :'cons_chave' => :'cons_chave',
        :'codigo_status' => :'codigo_status',
        :'motivo_status' => :'motivo_status',
        :'data_hora_resposta' => :'data_hora_resposta',
        :'ultimo_nsu' => :'ultimo_nsu',
        :'max_nsu' => :'max_nsu',
        :'documentos' => :'documentos'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'id' => :'String',
        :'created_at' => :'Time',
        :'status' => :'String',
        :'ambiente' => :'String',
        :'uf_autor' => :'String',
        :'tipo_consulta' => :'String',
        :'dist_nsu' => :'Integer',
        :'cons_nsu' => :'Integer',
        :'cons_chave' => :'String',
        :'codigo_status' => :'Integer',
        :'motivo_status' => :'String',
        :'data_hora_resposta' => :'Time',
        :'ultimo_nsu' => :'Integer',
        :'max_nsu' => :'Integer',
        :'documentos' => :'Array<DistribuicaoNfeDocumento>'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'uf_autor',
        :'dist_nsu',
        :'cons_nsu',
        :'cons_chave',
        :'codigo_status',
        :'motivo_status',
        :'data_hora_resposta',
        :'ultimo_nsu',
        :'max_nsu',
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `NuvemfiscalSdkRuby::DistribuicaoNfe` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `NuvemfiscalSdkRuby::DistribuicaoNfe`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'id')
        self.id = attributes[:'id']
      else
        self.id = nil
      end

      if attributes.key?(:'created_at')
        self.created_at = attributes[:'created_at']
      end

      if attributes.key?(:'status')
        self.status = attributes[:'status']
      else
        self.status = nil
      end

      if attributes.key?(:'ambiente')
        self.ambiente = attributes[:'ambiente']
      else
        self.ambiente = nil
      end

      if attributes.key?(:'uf_autor')
        self.uf_autor = attributes[:'uf_autor']
      end

      if attributes.key?(:'tipo_consulta')
        self.tipo_consulta = attributes[:'tipo_consulta']
      else
        self.tipo_consulta = nil
      end

      if attributes.key?(:'dist_nsu')
        self.dist_nsu = attributes[:'dist_nsu']
      end

      if attributes.key?(:'cons_nsu')
        self.cons_nsu = attributes[:'cons_nsu']
      end

      if attributes.key?(:'cons_chave')
        self.cons_chave = attributes[:'cons_chave']
      end

      if attributes.key?(:'codigo_status')
        self.codigo_status = attributes[:'codigo_status']
      else
        self.codigo_status = nil
      end

      if attributes.key?(:'motivo_status')
        self.motivo_status = attributes[:'motivo_status']
      end

      if attributes.key?(:'data_hora_resposta')
        self.data_hora_resposta = attributes[:'data_hora_resposta']
      else
        self.data_hora_resposta = nil
      end

      if attributes.key?(:'ultimo_nsu')
        self.ultimo_nsu = attributes[:'ultimo_nsu']
      else
        self.ultimo_nsu = nil
      end

      if attributes.key?(:'max_nsu')
        self.max_nsu = attributes[:'max_nsu']
      else
        self.max_nsu = nil
      end

      if attributes.key?(:'documentos')
        if (value = attributes[:'documentos']).is_a?(Array)
          self.documentos = value
        end
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      if @id.nil?
        invalid_properties.push('invalid value for "id", id cannot be nil.')
      end

      if @status.nil?
        invalid_properties.push('invalid value for "status", status cannot be nil.')
      end

      if @ambiente.nil?
        invalid_properties.push('invalid value for "ambiente", ambiente cannot be nil.')
      end

      if @tipo_consulta.nil?
        invalid_properties.push('invalid value for "tipo_consulta", tipo_consulta cannot be nil.')
      end

      if !@documentos.nil? && @documentos.length > 50
        invalid_properties.push('invalid value for "documentos", number of items must be less than or equal to 50.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      return false if @id.nil?
      return false if @status.nil?
      status_validator = EnumAttributeValidator.new('String', ["processando", "concluido", "erro"])
      return false unless status_validator.valid?(@status)
      return false if @ambiente.nil?
      ambiente_validator = EnumAttributeValidator.new('String', ["homologacao", "producao"])
      return false unless ambiente_validator.valid?(@ambiente)
      return false if @tipo_consulta.nil?
      tipo_consulta_validator = EnumAttributeValidator.new('String', ["dist-nsu", "cons-nsu", "cons-chave"])
      return false unless tipo_consulta_validator.valid?(@tipo_consulta)
      return false if !@documentos.nil? && @documentos.length > 50
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] status Object to be assigned
    def status=(status)
      validator = EnumAttributeValidator.new('String', ["processando", "concluido", "erro"])
      unless validator.valid?(status)
        fail ArgumentError, "invalid value for \"status\", must be one of #{validator.allowable_values}."
      end
      @status = status
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] ambiente Object to be assigned
    def ambiente=(ambiente)
      validator = EnumAttributeValidator.new('String', ["homologacao", "producao"])
      unless validator.valid?(ambiente)
        fail ArgumentError, "invalid value for \"ambiente\", must be one of #{validator.allowable_values}."
      end
      @ambiente = ambiente
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] tipo_consulta Object to be assigned
    def tipo_consulta=(tipo_consulta)
      validator = EnumAttributeValidator.new('String', ["dist-nsu", "cons-nsu", "cons-chave"])
      unless validator.valid?(tipo_consulta)
        fail ArgumentError, "invalid value for \"tipo_consulta\", must be one of #{validator.allowable_values}."
      end
      @tipo_consulta = tipo_consulta
    end

    # Custom attribute writer method with validation
    # @param [Object] documentos Value to be assigned
    def documentos=(documentos)
      if documentos.nil?
        fail ArgumentError, 'documentos cannot be nil'
      end

      if documentos.length > 50
        fail ArgumentError, 'invalid value for "documentos", number of items must be less than or equal to 50.'
      end

      @documentos = documentos
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          id == o.id &&
          created_at == o.created_at &&
          status == o.status &&
          ambiente == o.ambiente &&
          uf_autor == o.uf_autor &&
          tipo_consulta == o.tipo_consulta &&
          dist_nsu == o.dist_nsu &&
          cons_nsu == o.cons_nsu &&
          cons_chave == o.cons_chave &&
          codigo_status == o.codigo_status &&
          motivo_status == o.motivo_status &&
          data_hora_resposta == o.data_hora_resposta &&
          ultimo_nsu == o.ultimo_nsu &&
          max_nsu == o.max_nsu &&
          documentos == o.documentos
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [id, created_at, status, ambiente, uf_autor, tipo_consulta, dist_nsu, cons_nsu, cons_chave, codigo_status, motivo_status, data_hora_resposta, ultimo_nsu, max_nsu, documentos].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = NuvemfiscalSdkRuby.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
