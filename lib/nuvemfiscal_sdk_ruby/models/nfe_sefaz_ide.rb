=begin
#API Nuvem Fiscal

#API para automação comercial e documentos fiscais.

The version of the OpenAPI document: 2.44.0

Generated by: https://openapi-generator.tech
Generator version: 7.10.0

=end

require 'date'
require 'time'

module NuvemfiscalSdkRuby
  # identificação da NF-e.
  class NfeSefazIde
    # Código da UF do emitente do Documento Fiscal. Utilizar a Tabela do IBGE.
    attr_accessor :c_uf

    # Código numérico que compõe a Chave de Acesso. Número aleatório gerado pelo emitente para cada NF-e.    *Geramos automaticamente quando nenhum valor é informado.*
    attr_accessor :c_nf

    # Descrição da Natureza da Operação.
    attr_accessor :nat_op

    # Código do modelo do Documento Fiscal:  * 55 - NF-e  * 65 - NFC-e
    attr_accessor :mod

    # Série do Documento Fiscal:  * Série normal 0-889  * Avulsa Fisco 890-899  * SCAN 900-999
    attr_accessor :serie

    # Número do Documento Fiscal.
    attr_accessor :n_nf

    # Data e Hora de emissão do Documento Fiscal (AAAA-MM-DDThh:mm:ssTZD) ex.: 2012-09-01T13:00:00-03:00.
    attr_accessor :dh_emi

    # Data e Hora da saída ou de entrada da mercadoria / produto (AAAA-MM-DDTHH:mm:ssTZD).
    attr_accessor :dh_sai_ent

    # Tipo do Documento Fiscal:  * 0 - Entrada  * 1 - Saída
    attr_accessor :tp_nf

    # Identificador de Local de destino da operação:  * 1 - Interna  * 2 - Interestadual  * 3 - Exterior
    attr_accessor :id_dest

    # Código do Município de Ocorrência do Fato Gerador (utilizar a tabela do IBGE).
    attr_accessor :c_mun_fg

    # Formato de impressão do DANFE:  * 0 - Sem DANFE  * 1 - DANFe Retrato  * 2 - DANFe Paisagem  * 3 - DANFe Simplificado  * 4 - DANFe NFC-e  * 5 - DANFe NFC-e em mensagem eletrônica
    attr_accessor :tp_imp

    # Forma de emissão da NF-e  * 1 - Normal  * 2 - Contingência FS  * 3 - Regime Especial NFF (NT 2021.002)  * 4 - Contingência DPEC  * 5 - Contingência FSDA  * 6 - Contingência SVC - AN  * 7 - Contingência SVC - RS  * 9 - Contingência off-line NFC-e
    attr_accessor :tp_emis

    # Digito Verificador da Chave de Acesso da NF-e.    *Geramos automaticamente quando nenhum valor é informado.*
    attr_accessor :c_dv

    # Identificação do Ambiente:  * 1 - Produção  * 2 - Homologação
    attr_accessor :tp_amb

    # Finalidade da emissão da NF-e:  * 1 - NFe normal  * 2 - NFe complementar  * 3 - NFe de ajuste  * 4 - Devolução/Retorno
    attr_accessor :fin_nfe

    # Indica operação com consumidor final:  * 0 - Não  * 1 - Consumidor Final
    attr_accessor :ind_final

    # Indicador de presença do comprador no estabelecimento comercial no momento da operação:  * 0 - Não se aplica (ex.: Nota Fiscal complementar ou de ajuste)  * 1 - Operação presencial  * 2 - Não presencial, internet  * 3 - Não presencial, teleatendimento  * 4 - NFC-e entrega em domicílio  * 5 - Operação presencial, fora do estabelecimento  * 9 - Não presencial, outros
    attr_accessor :ind_pres

    # Indicador de intermediador/marketplace  * 0 - Operação sem intermediador (em site ou plataforma própria)  * 1 - Operação em site ou plataforma de terceiros (intermediadores/marketplace)
    attr_accessor :ind_intermed

    # Processo de emissão utilizado com a seguinte codificação:  * 0 - emissão de NF-e com aplicativo do contribuinte  * 1 - emissão de NF-e avulsa pelo Fisco  * 2 - emissão de NF-e avulsa, pelo contribuinte com seu certificado digital, através do site  do Fisco  * 3 - emissão de NF-e pelo contribuinte com aplicativo fornecido pelo Fisco
    attr_accessor :proc_emi

    # versão do aplicativo utilizado no processo de  emissão.
    attr_accessor :ver_proc

    # Informar a data e hora de entrada em contingência contingência no formato  (AAAA-MM-DDThh:mm:ssTZD) ex.: 2012-09-01T13:00:00-03:00.
    attr_accessor :dh_cont

    # Informar a Justificativa da entrada.
    attr_accessor :x_just

    attr_accessor :n_fref

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'c_uf' => :'cUF',
        :'c_nf' => :'cNF',
        :'nat_op' => :'natOp',
        :'mod' => :'mod',
        :'serie' => :'serie',
        :'n_nf' => :'nNF',
        :'dh_emi' => :'dhEmi',
        :'dh_sai_ent' => :'dhSaiEnt',
        :'tp_nf' => :'tpNF',
        :'id_dest' => :'idDest',
        :'c_mun_fg' => :'cMunFG',
        :'tp_imp' => :'tpImp',
        :'tp_emis' => :'tpEmis',
        :'c_dv' => :'cDV',
        :'tp_amb' => :'tpAmb',
        :'fin_nfe' => :'finNFe',
        :'ind_final' => :'indFinal',
        :'ind_pres' => :'indPres',
        :'ind_intermed' => :'indIntermed',
        :'proc_emi' => :'procEmi',
        :'ver_proc' => :'verProc',
        :'dh_cont' => :'dhCont',
        :'x_just' => :'xJust',
        :'n_fref' => :'NFref'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'c_uf' => :'Integer',
        :'c_nf' => :'String',
        :'nat_op' => :'String',
        :'mod' => :'Integer',
        :'serie' => :'Integer',
        :'n_nf' => :'Integer',
        :'dh_emi' => :'Time',
        :'dh_sai_ent' => :'Time',
        :'tp_nf' => :'Integer',
        :'id_dest' => :'Integer',
        :'c_mun_fg' => :'String',
        :'tp_imp' => :'Integer',
        :'tp_emis' => :'Integer',
        :'c_dv' => :'Integer',
        :'tp_amb' => :'Integer',
        :'fin_nfe' => :'Integer',
        :'ind_final' => :'Integer',
        :'ind_pres' => :'Integer',
        :'ind_intermed' => :'Integer',
        :'proc_emi' => :'Integer',
        :'ver_proc' => :'String',
        :'dh_cont' => :'Time',
        :'x_just' => :'String',
        :'n_fref' => :'Array<NfeSefazNFref>'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'c_uf',
        :'c_nf',
        :'nat_op',
        :'mod',
        :'serie',
        :'n_nf',
        :'dh_emi',
        :'dh_sai_ent',
        :'tp_nf',
        :'id_dest',
        :'c_mun_fg',
        :'tp_imp',
        :'tp_emis',
        :'c_dv',
        :'tp_amb',
        :'fin_nfe',
        :'ind_final',
        :'ind_pres',
        :'ind_intermed',
        :'proc_emi',
        :'ver_proc',
        :'dh_cont',
        :'x_just',
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `NuvemfiscalSdkRuby::NfeSefazIde` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `NuvemfiscalSdkRuby::NfeSefazIde`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'c_uf')
        self.c_uf = attributes[:'c_uf']
      else
        self.c_uf = nil
      end

      if attributes.key?(:'c_nf')
        self.c_nf = attributes[:'c_nf']
      end

      if attributes.key?(:'nat_op')
        self.nat_op = attributes[:'nat_op']
      else
        self.nat_op = nil
      end

      if attributes.key?(:'mod')
        self.mod = attributes[:'mod']
      end

      if attributes.key?(:'serie')
        self.serie = attributes[:'serie']
      else
        self.serie = nil
      end

      if attributes.key?(:'n_nf')
        self.n_nf = attributes[:'n_nf']
      else
        self.n_nf = nil
      end

      if attributes.key?(:'dh_emi')
        self.dh_emi = attributes[:'dh_emi']
      else
        self.dh_emi = nil
      end

      if attributes.key?(:'dh_sai_ent')
        self.dh_sai_ent = attributes[:'dh_sai_ent']
      end

      if attributes.key?(:'tp_nf')
        self.tp_nf = attributes[:'tp_nf']
      else
        self.tp_nf = nil
      end

      if attributes.key?(:'id_dest')
        self.id_dest = attributes[:'id_dest']
      else
        self.id_dest = nil
      end

      if attributes.key?(:'c_mun_fg')
        self.c_mun_fg = attributes[:'c_mun_fg']
      else
        self.c_mun_fg = nil
      end

      if attributes.key?(:'tp_imp')
        self.tp_imp = attributes[:'tp_imp']
      else
        self.tp_imp = nil
      end

      if attributes.key?(:'tp_emis')
        self.tp_emis = attributes[:'tp_emis']
      else
        self.tp_emis = nil
      end

      if attributes.key?(:'c_dv')
        self.c_dv = attributes[:'c_dv']
      end

      if attributes.key?(:'tp_amb')
        self.tp_amb = attributes[:'tp_amb']
      end

      if attributes.key?(:'fin_nfe')
        self.fin_nfe = attributes[:'fin_nfe']
      else
        self.fin_nfe = nil
      end

      if attributes.key?(:'ind_final')
        self.ind_final = attributes[:'ind_final']
      else
        self.ind_final = nil
      end

      if attributes.key?(:'ind_pres')
        self.ind_pres = attributes[:'ind_pres']
      else
        self.ind_pres = nil
      end

      if attributes.key?(:'ind_intermed')
        self.ind_intermed = attributes[:'ind_intermed']
      end

      if attributes.key?(:'proc_emi')
        self.proc_emi = attributes[:'proc_emi']
      else
        self.proc_emi = nil
      end

      if attributes.key?(:'ver_proc')
        self.ver_proc = attributes[:'ver_proc']
      else
        self.ver_proc = nil
      end

      if attributes.key?(:'dh_cont')
        self.dh_cont = attributes[:'dh_cont']
      end

      if attributes.key?(:'x_just')
        self.x_just = attributes[:'x_just']
      end

      if attributes.key?(:'n_fref')
        if (value = attributes[:'n_fref']).is_a?(Array)
          self.n_fref = value
        end
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      if @nat_op.to_s.length > 60
        invalid_properties.push('invalid value for "nat_op", the character length must be smaller than or equal to 60.')
      end

      if @nat_op.to_s.length < 1
        invalid_properties.push('invalid value for "nat_op", the character length must be great than or equal to 1.')
      end

      if @serie > 999
        invalid_properties.push('invalid value for "serie", must be smaller than or equal to 999.')
      end

      if @serie < 0
        invalid_properties.push('invalid value for "serie", must be greater than or equal to 0.')
      end

      if @n_nf > 999999999
        invalid_properties.push('invalid value for "n_nf", must be smaller than or equal to 999999999.')
      end

      if @n_nf < 1
        invalid_properties.push('invalid value for "n_nf", must be greater than or equal to 1.')
      end

      if !@c_dv.nil? && @c_dv > 9
        invalid_properties.push('invalid value for "c_dv", must be smaller than or equal to 9.')
      end

      if !@c_dv.nil? && @c_dv < 0
        invalid_properties.push('invalid value for "c_dv", must be greater than or equal to 0.')
      end

      if @ver_proc.to_s.length > 20
        invalid_properties.push('invalid value for "ver_proc", the character length must be smaller than or equal to 20.')
      end

      if @ver_proc.to_s.length < 1
        invalid_properties.push('invalid value for "ver_proc", the character length must be great than or equal to 1.')
      end

      if !@x_just.nil? && @x_just.to_s.length > 256
        invalid_properties.push('invalid value for "x_just", the character length must be smaller than or equal to 256.')
      end

      if !@x_just.nil? && @x_just.to_s.length < 15
        invalid_properties.push('invalid value for "x_just", the character length must be great than or equal to 15.')
      end

      if !@n_fref.nil? && @n_fref.length > 999
        invalid_properties.push('invalid value for "n_fref", number of items must be less than or equal to 999.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      return false if @nat_op.to_s.length > 60
      return false if @nat_op.to_s.length < 1
      return false if @serie > 999
      return false if @serie < 0
      return false if @n_nf > 999999999
      return false if @n_nf < 1
      return false if !@c_dv.nil? && @c_dv > 9
      return false if !@c_dv.nil? && @c_dv < 0
      return false if @ver_proc.to_s.length > 20
      return false if @ver_proc.to_s.length < 1
      return false if !@x_just.nil? && @x_just.to_s.length > 256
      return false if !@x_just.nil? && @x_just.to_s.length < 15
      return false if !@n_fref.nil? && @n_fref.length > 999
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] nat_op Value to be assigned
    def nat_op=(nat_op)
      if !nat_op.nil? && nat_op.to_s.length > 60
        fail ArgumentError, 'invalid value for "nat_op", the character length must be smaller than or equal to 60.'
      end

      if !nat_op.nil? && nat_op.to_s.length < 1
        fail ArgumentError, 'invalid value for "nat_op", the character length must be great than or equal to 1.'
      end

      @nat_op = nat_op
    end

    # Custom attribute writer method with validation
    # @param [Object] serie Value to be assigned
    def serie=(serie)
      if !serie.nil? && serie > 999
        fail ArgumentError, 'invalid value for "serie", must be smaller than or equal to 999.'
      end

      if !serie.nil? && serie < 0
        fail ArgumentError, 'invalid value for "serie", must be greater than or equal to 0.'
      end

      @serie = serie
    end

    # Custom attribute writer method with validation
    # @param [Object] n_nf Value to be assigned
    def n_nf=(n_nf)
      if !n_nf.nil? && n_nf > 999999999
        fail ArgumentError, 'invalid value for "n_nf", must be smaller than or equal to 999999999.'
      end

      if !n_nf.nil? && n_nf < 1
        fail ArgumentError, 'invalid value for "n_nf", must be greater than or equal to 1.'
      end

      @n_nf = n_nf
    end

    # Custom attribute writer method with validation
    # @param [Object] c_dv Value to be assigned
    def c_dv=(c_dv)
      if !c_dv.nil? && c_dv > 9
        fail ArgumentError, 'invalid value for "c_dv", must be smaller than or equal to 9.'
      end

      if !c_dv.nil? && c_dv < 0
        fail ArgumentError, 'invalid value for "c_dv", must be greater than or equal to 0.'
      end

      @c_dv = c_dv
    end

    # Custom attribute writer method with validation
    # @param [Object] ver_proc Value to be assigned
    def ver_proc=(ver_proc)
      if !ver_proc.nil? && ver_proc.to_s.length > 20
        fail ArgumentError, 'invalid value for "ver_proc", the character length must be smaller than or equal to 20.'
      end

      if !ver_proc.nil? && ver_proc.to_s.length < 1
        fail ArgumentError, 'invalid value for "ver_proc", the character length must be great than or equal to 1.'
      end

      @ver_proc = ver_proc
    end

    # Custom attribute writer method with validation
    # @param [Object] x_just Value to be assigned
    def x_just=(x_just)
      if !x_just.nil? && x_just.to_s.length > 256
        fail ArgumentError, 'invalid value for "x_just", the character length must be smaller than or equal to 256.'
      end

      if !x_just.nil? && x_just.to_s.length < 15
        fail ArgumentError, 'invalid value for "x_just", the character length must be great than or equal to 15.'
      end

      @x_just = x_just
    end

    # Custom attribute writer method with validation
    # @param [Object] n_fref Value to be assigned
    def n_fref=(n_fref)
      if n_fref.nil?
        fail ArgumentError, 'n_fref cannot be nil'
      end

      if n_fref.length > 999
        fail ArgumentError, 'invalid value for "n_fref", number of items must be less than or equal to 999.'
      end

      @n_fref = n_fref
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          c_uf == o.c_uf &&
          c_nf == o.c_nf &&
          nat_op == o.nat_op &&
          mod == o.mod &&
          serie == o.serie &&
          n_nf == o.n_nf &&
          dh_emi == o.dh_emi &&
          dh_sai_ent == o.dh_sai_ent &&
          tp_nf == o.tp_nf &&
          id_dest == o.id_dest &&
          c_mun_fg == o.c_mun_fg &&
          tp_imp == o.tp_imp &&
          tp_emis == o.tp_emis &&
          c_dv == o.c_dv &&
          tp_amb == o.tp_amb &&
          fin_nfe == o.fin_nfe &&
          ind_final == o.ind_final &&
          ind_pres == o.ind_pres &&
          ind_intermed == o.ind_intermed &&
          proc_emi == o.proc_emi &&
          ver_proc == o.ver_proc &&
          dh_cont == o.dh_cont &&
          x_just == o.x_just &&
          n_fref == o.n_fref
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [c_uf, c_nf, nat_op, mod, serie, n_nf, dh_emi, dh_sai_ent, tp_nf, id_dest, c_mun_fg, tp_imp, tp_emis, c_dv, tp_amb, fin_nfe, ind_final, ind_pres, ind_intermed, proc_emi, ver_proc, dh_cont, x_just, n_fref].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = NuvemfiscalSdkRuby.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
