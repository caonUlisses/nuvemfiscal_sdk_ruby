=begin
#API Nuvem Fiscal

#API para automação comercial e documentos fiscais.

The version of the OpenAPI document: 2.44.0

Generated by: https://openapi-generator.tech
Generator version: 7.10.0

=end

require 'date'
require 'time'

module NuvemfiscalSdkRuby
  # Veículos novos.
  class NfeSefazVeicProd
    # Tipo da Operação (1 - Venda concessionária; 2 - Faturamento direto; 3 - Venda direta; 0 - Outros).
    attr_accessor :tp_op

    # Chassi do veículo - VIN (código-identificação-veículo).
    attr_accessor :chassi

    # Cor do veículo (código de cada montadora).
    attr_accessor :c_cor

    # Descrição da cor.
    attr_accessor :x_cor

    # Potência máxima do motor do veículo em cavalo vapor (CV). (potência-veículo).
    attr_accessor :pot

    # Capacidade voluntária do motor expressa em centímetros cúbicos (CC). (cilindradas).
    attr_accessor :cilin

    # Peso líquido.
    attr_accessor :peso_l

    # Peso bruto.
    attr_accessor :peso_b

    # Serial (série).
    attr_accessor :n_serie

    # Tipo de combustível-Tabela RENAVAM: 01-Álcool  * 02 - Gasolina  * 03 - Diesel  * 16 - Álcool/Gas  * 17 - Gas./Álcool/GNV  * 18 - Gasolina/Elétrico
    attr_accessor :tp_comb

    # Número do motor.
    attr_accessor :n_motor

    # CMT-Capacidade Máxima de Tração - em Toneladas 4 casas decimais.
    attr_accessor :cmt

    # Distância entre eixos.
    attr_accessor :dist

    # Ano Modelo de Fabricação.
    attr_accessor :ano_mod

    # Ano de Fabricação.
    attr_accessor :ano_fab

    # Tipo de pintura.
    attr_accessor :tp_pint

    # Tipo de veículo (utilizar tabela RENAVAM).
    attr_accessor :tp_veic

    # Espécie de veículo (utilizar tabela RENAVAM).
    attr_accessor :esp_veic

    # Informa-se o veículo tem VIN (chassi) remarcado.  * R-Remarcado  * N-NormalVIN
    attr_accessor :vin

    # Condição do veículo (1 - acabado; 2 - inacabado; 3 - semi-acabado).
    attr_accessor :cond_veic

    # Código Marca Modelo (utilizar tabela RENAVAM).
    attr_accessor :c_mod

    # Código da Cor Segundo as regras de pré-cadastro do DENATRAN: 01-AMARELO  * 02 - AZUL  * 03 - BEGE  * 04 - BRANCA  * 05 - CINZA  * 06 - DOURADA  * 07 - GRENA  * 08 - LARANJA  * 09 - MARROM  * 10 - PRATA  * 11 - PRETA  * 12 - ROSA  * 13 - ROXA  * 14 - VERDE  * 15 - VERMELHA  * 16 - FANTASIA
    attr_accessor :c_cor_denatran

    # Quantidade máxima de permitida de passageiros sentados, inclusive motorista.
    attr_accessor :lota

    # Restrição  * 0 - Não há  * 1 - Alienação Fiduciária  * 2 - Arrendamento Mercantil  * 3 - Reserva de Domínio  * 4 - Penhor de Veículos  * 9 - outras
    attr_accessor :tp_rest

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'tp_op' => :'tpOp',
        :'chassi' => :'chassi',
        :'c_cor' => :'cCor',
        :'x_cor' => :'xCor',
        :'pot' => :'pot',
        :'cilin' => :'cilin',
        :'peso_l' => :'pesoL',
        :'peso_b' => :'pesoB',
        :'n_serie' => :'nSerie',
        :'tp_comb' => :'tpComb',
        :'n_motor' => :'nMotor',
        :'cmt' => :'CMT',
        :'dist' => :'dist',
        :'ano_mod' => :'anoMod',
        :'ano_fab' => :'anoFab',
        :'tp_pint' => :'tpPint',
        :'tp_veic' => :'tpVeic',
        :'esp_veic' => :'espVeic',
        :'vin' => :'VIN',
        :'cond_veic' => :'condVeic',
        :'c_mod' => :'cMod',
        :'c_cor_denatran' => :'cCorDENATRAN',
        :'lota' => :'lota',
        :'tp_rest' => :'tpRest'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'tp_op' => :'Integer',
        :'chassi' => :'String',
        :'c_cor' => :'String',
        :'x_cor' => :'String',
        :'pot' => :'String',
        :'cilin' => :'String',
        :'peso_l' => :'String',
        :'peso_b' => :'String',
        :'n_serie' => :'String',
        :'tp_comb' => :'String',
        :'n_motor' => :'String',
        :'cmt' => :'String',
        :'dist' => :'String',
        :'ano_mod' => :'Integer',
        :'ano_fab' => :'Integer',
        :'tp_pint' => :'String',
        :'tp_veic' => :'Integer',
        :'esp_veic' => :'Integer',
        :'vin' => :'String',
        :'cond_veic' => :'Integer',
        :'c_mod' => :'String',
        :'c_cor_denatran' => :'String',
        :'lota' => :'Integer',
        :'tp_rest' => :'Integer'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'tp_op',
        :'chassi',
        :'c_cor',
        :'x_cor',
        :'pot',
        :'cilin',
        :'peso_l',
        :'peso_b',
        :'n_serie',
        :'tp_comb',
        :'n_motor',
        :'cmt',
        :'dist',
        :'ano_mod',
        :'ano_fab',
        :'tp_pint',
        :'tp_veic',
        :'esp_veic',
        :'vin',
        :'cond_veic',
        :'c_mod',
        :'c_cor_denatran',
        :'lota',
        :'tp_rest'
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `NuvemfiscalSdkRuby::NfeSefazVeicProd` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `NuvemfiscalSdkRuby::NfeSefazVeicProd`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'tp_op')
        self.tp_op = attributes[:'tp_op']
      else
        self.tp_op = nil
      end

      if attributes.key?(:'chassi')
        self.chassi = attributes[:'chassi']
      else
        self.chassi = nil
      end

      if attributes.key?(:'c_cor')
        self.c_cor = attributes[:'c_cor']
      else
        self.c_cor = nil
      end

      if attributes.key?(:'x_cor')
        self.x_cor = attributes[:'x_cor']
      else
        self.x_cor = nil
      end

      if attributes.key?(:'pot')
        self.pot = attributes[:'pot']
      else
        self.pot = nil
      end

      if attributes.key?(:'cilin')
        self.cilin = attributes[:'cilin']
      else
        self.cilin = nil
      end

      if attributes.key?(:'peso_l')
        self.peso_l = attributes[:'peso_l']
      else
        self.peso_l = nil
      end

      if attributes.key?(:'peso_b')
        self.peso_b = attributes[:'peso_b']
      else
        self.peso_b = nil
      end

      if attributes.key?(:'n_serie')
        self.n_serie = attributes[:'n_serie']
      else
        self.n_serie = nil
      end

      if attributes.key?(:'tp_comb')
        self.tp_comb = attributes[:'tp_comb']
      else
        self.tp_comb = nil
      end

      if attributes.key?(:'n_motor')
        self.n_motor = attributes[:'n_motor']
      else
        self.n_motor = nil
      end

      if attributes.key?(:'cmt')
        self.cmt = attributes[:'cmt']
      else
        self.cmt = nil
      end

      if attributes.key?(:'dist')
        self.dist = attributes[:'dist']
      else
        self.dist = nil
      end

      if attributes.key?(:'ano_mod')
        self.ano_mod = attributes[:'ano_mod']
      else
        self.ano_mod = nil
      end

      if attributes.key?(:'ano_fab')
        self.ano_fab = attributes[:'ano_fab']
      else
        self.ano_fab = nil
      end

      if attributes.key?(:'tp_pint')
        self.tp_pint = attributes[:'tp_pint']
      else
        self.tp_pint = nil
      end

      if attributes.key?(:'tp_veic')
        self.tp_veic = attributes[:'tp_veic']
      else
        self.tp_veic = nil
      end

      if attributes.key?(:'esp_veic')
        self.esp_veic = attributes[:'esp_veic']
      else
        self.esp_veic = nil
      end

      if attributes.key?(:'vin')
        self.vin = attributes[:'vin']
      else
        self.vin = nil
      end

      if attributes.key?(:'cond_veic')
        self.cond_veic = attributes[:'cond_veic']
      else
        self.cond_veic = nil
      end

      if attributes.key?(:'c_mod')
        self.c_mod = attributes[:'c_mod']
      else
        self.c_mod = nil
      end

      if attributes.key?(:'c_cor_denatran')
        self.c_cor_denatran = attributes[:'c_cor_denatran']
      else
        self.c_cor_denatran = nil
      end

      if attributes.key?(:'lota')
        self.lota = attributes[:'lota']
      else
        self.lota = nil
      end

      if attributes.key?(:'tp_rest')
        self.tp_rest = attributes[:'tp_rest']
      else
        self.tp_rest = nil
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      if @chassi.to_s.length > 17
        invalid_properties.push('invalid value for "chassi", the character length must be smaller than or equal to 17.')
      end

      if @c_cor.to_s.length > 4
        invalid_properties.push('invalid value for "c_cor", the character length must be smaller than or equal to 4.')
      end

      if @c_cor.to_s.length < 1
        invalid_properties.push('invalid value for "c_cor", the character length must be great than or equal to 1.')
      end

      if @x_cor.to_s.length > 40
        invalid_properties.push('invalid value for "x_cor", the character length must be smaller than or equal to 40.')
      end

      if @x_cor.to_s.length < 1
        invalid_properties.push('invalid value for "x_cor", the character length must be great than or equal to 1.')
      end

      if @pot.to_s.length > 4
        invalid_properties.push('invalid value for "pot", the character length must be smaller than or equal to 4.')
      end

      if @pot.to_s.length < 1
        invalid_properties.push('invalid value for "pot", the character length must be great than or equal to 1.')
      end

      if @cilin.to_s.length > 4
        invalid_properties.push('invalid value for "cilin", the character length must be smaller than or equal to 4.')
      end

      if @cilin.to_s.length < 1
        invalid_properties.push('invalid value for "cilin", the character length must be great than or equal to 1.')
      end

      if @peso_l.to_s.length > 9
        invalid_properties.push('invalid value for "peso_l", the character length must be smaller than or equal to 9.')
      end

      if @peso_l.to_s.length < 1
        invalid_properties.push('invalid value for "peso_l", the character length must be great than or equal to 1.')
      end

      if @peso_b.to_s.length > 9
        invalid_properties.push('invalid value for "peso_b", the character length must be smaller than or equal to 9.')
      end

      if @peso_b.to_s.length < 1
        invalid_properties.push('invalid value for "peso_b", the character length must be great than or equal to 1.')
      end

      if @n_serie.to_s.length > 9
        invalid_properties.push('invalid value for "n_serie", the character length must be smaller than or equal to 9.')
      end

      if @n_serie.to_s.length < 1
        invalid_properties.push('invalid value for "n_serie", the character length must be great than or equal to 1.')
      end

      if @tp_comb.to_s.length > 2
        invalid_properties.push('invalid value for "tp_comb", the character length must be smaller than or equal to 2.')
      end

      if @tp_comb.to_s.length < 1
        invalid_properties.push('invalid value for "tp_comb", the character length must be great than or equal to 1.')
      end

      if @n_motor.to_s.length > 21
        invalid_properties.push('invalid value for "n_motor", the character length must be smaller than or equal to 21.')
      end

      if @n_motor.to_s.length < 1
        invalid_properties.push('invalid value for "n_motor", the character length must be great than or equal to 1.')
      end

      if @cmt.to_s.length > 9
        invalid_properties.push('invalid value for "cmt", the character length must be smaller than or equal to 9.')
      end

      if @cmt.to_s.length < 1
        invalid_properties.push('invalid value for "cmt", the character length must be great than or equal to 1.')
      end

      if @dist.to_s.length > 4
        invalid_properties.push('invalid value for "dist", the character length must be smaller than or equal to 4.')
      end

      if @dist.to_s.length < 1
        invalid_properties.push('invalid value for "dist", the character length must be great than or equal to 1.')
      end

      if @ano_mod > 9999
        invalid_properties.push('invalid value for "ano_mod", must be smaller than or equal to 9999.')
      end

      if @ano_mod < 0
        invalid_properties.push('invalid value for "ano_mod", must be greater than or equal to 0.')
      end

      if @ano_fab > 9999
        invalid_properties.push('invalid value for "ano_fab", must be smaller than or equal to 9999.')
      end

      if @ano_fab < 0
        invalid_properties.push('invalid value for "ano_fab", must be greater than or equal to 0.')
      end

      if @tp_pint.to_s.length > 1
        invalid_properties.push('invalid value for "tp_pint", the character length must be smaller than or equal to 1.')
      end

      if @tp_veic > 99
        invalid_properties.push('invalid value for "tp_veic", must be smaller than or equal to 99.')
      end

      if @tp_veic < 0
        invalid_properties.push('invalid value for "tp_veic", must be greater than or equal to 0.')
      end

      if @esp_veic > 9
        invalid_properties.push('invalid value for "esp_veic", must be smaller than or equal to 9.')
      end

      if @esp_veic < 0
        invalid_properties.push('invalid value for "esp_veic", must be greater than or equal to 0.')
      end

      if @vin.to_s.length > 1
        invalid_properties.push('invalid value for "vin", the character length must be smaller than or equal to 1.')
      end

      if @c_cor_denatran.to_s.length > 2
        invalid_properties.push('invalid value for "c_cor_denatran", the character length must be smaller than or equal to 2.')
      end

      if @c_cor_denatran.to_s.length < 1
        invalid_properties.push('invalid value for "c_cor_denatran", the character length must be great than or equal to 1.')
      end

      if @lota > 999
        invalid_properties.push('invalid value for "lota", must be smaller than or equal to 999.')
      end

      if @lota < 0
        invalid_properties.push('invalid value for "lota", must be greater than or equal to 0.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      return false if @chassi.to_s.length > 17
      return false if @c_cor.to_s.length > 4
      return false if @c_cor.to_s.length < 1
      return false if @x_cor.to_s.length > 40
      return false if @x_cor.to_s.length < 1
      return false if @pot.to_s.length > 4
      return false if @pot.to_s.length < 1
      return false if @cilin.to_s.length > 4
      return false if @cilin.to_s.length < 1
      return false if @peso_l.to_s.length > 9
      return false if @peso_l.to_s.length < 1
      return false if @peso_b.to_s.length > 9
      return false if @peso_b.to_s.length < 1
      return false if @n_serie.to_s.length > 9
      return false if @n_serie.to_s.length < 1
      return false if @tp_comb.to_s.length > 2
      return false if @tp_comb.to_s.length < 1
      return false if @n_motor.to_s.length > 21
      return false if @n_motor.to_s.length < 1
      return false if @cmt.to_s.length > 9
      return false if @cmt.to_s.length < 1
      return false if @dist.to_s.length > 4
      return false if @dist.to_s.length < 1
      return false if @ano_mod > 9999
      return false if @ano_mod < 0
      return false if @ano_fab > 9999
      return false if @ano_fab < 0
      return false if @tp_pint.to_s.length > 1
      return false if @tp_veic > 99
      return false if @tp_veic < 0
      return false if @esp_veic > 9
      return false if @esp_veic < 0
      return false if @vin.to_s.length > 1
      return false if @c_cor_denatran.to_s.length > 2
      return false if @c_cor_denatran.to_s.length < 1
      return false if @lota > 999
      return false if @lota < 0
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] chassi Value to be assigned
    def chassi=(chassi)
      if !chassi.nil? && chassi.to_s.length > 17
        fail ArgumentError, 'invalid value for "chassi", the character length must be smaller than or equal to 17.'
      end

      @chassi = chassi
    end

    # Custom attribute writer method with validation
    # @param [Object] c_cor Value to be assigned
    def c_cor=(c_cor)
      if !c_cor.nil? && c_cor.to_s.length > 4
        fail ArgumentError, 'invalid value for "c_cor", the character length must be smaller than or equal to 4.'
      end

      if !c_cor.nil? && c_cor.to_s.length < 1
        fail ArgumentError, 'invalid value for "c_cor", the character length must be great than or equal to 1.'
      end

      @c_cor = c_cor
    end

    # Custom attribute writer method with validation
    # @param [Object] x_cor Value to be assigned
    def x_cor=(x_cor)
      if !x_cor.nil? && x_cor.to_s.length > 40
        fail ArgumentError, 'invalid value for "x_cor", the character length must be smaller than or equal to 40.'
      end

      if !x_cor.nil? && x_cor.to_s.length < 1
        fail ArgumentError, 'invalid value for "x_cor", the character length must be great than or equal to 1.'
      end

      @x_cor = x_cor
    end

    # Custom attribute writer method with validation
    # @param [Object] pot Value to be assigned
    def pot=(pot)
      if !pot.nil? && pot.to_s.length > 4
        fail ArgumentError, 'invalid value for "pot", the character length must be smaller than or equal to 4.'
      end

      if !pot.nil? && pot.to_s.length < 1
        fail ArgumentError, 'invalid value for "pot", the character length must be great than or equal to 1.'
      end

      @pot = pot
    end

    # Custom attribute writer method with validation
    # @param [Object] cilin Value to be assigned
    def cilin=(cilin)
      if !cilin.nil? && cilin.to_s.length > 4
        fail ArgumentError, 'invalid value for "cilin", the character length must be smaller than or equal to 4.'
      end

      if !cilin.nil? && cilin.to_s.length < 1
        fail ArgumentError, 'invalid value for "cilin", the character length must be great than or equal to 1.'
      end

      @cilin = cilin
    end

    # Custom attribute writer method with validation
    # @param [Object] peso_l Value to be assigned
    def peso_l=(peso_l)
      if !peso_l.nil? && peso_l.to_s.length > 9
        fail ArgumentError, 'invalid value for "peso_l", the character length must be smaller than or equal to 9.'
      end

      if !peso_l.nil? && peso_l.to_s.length < 1
        fail ArgumentError, 'invalid value for "peso_l", the character length must be great than or equal to 1.'
      end

      @peso_l = peso_l
    end

    # Custom attribute writer method with validation
    # @param [Object] peso_b Value to be assigned
    def peso_b=(peso_b)
      if !peso_b.nil? && peso_b.to_s.length > 9
        fail ArgumentError, 'invalid value for "peso_b", the character length must be smaller than or equal to 9.'
      end

      if !peso_b.nil? && peso_b.to_s.length < 1
        fail ArgumentError, 'invalid value for "peso_b", the character length must be great than or equal to 1.'
      end

      @peso_b = peso_b
    end

    # Custom attribute writer method with validation
    # @param [Object] n_serie Value to be assigned
    def n_serie=(n_serie)
      if !n_serie.nil? && n_serie.to_s.length > 9
        fail ArgumentError, 'invalid value for "n_serie", the character length must be smaller than or equal to 9.'
      end

      if !n_serie.nil? && n_serie.to_s.length < 1
        fail ArgumentError, 'invalid value for "n_serie", the character length must be great than or equal to 1.'
      end

      @n_serie = n_serie
    end

    # Custom attribute writer method with validation
    # @param [Object] tp_comb Value to be assigned
    def tp_comb=(tp_comb)
      if !tp_comb.nil? && tp_comb.to_s.length > 2
        fail ArgumentError, 'invalid value for "tp_comb", the character length must be smaller than or equal to 2.'
      end

      if !tp_comb.nil? && tp_comb.to_s.length < 1
        fail ArgumentError, 'invalid value for "tp_comb", the character length must be great than or equal to 1.'
      end

      @tp_comb = tp_comb
    end

    # Custom attribute writer method with validation
    # @param [Object] n_motor Value to be assigned
    def n_motor=(n_motor)
      if !n_motor.nil? && n_motor.to_s.length > 21
        fail ArgumentError, 'invalid value for "n_motor", the character length must be smaller than or equal to 21.'
      end

      if !n_motor.nil? && n_motor.to_s.length < 1
        fail ArgumentError, 'invalid value for "n_motor", the character length must be great than or equal to 1.'
      end

      @n_motor = n_motor
    end

    # Custom attribute writer method with validation
    # @param [Object] cmt Value to be assigned
    def cmt=(cmt)
      if !cmt.nil? && cmt.to_s.length > 9
        fail ArgumentError, 'invalid value for "cmt", the character length must be smaller than or equal to 9.'
      end

      if !cmt.nil? && cmt.to_s.length < 1
        fail ArgumentError, 'invalid value for "cmt", the character length must be great than or equal to 1.'
      end

      @cmt = cmt
    end

    # Custom attribute writer method with validation
    # @param [Object] dist Value to be assigned
    def dist=(dist)
      if !dist.nil? && dist.to_s.length > 4
        fail ArgumentError, 'invalid value for "dist", the character length must be smaller than or equal to 4.'
      end

      if !dist.nil? && dist.to_s.length < 1
        fail ArgumentError, 'invalid value for "dist", the character length must be great than or equal to 1.'
      end

      @dist = dist
    end

    # Custom attribute writer method with validation
    # @param [Object] ano_mod Value to be assigned
    def ano_mod=(ano_mod)
      if !ano_mod.nil? && ano_mod > 9999
        fail ArgumentError, 'invalid value for "ano_mod", must be smaller than or equal to 9999.'
      end

      if !ano_mod.nil? && ano_mod < 0
        fail ArgumentError, 'invalid value for "ano_mod", must be greater than or equal to 0.'
      end

      @ano_mod = ano_mod
    end

    # Custom attribute writer method with validation
    # @param [Object] ano_fab Value to be assigned
    def ano_fab=(ano_fab)
      if !ano_fab.nil? && ano_fab > 9999
        fail ArgumentError, 'invalid value for "ano_fab", must be smaller than or equal to 9999.'
      end

      if !ano_fab.nil? && ano_fab < 0
        fail ArgumentError, 'invalid value for "ano_fab", must be greater than or equal to 0.'
      end

      @ano_fab = ano_fab
    end

    # Custom attribute writer method with validation
    # @param [Object] tp_pint Value to be assigned
    def tp_pint=(tp_pint)
      if !tp_pint.nil? && tp_pint.to_s.length > 1
        fail ArgumentError, 'invalid value for "tp_pint", the character length must be smaller than or equal to 1.'
      end

      @tp_pint = tp_pint
    end

    # Custom attribute writer method with validation
    # @param [Object] tp_veic Value to be assigned
    def tp_veic=(tp_veic)
      if !tp_veic.nil? && tp_veic > 99
        fail ArgumentError, 'invalid value for "tp_veic", must be smaller than or equal to 99.'
      end

      if !tp_veic.nil? && tp_veic < 0
        fail ArgumentError, 'invalid value for "tp_veic", must be greater than or equal to 0.'
      end

      @tp_veic = tp_veic
    end

    # Custom attribute writer method with validation
    # @param [Object] esp_veic Value to be assigned
    def esp_veic=(esp_veic)
      if !esp_veic.nil? && esp_veic > 9
        fail ArgumentError, 'invalid value for "esp_veic", must be smaller than or equal to 9.'
      end

      if !esp_veic.nil? && esp_veic < 0
        fail ArgumentError, 'invalid value for "esp_veic", must be greater than or equal to 0.'
      end

      @esp_veic = esp_veic
    end

    # Custom attribute writer method with validation
    # @param [Object] vin Value to be assigned
    def vin=(vin)
      if !vin.nil? && vin.to_s.length > 1
        fail ArgumentError, 'invalid value for "vin", the character length must be smaller than or equal to 1.'
      end

      @vin = vin
    end

    # Custom attribute writer method with validation
    # @param [Object] c_cor_denatran Value to be assigned
    def c_cor_denatran=(c_cor_denatran)
      if !c_cor_denatran.nil? && c_cor_denatran.to_s.length > 2
        fail ArgumentError, 'invalid value for "c_cor_denatran", the character length must be smaller than or equal to 2.'
      end

      if !c_cor_denatran.nil? && c_cor_denatran.to_s.length < 1
        fail ArgumentError, 'invalid value for "c_cor_denatran", the character length must be great than or equal to 1.'
      end

      @c_cor_denatran = c_cor_denatran
    end

    # Custom attribute writer method with validation
    # @param [Object] lota Value to be assigned
    def lota=(lota)
      if !lota.nil? && lota > 999
        fail ArgumentError, 'invalid value for "lota", must be smaller than or equal to 999.'
      end

      if !lota.nil? && lota < 0
        fail ArgumentError, 'invalid value for "lota", must be greater than or equal to 0.'
      end

      @lota = lota
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          tp_op == o.tp_op &&
          chassi == o.chassi &&
          c_cor == o.c_cor &&
          x_cor == o.x_cor &&
          pot == o.pot &&
          cilin == o.cilin &&
          peso_l == o.peso_l &&
          peso_b == o.peso_b &&
          n_serie == o.n_serie &&
          tp_comb == o.tp_comb &&
          n_motor == o.n_motor &&
          cmt == o.cmt &&
          dist == o.dist &&
          ano_mod == o.ano_mod &&
          ano_fab == o.ano_fab &&
          tp_pint == o.tp_pint &&
          tp_veic == o.tp_veic &&
          esp_veic == o.esp_veic &&
          vin == o.vin &&
          cond_veic == o.cond_veic &&
          c_mod == o.c_mod &&
          c_cor_denatran == o.c_cor_denatran &&
          lota == o.lota &&
          tp_rest == o.tp_rest
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [tp_op, chassi, c_cor, x_cor, pot, cilin, peso_l, peso_b, n_serie, tp_comb, n_motor, cmt, dist, ano_mod, ano_fab, tp_pint, tp_veic, esp_veic, vin, cond_veic, c_mod, c_cor_denatran, lota, tp_rest].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = NuvemfiscalSdkRuby.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
