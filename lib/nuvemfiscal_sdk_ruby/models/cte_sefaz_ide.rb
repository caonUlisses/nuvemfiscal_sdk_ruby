=begin
#API Nuvem Fiscal

#API para automação comercial e documentos fiscais.

The version of the OpenAPI document: 2.44.0

Generated by: https://openapi-generator.tech
Generator version: 7.10.0

=end

require 'date'
require 'time'

module NuvemfiscalSdkRuby
  # Identificação do CT-e.
  class CteSefazIde
    # Código da UF do emitente do CT-e.  Utilizar a Tabela do IBGE.
    attr_accessor :c_uf

    # Código numérico que compõe a Chave de Acesso.  Número aleatório gerado pelo emitente para cada CT-e, com o objetivo de evitar acessos indevidos ao documento.    *Geramos automaticamente quando nenhum valor é informado.*
    attr_accessor :c_ct

    # Código Fiscal de Operações e Prestações.
    attr_accessor :cfop

    # Natureza da Operação.
    attr_accessor :nat_op

    # Modelo do documento fiscal.  Utilizar o código 57 para identificação do CT-e, emitido em substituição aos modelos de conhecimentos em papel.
    attr_accessor :mod

    # Série do CT-e.  Preencher com \"0\" no caso de série única.
    attr_accessor :serie

    # Número do CT-e.
    attr_accessor :n_ct

    # Data e hora de emissão do CT-e.  Formato AAAA-MM-DDTHH:MM:DD TZD.
    attr_accessor :dh_emi

    # Formato de impressão do DACTE:  * 1 - Retrato  * 2 - Paisagem
    attr_accessor :tp_imp

    # Forma de emissão do CT-e.  Preencher com:  * 1 - Normal  * 3 - Regime Especial NFF  * 4 - EPEC pela SVC  * 5 - Contingência FSDA  * 7 - Autorização pela SVC-RS  * 8 - Autorização pela SVC-SP
    attr_accessor :tp_emis

    # Digito Verificador da chave de acesso do CT-e.  Informar o dígito  de controle da chave de acesso do CT-e, que deve ser calculado com a aplicação do algoritmo módulo 11 (base 2,9) da chave de acesso.    *Geramos automaticamente quando nenhum valor é informado.*
    attr_accessor :c_dv

    # Tipo do Ambiente:  * 1 - Produção  * 2 - Homologação
    attr_accessor :tp_amb

    # Tipo do CT-e.  Preencher com:  * 0 - CT-e Normal  * 1 - CT-e de Complemento de Valores  * 3 - CT-e de Substituição
    attr_accessor :tp_cte

    # Identificador do processo de emissão do CT-e.  Preencher com:  * 0 - emissão de CT-e com aplicativo do contribuinte  * 3 - emissão CT-e pelo contribuinte com aplicativo fornecido pelo SEBRAE
    attr_accessor :proc_emi

    # Versão do processo de emissão.  Iinformar a versão do aplicativo emissor de CT-e.
    attr_accessor :ver_proc

    # Indicador de CT-e Globalizado.  Informar valor 1 quando for Globalizado e não informar a tag quando não tratar de CT-e Globalizado.
    attr_accessor :ind_globalizado

    # Código do Município de envio do CT-e (de onde o documento foi transmitido).  Utilizar a tabela do IBGE. Informar 9999999 para as operações com o exterior.
    attr_accessor :c_mun_env

    # Nome do Município de envio do CT-e (de onde o documento foi transmitido).  Informar PAIS/Municipio para as operações com o exterior.
    attr_accessor :x_mun_env

    # Sigla da UF de envio do CT-e (de onde o documento foi transmitido).  Informar 'EX' para operações com o exterior.
    attr_accessor :uf_env

    # Modal. Preencher com:  * 01 - Rodoviário  * 02 - Aéreo  * 03 - Aquaviário  * 04 - Ferroviário  * 05 - Dutoviário  * 06 - Multimodal
    attr_accessor :modal

    # Tipo do Serviço.  Preencher com:  * 0 - Normal  * 1 - Subcontratação  * 2 - Redespacho  * 3 - Redespacho Intermediário  * 4 - Serviço Vinculado a Multimodal
    attr_accessor :tp_serv

    # Código do Município de início da prestação.  Utilizar a tabela do IBGE. Informar 9999999 para operações com o exterior.
    attr_accessor :c_mun_ini

    # Nome do Município do início da prestação.  Informar 'EXTERIOR' para operações com o exterior.
    attr_accessor :x_mun_ini

    # UF do início da prestação.  Informar 'EX' para operações com o exterior.
    attr_accessor :uf_ini

    # Código do Município de término da prestação.  Utilizar a tabela do IBGE. Informar 9999999 para operações com o exterior.
    attr_accessor :c_mun_fim

    # Nome do Município do término da prestação.  Informar 'EXTERIOR' para operações com o exterior.
    attr_accessor :x_mun_fim

    # UF do término da prestação.  Informar 'EX' para operações com o exterior.
    attr_accessor :uf_fim

    # Indicador se o Recebedor retira no Aeroporto, Filial, Porto ou Estação de Destino? Preencher com:  * 0 - Sim  * 1 - Não
    attr_accessor :retira

    # Detalhes do retira.
    attr_accessor :x_det_retira

    # Indicador do papel do tomador na prestação do serviço:  * 1 - Contribuinte ICMS  * 2 - Contribuinte isento de inscrição  * 9 - Não Contribuinte  Aplica-se ao tomador que for indicado no toma3 ou toma4.
    attr_accessor :ind_ie_toma

    attr_accessor :toma3

    attr_accessor :toma4

    # Data e Hora da entrada em contingência.  Informar a data e hora no formato AAAA-MM-DDTHH:MM:SS.
    attr_accessor :dh_cont

    # Justificativa da entrada em contingência.
    attr_accessor :x_just

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'c_uf' => :'cUF',
        :'c_ct' => :'cCT',
        :'cfop' => :'CFOP',
        :'nat_op' => :'natOp',
        :'mod' => :'mod',
        :'serie' => :'serie',
        :'n_ct' => :'nCT',
        :'dh_emi' => :'dhEmi',
        :'tp_imp' => :'tpImp',
        :'tp_emis' => :'tpEmis',
        :'c_dv' => :'cDV',
        :'tp_amb' => :'tpAmb',
        :'tp_cte' => :'tpCTe',
        :'proc_emi' => :'procEmi',
        :'ver_proc' => :'verProc',
        :'ind_globalizado' => :'indGlobalizado',
        :'c_mun_env' => :'cMunEnv',
        :'x_mun_env' => :'xMunEnv',
        :'uf_env' => :'UFEnv',
        :'modal' => :'modal',
        :'tp_serv' => :'tpServ',
        :'c_mun_ini' => :'cMunIni',
        :'x_mun_ini' => :'xMunIni',
        :'uf_ini' => :'UFIni',
        :'c_mun_fim' => :'cMunFim',
        :'x_mun_fim' => :'xMunFim',
        :'uf_fim' => :'UFFim',
        :'retira' => :'retira',
        :'x_det_retira' => :'xDetRetira',
        :'ind_ie_toma' => :'indIEToma',
        :'toma3' => :'toma3',
        :'toma4' => :'toma4',
        :'dh_cont' => :'dhCont',
        :'x_just' => :'xJust'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'c_uf' => :'Integer',
        :'c_ct' => :'String',
        :'cfop' => :'String',
        :'nat_op' => :'String',
        :'mod' => :'Integer',
        :'serie' => :'Integer',
        :'n_ct' => :'Integer',
        :'dh_emi' => :'Time',
        :'tp_imp' => :'Integer',
        :'tp_emis' => :'Integer',
        :'c_dv' => :'Integer',
        :'tp_amb' => :'Integer',
        :'tp_cte' => :'Integer',
        :'proc_emi' => :'Integer',
        :'ver_proc' => :'String',
        :'ind_globalizado' => :'Integer',
        :'c_mun_env' => :'String',
        :'x_mun_env' => :'String',
        :'uf_env' => :'String',
        :'modal' => :'String',
        :'tp_serv' => :'Integer',
        :'c_mun_ini' => :'String',
        :'x_mun_ini' => :'String',
        :'uf_ini' => :'String',
        :'c_mun_fim' => :'String',
        :'x_mun_fim' => :'String',
        :'uf_fim' => :'String',
        :'retira' => :'Integer',
        :'x_det_retira' => :'String',
        :'ind_ie_toma' => :'Integer',
        :'toma3' => :'CteSefazToma3',
        :'toma4' => :'CteSefazToma4',
        :'dh_cont' => :'Time',
        :'x_just' => :'String'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'c_uf',
        :'c_ct',
        :'cfop',
        :'nat_op',
        :'mod',
        :'serie',
        :'n_ct',
        :'dh_emi',
        :'tp_imp',
        :'tp_emis',
        :'c_dv',
        :'tp_amb',
        :'tp_cte',
        :'proc_emi',
        :'ver_proc',
        :'ind_globalizado',
        :'c_mun_env',
        :'x_mun_env',
        :'uf_env',
        :'modal',
        :'tp_serv',
        :'c_mun_ini',
        :'x_mun_ini',
        :'uf_ini',
        :'c_mun_fim',
        :'x_mun_fim',
        :'uf_fim',
        :'retira',
        :'x_det_retira',
        :'ind_ie_toma',
        :'dh_cont',
        :'x_just'
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `NuvemfiscalSdkRuby::CteSefazIde` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `NuvemfiscalSdkRuby::CteSefazIde`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'c_uf')
        self.c_uf = attributes[:'c_uf']
      else
        self.c_uf = nil
      end

      if attributes.key?(:'c_ct')
        self.c_ct = attributes[:'c_ct']
      end

      if attributes.key?(:'cfop')
        self.cfop = attributes[:'cfop']
      else
        self.cfop = nil
      end

      if attributes.key?(:'nat_op')
        self.nat_op = attributes[:'nat_op']
      else
        self.nat_op = nil
      end

      if attributes.key?(:'mod')
        self.mod = attributes[:'mod']
      end

      if attributes.key?(:'serie')
        self.serie = attributes[:'serie']
      else
        self.serie = nil
      end

      if attributes.key?(:'n_ct')
        self.n_ct = attributes[:'n_ct']
      else
        self.n_ct = nil
      end

      if attributes.key?(:'dh_emi')
        self.dh_emi = attributes[:'dh_emi']
      else
        self.dh_emi = nil
      end

      if attributes.key?(:'tp_imp')
        self.tp_imp = attributes[:'tp_imp']
      else
        self.tp_imp = nil
      end

      if attributes.key?(:'tp_emis')
        self.tp_emis = attributes[:'tp_emis']
      else
        self.tp_emis = nil
      end

      if attributes.key?(:'c_dv')
        self.c_dv = attributes[:'c_dv']
      end

      if attributes.key?(:'tp_amb')
        self.tp_amb = attributes[:'tp_amb']
      end

      if attributes.key?(:'tp_cte')
        self.tp_cte = attributes[:'tp_cte']
      else
        self.tp_cte = nil
      end

      if attributes.key?(:'proc_emi')
        self.proc_emi = attributes[:'proc_emi']
      else
        self.proc_emi = nil
      end

      if attributes.key?(:'ver_proc')
        self.ver_proc = attributes[:'ver_proc']
      else
        self.ver_proc = nil
      end

      if attributes.key?(:'ind_globalizado')
        self.ind_globalizado = attributes[:'ind_globalizado']
      end

      if attributes.key?(:'c_mun_env')
        self.c_mun_env = attributes[:'c_mun_env']
      else
        self.c_mun_env = nil
      end

      if attributes.key?(:'x_mun_env')
        self.x_mun_env = attributes[:'x_mun_env']
      else
        self.x_mun_env = nil
      end

      if attributes.key?(:'uf_env')
        self.uf_env = attributes[:'uf_env']
      else
        self.uf_env = nil
      end

      if attributes.key?(:'modal')
        self.modal = attributes[:'modal']
      else
        self.modal = nil
      end

      if attributes.key?(:'tp_serv')
        self.tp_serv = attributes[:'tp_serv']
      else
        self.tp_serv = nil
      end

      if attributes.key?(:'c_mun_ini')
        self.c_mun_ini = attributes[:'c_mun_ini']
      else
        self.c_mun_ini = nil
      end

      if attributes.key?(:'x_mun_ini')
        self.x_mun_ini = attributes[:'x_mun_ini']
      else
        self.x_mun_ini = nil
      end

      if attributes.key?(:'uf_ini')
        self.uf_ini = attributes[:'uf_ini']
      else
        self.uf_ini = nil
      end

      if attributes.key?(:'c_mun_fim')
        self.c_mun_fim = attributes[:'c_mun_fim']
      else
        self.c_mun_fim = nil
      end

      if attributes.key?(:'x_mun_fim')
        self.x_mun_fim = attributes[:'x_mun_fim']
      else
        self.x_mun_fim = nil
      end

      if attributes.key?(:'uf_fim')
        self.uf_fim = attributes[:'uf_fim']
      else
        self.uf_fim = nil
      end

      if attributes.key?(:'retira')
        self.retira = attributes[:'retira']
      else
        self.retira = nil
      end

      if attributes.key?(:'x_det_retira')
        self.x_det_retira = attributes[:'x_det_retira']
      end

      if attributes.key?(:'ind_ie_toma')
        self.ind_ie_toma = attributes[:'ind_ie_toma']
      else
        self.ind_ie_toma = nil
      end

      if attributes.key?(:'toma3')
        self.toma3 = attributes[:'toma3']
      end

      if attributes.key?(:'toma4')
        self.toma4 = attributes[:'toma4']
      end

      if attributes.key?(:'dh_cont')
        self.dh_cont = attributes[:'dh_cont']
      end

      if attributes.key?(:'x_just')
        self.x_just = attributes[:'x_just']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      if @nat_op.to_s.length > 60
        invalid_properties.push('invalid value for "nat_op", the character length must be smaller than or equal to 60.')
      end

      if @nat_op.to_s.length < 1
        invalid_properties.push('invalid value for "nat_op", the character length must be great than or equal to 1.')
      end

      if @serie > 999
        invalid_properties.push('invalid value for "serie", must be smaller than or equal to 999.')
      end

      if @serie < 0
        invalid_properties.push('invalid value for "serie", must be greater than or equal to 0.')
      end

      if @n_ct > 999999999
        invalid_properties.push('invalid value for "n_ct", must be smaller than or equal to 999999999.')
      end

      if @n_ct < 1
        invalid_properties.push('invalid value for "n_ct", must be greater than or equal to 1.')
      end

      if !@c_dv.nil? && @c_dv > 9
        invalid_properties.push('invalid value for "c_dv", must be smaller than or equal to 9.')
      end

      if !@c_dv.nil? && @c_dv < 0
        invalid_properties.push('invalid value for "c_dv", must be greater than or equal to 0.')
      end

      if @ver_proc.to_s.length > 20
        invalid_properties.push('invalid value for "ver_proc", the character length must be smaller than or equal to 20.')
      end

      if @ver_proc.to_s.length < 1
        invalid_properties.push('invalid value for "ver_proc", the character length must be great than or equal to 1.')
      end

      if @x_mun_env.to_s.length > 60
        invalid_properties.push('invalid value for "x_mun_env", the character length must be smaller than or equal to 60.')
      end

      if @x_mun_env.to_s.length < 2
        invalid_properties.push('invalid value for "x_mun_env", the character length must be great than or equal to 2.')
      end

      if @x_mun_ini.to_s.length > 60
        invalid_properties.push('invalid value for "x_mun_ini", the character length must be smaller than or equal to 60.')
      end

      if @x_mun_ini.to_s.length < 2
        invalid_properties.push('invalid value for "x_mun_ini", the character length must be great than or equal to 2.')
      end

      if @x_mun_fim.to_s.length > 60
        invalid_properties.push('invalid value for "x_mun_fim", the character length must be smaller than or equal to 60.')
      end

      if @x_mun_fim.to_s.length < 2
        invalid_properties.push('invalid value for "x_mun_fim", the character length must be great than or equal to 2.')
      end

      if !@x_det_retira.nil? && @x_det_retira.to_s.length > 160
        invalid_properties.push('invalid value for "x_det_retira", the character length must be smaller than or equal to 160.')
      end

      if !@x_det_retira.nil? && @x_det_retira.to_s.length < 1
        invalid_properties.push('invalid value for "x_det_retira", the character length must be great than or equal to 1.')
      end

      if !@x_just.nil? && @x_just.to_s.length > 256
        invalid_properties.push('invalid value for "x_just", the character length must be smaller than or equal to 256.')
      end

      if !@x_just.nil? && @x_just.to_s.length < 15
        invalid_properties.push('invalid value for "x_just", the character length must be great than or equal to 15.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      return false if @nat_op.to_s.length > 60
      return false if @nat_op.to_s.length < 1
      return false if @serie > 999
      return false if @serie < 0
      return false if @n_ct > 999999999
      return false if @n_ct < 1
      return false if !@c_dv.nil? && @c_dv > 9
      return false if !@c_dv.nil? && @c_dv < 0
      return false if @ver_proc.to_s.length > 20
      return false if @ver_proc.to_s.length < 1
      return false if @x_mun_env.to_s.length > 60
      return false if @x_mun_env.to_s.length < 2
      return false if @x_mun_ini.to_s.length > 60
      return false if @x_mun_ini.to_s.length < 2
      return false if @x_mun_fim.to_s.length > 60
      return false if @x_mun_fim.to_s.length < 2
      return false if !@x_det_retira.nil? && @x_det_retira.to_s.length > 160
      return false if !@x_det_retira.nil? && @x_det_retira.to_s.length < 1
      return false if !@x_just.nil? && @x_just.to_s.length > 256
      return false if !@x_just.nil? && @x_just.to_s.length < 15
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] nat_op Value to be assigned
    def nat_op=(nat_op)
      if !nat_op.nil? && nat_op.to_s.length > 60
        fail ArgumentError, 'invalid value for "nat_op", the character length must be smaller than or equal to 60.'
      end

      if !nat_op.nil? && nat_op.to_s.length < 1
        fail ArgumentError, 'invalid value for "nat_op", the character length must be great than or equal to 1.'
      end

      @nat_op = nat_op
    end

    # Custom attribute writer method with validation
    # @param [Object] serie Value to be assigned
    def serie=(serie)
      if !serie.nil? && serie > 999
        fail ArgumentError, 'invalid value for "serie", must be smaller than or equal to 999.'
      end

      if !serie.nil? && serie < 0
        fail ArgumentError, 'invalid value for "serie", must be greater than or equal to 0.'
      end

      @serie = serie
    end

    # Custom attribute writer method with validation
    # @param [Object] n_ct Value to be assigned
    def n_ct=(n_ct)
      if !n_ct.nil? && n_ct > 999999999
        fail ArgumentError, 'invalid value for "n_ct", must be smaller than or equal to 999999999.'
      end

      if !n_ct.nil? && n_ct < 1
        fail ArgumentError, 'invalid value for "n_ct", must be greater than or equal to 1.'
      end

      @n_ct = n_ct
    end

    # Custom attribute writer method with validation
    # @param [Object] c_dv Value to be assigned
    def c_dv=(c_dv)
      if !c_dv.nil? && c_dv > 9
        fail ArgumentError, 'invalid value for "c_dv", must be smaller than or equal to 9.'
      end

      if !c_dv.nil? && c_dv < 0
        fail ArgumentError, 'invalid value for "c_dv", must be greater than or equal to 0.'
      end

      @c_dv = c_dv
    end

    # Custom attribute writer method with validation
    # @param [Object] ver_proc Value to be assigned
    def ver_proc=(ver_proc)
      if !ver_proc.nil? && ver_proc.to_s.length > 20
        fail ArgumentError, 'invalid value for "ver_proc", the character length must be smaller than or equal to 20.'
      end

      if !ver_proc.nil? && ver_proc.to_s.length < 1
        fail ArgumentError, 'invalid value for "ver_proc", the character length must be great than or equal to 1.'
      end

      @ver_proc = ver_proc
    end

    # Custom attribute writer method with validation
    # @param [Object] x_mun_env Value to be assigned
    def x_mun_env=(x_mun_env)
      if !x_mun_env.nil? && x_mun_env.to_s.length > 60
        fail ArgumentError, 'invalid value for "x_mun_env", the character length must be smaller than or equal to 60.'
      end

      if !x_mun_env.nil? && x_mun_env.to_s.length < 2
        fail ArgumentError, 'invalid value for "x_mun_env", the character length must be great than or equal to 2.'
      end

      @x_mun_env = x_mun_env
    end

    # Custom attribute writer method with validation
    # @param [Object] x_mun_ini Value to be assigned
    def x_mun_ini=(x_mun_ini)
      if !x_mun_ini.nil? && x_mun_ini.to_s.length > 60
        fail ArgumentError, 'invalid value for "x_mun_ini", the character length must be smaller than or equal to 60.'
      end

      if !x_mun_ini.nil? && x_mun_ini.to_s.length < 2
        fail ArgumentError, 'invalid value for "x_mun_ini", the character length must be great than or equal to 2.'
      end

      @x_mun_ini = x_mun_ini
    end

    # Custom attribute writer method with validation
    # @param [Object] x_mun_fim Value to be assigned
    def x_mun_fim=(x_mun_fim)
      if !x_mun_fim.nil? && x_mun_fim.to_s.length > 60
        fail ArgumentError, 'invalid value for "x_mun_fim", the character length must be smaller than or equal to 60.'
      end

      if !x_mun_fim.nil? && x_mun_fim.to_s.length < 2
        fail ArgumentError, 'invalid value for "x_mun_fim", the character length must be great than or equal to 2.'
      end

      @x_mun_fim = x_mun_fim
    end

    # Custom attribute writer method with validation
    # @param [Object] x_det_retira Value to be assigned
    def x_det_retira=(x_det_retira)
      if !x_det_retira.nil? && x_det_retira.to_s.length > 160
        fail ArgumentError, 'invalid value for "x_det_retira", the character length must be smaller than or equal to 160.'
      end

      if !x_det_retira.nil? && x_det_retira.to_s.length < 1
        fail ArgumentError, 'invalid value for "x_det_retira", the character length must be great than or equal to 1.'
      end

      @x_det_retira = x_det_retira
    end

    # Custom attribute writer method with validation
    # @param [Object] x_just Value to be assigned
    def x_just=(x_just)
      if !x_just.nil? && x_just.to_s.length > 256
        fail ArgumentError, 'invalid value for "x_just", the character length must be smaller than or equal to 256.'
      end

      if !x_just.nil? && x_just.to_s.length < 15
        fail ArgumentError, 'invalid value for "x_just", the character length must be great than or equal to 15.'
      end

      @x_just = x_just
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          c_uf == o.c_uf &&
          c_ct == o.c_ct &&
          cfop == o.cfop &&
          nat_op == o.nat_op &&
          mod == o.mod &&
          serie == o.serie &&
          n_ct == o.n_ct &&
          dh_emi == o.dh_emi &&
          tp_imp == o.tp_imp &&
          tp_emis == o.tp_emis &&
          c_dv == o.c_dv &&
          tp_amb == o.tp_amb &&
          tp_cte == o.tp_cte &&
          proc_emi == o.proc_emi &&
          ver_proc == o.ver_proc &&
          ind_globalizado == o.ind_globalizado &&
          c_mun_env == o.c_mun_env &&
          x_mun_env == o.x_mun_env &&
          uf_env == o.uf_env &&
          modal == o.modal &&
          tp_serv == o.tp_serv &&
          c_mun_ini == o.c_mun_ini &&
          x_mun_ini == o.x_mun_ini &&
          uf_ini == o.uf_ini &&
          c_mun_fim == o.c_mun_fim &&
          x_mun_fim == o.x_mun_fim &&
          uf_fim == o.uf_fim &&
          retira == o.retira &&
          x_det_retira == o.x_det_retira &&
          ind_ie_toma == o.ind_ie_toma &&
          toma3 == o.toma3 &&
          toma4 == o.toma4 &&
          dh_cont == o.dh_cont &&
          x_just == o.x_just
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [c_uf, c_ct, cfop, nat_op, mod, serie, n_ct, dh_emi, tp_imp, tp_emis, c_dv, tp_amb, tp_cte, proc_emi, ver_proc, ind_globalizado, c_mun_env, x_mun_env, uf_env, modal, tp_serv, c_mun_ini, x_mun_ini, uf_ini, c_mun_fim, x_mun_fim, uf_fim, retira, x_det_retira, ind_ie_toma, toma3, toma4, dh_cont, x_just].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = NuvemfiscalSdkRuby.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
