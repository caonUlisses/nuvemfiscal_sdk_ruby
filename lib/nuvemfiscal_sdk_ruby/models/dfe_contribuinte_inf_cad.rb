=begin
#API Nuvem Fiscal

#API para automação comercial e documentos fiscais.

The version of the OpenAPI document: 2.44.0

Generated by: https://openapi-generator.tech
Generator version: 7.10.0

=end

require 'date'
require 'time'

module NuvemfiscalSdkRuby
  # Informações cadastrais do contribuinte consultado.
  class DfeContribuinteInfCad
    # Número da Inscrição Estadual do contribuinte.
    attr_accessor :ie

    # Número do CNPJ  do contribuinte.
    attr_accessor :cnpj

    # Número do CPF do contribuinte.
    attr_accessor :cpf

    # Sigla da UF de localização do contribuinte. Em algumas situações, a UF de localização pode ser diferente da UF consultada. Ex. IE de Substituto Tributário.
    attr_accessor :uf

    # Situação cadastral do contribuinte:  * 0 - não habilitado  * 1 - habilitado
    attr_accessor :situacao_cadastral

    # Indicador de contribuinte credenciado a emitir NF-e.  * 0 - Não credenciado para emissão da NF-e  * 1 - Credenciado  * 2 - Credenciado com obrigatoriedade para todas operações  * 3 - Credenciado com obrigatoriedade parcial  * 4 - a SEFAZ não fornece a informação  Este indicador significa apenas que o contribuinte é credenciado para emitir NF-e na SEFAZ consultada.
    attr_accessor :indicador_nfe

    # Indicador de contribuinte credenciado a emitir CT-e.  * 0 - Não credenciado para emissão da CT-e  * 1 - Credenciado  * 2 - Credenciado com obrigatoriedade para todas operações  * 3 - Credenciado com obrigatoriedade parcial  * 4 - a SEFAZ não fornece a informação  Este indicador significa apenas que o contribuinte é credenciado para emitir CT-e na SEFAZ consultada.
    attr_accessor :indicador_cte

    # Razão Social ou nome do contribuinte.
    attr_accessor :nome_razao_social

    # Razão Social ou nome do contribuinte.
    attr_accessor :nome_fantasia

    # Regime de Apuração do ICMS.
    attr_accessor :regime_apuracao_icms

    # CNAE Fiscal do contribuinte.
    attr_accessor :cnae

    # Data de início de atividades do contribuinte.
    attr_accessor :data_inicio_atividade

    # Data da última modificação da situação cadastral do contribuinte.
    attr_accessor :data_situacao_cadastral

    # Data de ocorrência da baixa do contribuinte.
    attr_accessor :data_fim_atividade

    # Inscrição Estadual Única.
    attr_accessor :ie_unica

    # Inscrição Estadual atual.
    attr_accessor :ie_atual

    attr_accessor :endereco

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'ie' => :'ie',
        :'cnpj' => :'cnpj',
        :'cpf' => :'cpf',
        :'uf' => :'uf',
        :'situacao_cadastral' => :'situacao_cadastral',
        :'indicador_nfe' => :'indicador_nfe',
        :'indicador_cte' => :'indicador_cte',
        :'nome_razao_social' => :'nome_razao_social',
        :'nome_fantasia' => :'nome_fantasia',
        :'regime_apuracao_icms' => :'regime_apuracao_icms',
        :'cnae' => :'cnae',
        :'data_inicio_atividade' => :'data_inicio_atividade',
        :'data_situacao_cadastral' => :'data_situacao_cadastral',
        :'data_fim_atividade' => :'data_fim_atividade',
        :'ie_unica' => :'ie_unica',
        :'ie_atual' => :'ie_atual',
        :'endereco' => :'endereco'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'ie' => :'String',
        :'cnpj' => :'String',
        :'cpf' => :'String',
        :'uf' => :'String',
        :'situacao_cadastral' => :'Integer',
        :'indicador_nfe' => :'Integer',
        :'indicador_cte' => :'Integer',
        :'nome_razao_social' => :'String',
        :'nome_fantasia' => :'String',
        :'regime_apuracao_icms' => :'String',
        :'cnae' => :'String',
        :'data_inicio_atividade' => :'Date',
        :'data_situacao_cadastral' => :'Date',
        :'data_fim_atividade' => :'Date',
        :'ie_unica' => :'String',
        :'ie_atual' => :'String',
        :'endereco' => :'DfeContribuinteEndereco'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'ie',
        :'cnpj',
        :'cpf',
        :'uf',
        :'situacao_cadastral',
        :'indicador_nfe',
        :'indicador_cte',
        :'nome_razao_social',
        :'nome_fantasia',
        :'regime_apuracao_icms',
        :'cnae',
        :'data_inicio_atividade',
        :'data_situacao_cadastral',
        :'data_fim_atividade',
        :'ie_unica',
        :'ie_atual',
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `NuvemfiscalSdkRuby::DfeContribuinteInfCad` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `NuvemfiscalSdkRuby::DfeContribuinteInfCad`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'ie')
        self.ie = attributes[:'ie']
      else
        self.ie = nil
      end

      if attributes.key?(:'cnpj')
        self.cnpj = attributes[:'cnpj']
      end

      if attributes.key?(:'cpf')
        self.cpf = attributes[:'cpf']
      end

      if attributes.key?(:'uf')
        self.uf = attributes[:'uf']
      else
        self.uf = nil
      end

      if attributes.key?(:'situacao_cadastral')
        self.situacao_cadastral = attributes[:'situacao_cadastral']
      else
        self.situacao_cadastral = nil
      end

      if attributes.key?(:'indicador_nfe')
        self.indicador_nfe = attributes[:'indicador_nfe']
      else
        self.indicador_nfe = nil
      end

      if attributes.key?(:'indicador_cte')
        self.indicador_cte = attributes[:'indicador_cte']
      else
        self.indicador_cte = nil
      end

      if attributes.key?(:'nome_razao_social')
        self.nome_razao_social = attributes[:'nome_razao_social']
      else
        self.nome_razao_social = nil
      end

      if attributes.key?(:'nome_fantasia')
        self.nome_fantasia = attributes[:'nome_fantasia']
      end

      if attributes.key?(:'regime_apuracao_icms')
        self.regime_apuracao_icms = attributes[:'regime_apuracao_icms']
      end

      if attributes.key?(:'cnae')
        self.cnae = attributes[:'cnae']
      end

      if attributes.key?(:'data_inicio_atividade')
        self.data_inicio_atividade = attributes[:'data_inicio_atividade']
      end

      if attributes.key?(:'data_situacao_cadastral')
        self.data_situacao_cadastral = attributes[:'data_situacao_cadastral']
      end

      if attributes.key?(:'data_fim_atividade')
        self.data_fim_atividade = attributes[:'data_fim_atividade']
      end

      if attributes.key?(:'ie_unica')
        self.ie_unica = attributes[:'ie_unica']
      end

      if attributes.key?(:'ie_atual')
        self.ie_atual = attributes[:'ie_atual']
      end

      if attributes.key?(:'endereco')
        self.endereco = attributes[:'endereco']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      if @nome_razao_social.to_s.length > 60
        invalid_properties.push('invalid value for "nome_razao_social", the character length must be smaller than or equal to 60.')
      end

      if @nome_razao_social.to_s.length < 1
        invalid_properties.push('invalid value for "nome_razao_social", the character length must be great than or equal to 1.')
      end

      if !@nome_fantasia.nil? && @nome_fantasia.to_s.length > 60
        invalid_properties.push('invalid value for "nome_fantasia", the character length must be smaller than or equal to 60.')
      end

      if !@nome_fantasia.nil? && @nome_fantasia.to_s.length < 1
        invalid_properties.push('invalid value for "nome_fantasia", the character length must be great than or equal to 1.')
      end

      if !@regime_apuracao_icms.nil? && @regime_apuracao_icms.to_s.length > 60
        invalid_properties.push('invalid value for "regime_apuracao_icms", the character length must be smaller than or equal to 60.')
      end

      if !@regime_apuracao_icms.nil? && @regime_apuracao_icms.to_s.length < 1
        invalid_properties.push('invalid value for "regime_apuracao_icms", the character length must be great than or equal to 1.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      return false if @nome_razao_social.to_s.length > 60
      return false if @nome_razao_social.to_s.length < 1
      return false if !@nome_fantasia.nil? && @nome_fantasia.to_s.length > 60
      return false if !@nome_fantasia.nil? && @nome_fantasia.to_s.length < 1
      return false if !@regime_apuracao_icms.nil? && @regime_apuracao_icms.to_s.length > 60
      return false if !@regime_apuracao_icms.nil? && @regime_apuracao_icms.to_s.length < 1
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] nome_razao_social Value to be assigned
    def nome_razao_social=(nome_razao_social)
      if !nome_razao_social.nil? && nome_razao_social.to_s.length > 60
        fail ArgumentError, 'invalid value for "nome_razao_social", the character length must be smaller than or equal to 60.'
      end

      if !nome_razao_social.nil? && nome_razao_social.to_s.length < 1
        fail ArgumentError, 'invalid value for "nome_razao_social", the character length must be great than or equal to 1.'
      end

      @nome_razao_social = nome_razao_social
    end

    # Custom attribute writer method with validation
    # @param [Object] nome_fantasia Value to be assigned
    def nome_fantasia=(nome_fantasia)
      if !nome_fantasia.nil? && nome_fantasia.to_s.length > 60
        fail ArgumentError, 'invalid value for "nome_fantasia", the character length must be smaller than or equal to 60.'
      end

      if !nome_fantasia.nil? && nome_fantasia.to_s.length < 1
        fail ArgumentError, 'invalid value for "nome_fantasia", the character length must be great than or equal to 1.'
      end

      @nome_fantasia = nome_fantasia
    end

    # Custom attribute writer method with validation
    # @param [Object] regime_apuracao_icms Value to be assigned
    def regime_apuracao_icms=(regime_apuracao_icms)
      if !regime_apuracao_icms.nil? && regime_apuracao_icms.to_s.length > 60
        fail ArgumentError, 'invalid value for "regime_apuracao_icms", the character length must be smaller than or equal to 60.'
      end

      if !regime_apuracao_icms.nil? && regime_apuracao_icms.to_s.length < 1
        fail ArgumentError, 'invalid value for "regime_apuracao_icms", the character length must be great than or equal to 1.'
      end

      @regime_apuracao_icms = regime_apuracao_icms
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          ie == o.ie &&
          cnpj == o.cnpj &&
          cpf == o.cpf &&
          uf == o.uf &&
          situacao_cadastral == o.situacao_cadastral &&
          indicador_nfe == o.indicador_nfe &&
          indicador_cte == o.indicador_cte &&
          nome_razao_social == o.nome_razao_social &&
          nome_fantasia == o.nome_fantasia &&
          regime_apuracao_icms == o.regime_apuracao_icms &&
          cnae == o.cnae &&
          data_inicio_atividade == o.data_inicio_atividade &&
          data_situacao_cadastral == o.data_situacao_cadastral &&
          data_fim_atividade == o.data_fim_atividade &&
          ie_unica == o.ie_unica &&
          ie_atual == o.ie_atual &&
          endereco == o.endereco
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [ie, cnpj, cpf, uf, situacao_cadastral, indicador_nfe, indicador_cte, nome_razao_social, nome_fantasia, regime_apuracao_icms, cnae, data_inicio_atividade, data_situacao_cadastral, data_fim_atividade, ie_unica, ie_atual, endereco].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = NuvemfiscalSdkRuby.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
