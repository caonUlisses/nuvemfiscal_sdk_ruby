=begin
#API Nuvem Fiscal

#API para automação comercial e documentos fiscais.

The version of the OpenAPI document: 2.44.0

Generated by: https://openapi-generator.tech
Generator version: 7.10.0

=end

require 'date'
require 'time'

module NuvemfiscalSdkRuby
  # Informações das NF.  Este grupo deve ser informado quando o documento originário for NF.
  class CteSefazInfNF
    # Número do Romaneio da NF.
    attr_accessor :n_roma

    # Número do Pedido da NF.
    attr_accessor :n_ped

    # Modelo da Nota Fiscal.  Preencher com:  * 01 - NF Modelo 01/1A e Avulsa  * 04 - NF de Produtor
    attr_accessor :mod

    # Série.
    attr_accessor :serie

    # Número.
    attr_accessor :n_doc

    # Data de Emissão.  Formato AAAA-MM-DD.
    attr_accessor :d_emi

    # Valor da Base de Cálculo do ICMS.
    attr_accessor :v_bc

    # Valor Total do ICMS.
    attr_accessor :v_icms

    # Valor da Base de Cálculo do ICMS ST.
    attr_accessor :v_bcst

    # Valor Total do ICMS ST.
    attr_accessor :v_st

    # Valor Total dos Produtos.
    attr_accessor :v_prod

    # Valor Total da NF.
    attr_accessor :v_nf

    # CFOP Predominante.  CFOP da NF ou, na existência de mais de um, predominância pelo critério de valor econômico.
    attr_accessor :n_cfop

    # Peso total em Kg.
    attr_accessor :n_peso

    # PIN SUFRAMA.  PIN atribuído pela SUFRAMA para a operação.
    attr_accessor :pin

    # Data prevista de entrega.  Formato AAAA-MM-DD.
    attr_accessor :d_prev

    attr_accessor :inf_unid_carga

    attr_accessor :inf_unid_transp

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'n_roma' => :'nRoma',
        :'n_ped' => :'nPed',
        :'mod' => :'mod',
        :'serie' => :'serie',
        :'n_doc' => :'nDoc',
        :'d_emi' => :'dEmi',
        :'v_bc' => :'vBC',
        :'v_icms' => :'vICMS',
        :'v_bcst' => :'vBCST',
        :'v_st' => :'vST',
        :'v_prod' => :'vProd',
        :'v_nf' => :'vNF',
        :'n_cfop' => :'nCFOP',
        :'n_peso' => :'nPeso',
        :'pin' => :'PIN',
        :'d_prev' => :'dPrev',
        :'inf_unid_carga' => :'infUnidCarga',
        :'inf_unid_transp' => :'infUnidTransp'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'n_roma' => :'String',
        :'n_ped' => :'String',
        :'mod' => :'String',
        :'serie' => :'String',
        :'n_doc' => :'String',
        :'d_emi' => :'Date',
        :'v_bc' => :'Float',
        :'v_icms' => :'Float',
        :'v_bcst' => :'Float',
        :'v_st' => :'Float',
        :'v_prod' => :'Float',
        :'v_nf' => :'Float',
        :'n_cfop' => :'String',
        :'n_peso' => :'Float',
        :'pin' => :'String',
        :'d_prev' => :'Date',
        :'inf_unid_carga' => :'Array<CteSefazUnidCarga>',
        :'inf_unid_transp' => :'Array<CteSefazUnidadeTransp>'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'n_roma',
        :'n_ped',
        :'mod',
        :'serie',
        :'n_doc',
        :'d_emi',
        :'v_bc',
        :'v_icms',
        :'v_bcst',
        :'v_st',
        :'v_prod',
        :'v_nf',
        :'n_cfop',
        :'n_peso',
        :'pin',
        :'d_prev',
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `NuvemfiscalSdkRuby::CteSefazInfNF` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `NuvemfiscalSdkRuby::CteSefazInfNF`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'n_roma')
        self.n_roma = attributes[:'n_roma']
      end

      if attributes.key?(:'n_ped')
        self.n_ped = attributes[:'n_ped']
      end

      if attributes.key?(:'mod')
        self.mod = attributes[:'mod']
      else
        self.mod = nil
      end

      if attributes.key?(:'serie')
        self.serie = attributes[:'serie']
      else
        self.serie = nil
      end

      if attributes.key?(:'n_doc')
        self.n_doc = attributes[:'n_doc']
      else
        self.n_doc = nil
      end

      if attributes.key?(:'d_emi')
        self.d_emi = attributes[:'d_emi']
      else
        self.d_emi = nil
      end

      if attributes.key?(:'v_bc')
        self.v_bc = attributes[:'v_bc']
      else
        self.v_bc = nil
      end

      if attributes.key?(:'v_icms')
        self.v_icms = attributes[:'v_icms']
      else
        self.v_icms = nil
      end

      if attributes.key?(:'v_bcst')
        self.v_bcst = attributes[:'v_bcst']
      else
        self.v_bcst = nil
      end

      if attributes.key?(:'v_st')
        self.v_st = attributes[:'v_st']
      else
        self.v_st = nil
      end

      if attributes.key?(:'v_prod')
        self.v_prod = attributes[:'v_prod']
      else
        self.v_prod = nil
      end

      if attributes.key?(:'v_nf')
        self.v_nf = attributes[:'v_nf']
      else
        self.v_nf = nil
      end

      if attributes.key?(:'n_cfop')
        self.n_cfop = attributes[:'n_cfop']
      else
        self.n_cfop = nil
      end

      if attributes.key?(:'n_peso')
        self.n_peso = attributes[:'n_peso']
      end

      if attributes.key?(:'pin')
        self.pin = attributes[:'pin']
      end

      if attributes.key?(:'d_prev')
        self.d_prev = attributes[:'d_prev']
      end

      if attributes.key?(:'inf_unid_carga')
        if (value = attributes[:'inf_unid_carga']).is_a?(Array)
          self.inf_unid_carga = value
        end
      end

      if attributes.key?(:'inf_unid_transp')
        if (value = attributes[:'inf_unid_transp']).is_a?(Array)
          self.inf_unid_transp = value
        end
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      if !@n_roma.nil? && @n_roma.to_s.length > 20
        invalid_properties.push('invalid value for "n_roma", the character length must be smaller than or equal to 20.')
      end

      if !@n_roma.nil? && @n_roma.to_s.length < 1
        invalid_properties.push('invalid value for "n_roma", the character length must be great than or equal to 1.')
      end

      if !@n_ped.nil? && @n_ped.to_s.length > 20
        invalid_properties.push('invalid value for "n_ped", the character length must be smaller than or equal to 20.')
      end

      if !@n_ped.nil? && @n_ped.to_s.length < 1
        invalid_properties.push('invalid value for "n_ped", the character length must be great than or equal to 1.')
      end

      if @serie.to_s.length > 3
        invalid_properties.push('invalid value for "serie", the character length must be smaller than or equal to 3.')
      end

      if @serie.to_s.length < 1
        invalid_properties.push('invalid value for "serie", the character length must be great than or equal to 1.')
      end

      if @n_doc.to_s.length > 20
        invalid_properties.push('invalid value for "n_doc", the character length must be smaller than or equal to 20.')
      end

      if @n_doc.to_s.length < 1
        invalid_properties.push('invalid value for "n_doc", the character length must be great than or equal to 1.')
      end

      if @v_bc < 0
        invalid_properties.push('invalid value for "v_bc", must be greater than or equal to 0.')
      end

      if @v_icms < 0
        invalid_properties.push('invalid value for "v_icms", must be greater than or equal to 0.')
      end

      if @v_bcst < 0
        invalid_properties.push('invalid value for "v_bcst", must be greater than or equal to 0.')
      end

      if @v_st < 0
        invalid_properties.push('invalid value for "v_st", must be greater than or equal to 0.')
      end

      if @v_prod < 0
        invalid_properties.push('invalid value for "v_prod", must be greater than or equal to 0.')
      end

      if @v_nf < 0
        invalid_properties.push('invalid value for "v_nf", must be greater than or equal to 0.')
      end

      if !@n_peso.nil? && @n_peso <= 0
        invalid_properties.push('invalid value for "n_peso", must be greater than 0.')
      end

      if !@pin.nil? && @pin.to_s.length > 9
        invalid_properties.push('invalid value for "pin", the character length must be smaller than or equal to 9.')
      end

      if !@pin.nil? && @pin.to_s.length < 2
        invalid_properties.push('invalid value for "pin", the character length must be great than or equal to 2.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      return false if !@n_roma.nil? && @n_roma.to_s.length > 20
      return false if !@n_roma.nil? && @n_roma.to_s.length < 1
      return false if !@n_ped.nil? && @n_ped.to_s.length > 20
      return false if !@n_ped.nil? && @n_ped.to_s.length < 1
      return false if @serie.to_s.length > 3
      return false if @serie.to_s.length < 1
      return false if @n_doc.to_s.length > 20
      return false if @n_doc.to_s.length < 1
      return false if @v_bc < 0
      return false if @v_icms < 0
      return false if @v_bcst < 0
      return false if @v_st < 0
      return false if @v_prod < 0
      return false if @v_nf < 0
      return false if !@n_peso.nil? && @n_peso <= 0
      return false if !@pin.nil? && @pin.to_s.length > 9
      return false if !@pin.nil? && @pin.to_s.length < 2
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] n_roma Value to be assigned
    def n_roma=(n_roma)
      if !n_roma.nil? && n_roma.to_s.length > 20
        fail ArgumentError, 'invalid value for "n_roma", the character length must be smaller than or equal to 20.'
      end

      if !n_roma.nil? && n_roma.to_s.length < 1
        fail ArgumentError, 'invalid value for "n_roma", the character length must be great than or equal to 1.'
      end

      @n_roma = n_roma
    end

    # Custom attribute writer method with validation
    # @param [Object] n_ped Value to be assigned
    def n_ped=(n_ped)
      if !n_ped.nil? && n_ped.to_s.length > 20
        fail ArgumentError, 'invalid value for "n_ped", the character length must be smaller than or equal to 20.'
      end

      if !n_ped.nil? && n_ped.to_s.length < 1
        fail ArgumentError, 'invalid value for "n_ped", the character length must be great than or equal to 1.'
      end

      @n_ped = n_ped
    end

    # Custom attribute writer method with validation
    # @param [Object] serie Value to be assigned
    def serie=(serie)
      if !serie.nil? && serie.to_s.length > 3
        fail ArgumentError, 'invalid value for "serie", the character length must be smaller than or equal to 3.'
      end

      if !serie.nil? && serie.to_s.length < 1
        fail ArgumentError, 'invalid value for "serie", the character length must be great than or equal to 1.'
      end

      @serie = serie
    end

    # Custom attribute writer method with validation
    # @param [Object] n_doc Value to be assigned
    def n_doc=(n_doc)
      if !n_doc.nil? && n_doc.to_s.length > 20
        fail ArgumentError, 'invalid value for "n_doc", the character length must be smaller than or equal to 20.'
      end

      if !n_doc.nil? && n_doc.to_s.length < 1
        fail ArgumentError, 'invalid value for "n_doc", the character length must be great than or equal to 1.'
      end

      @n_doc = n_doc
    end

    # Custom attribute writer method with validation
    # @param [Object] v_bc Value to be assigned
    def v_bc=(v_bc)
      if !v_bc.nil? && v_bc < 0
        fail ArgumentError, 'invalid value for "v_bc", must be greater than or equal to 0.'
      end

      @v_bc = v_bc
    end

    # Custom attribute writer method with validation
    # @param [Object] v_icms Value to be assigned
    def v_icms=(v_icms)
      if !v_icms.nil? && v_icms < 0
        fail ArgumentError, 'invalid value for "v_icms", must be greater than or equal to 0.'
      end

      @v_icms = v_icms
    end

    # Custom attribute writer method with validation
    # @param [Object] v_bcst Value to be assigned
    def v_bcst=(v_bcst)
      if !v_bcst.nil? && v_bcst < 0
        fail ArgumentError, 'invalid value for "v_bcst", must be greater than or equal to 0.'
      end

      @v_bcst = v_bcst
    end

    # Custom attribute writer method with validation
    # @param [Object] v_st Value to be assigned
    def v_st=(v_st)
      if !v_st.nil? && v_st < 0
        fail ArgumentError, 'invalid value for "v_st", must be greater than or equal to 0.'
      end

      @v_st = v_st
    end

    # Custom attribute writer method with validation
    # @param [Object] v_prod Value to be assigned
    def v_prod=(v_prod)
      if !v_prod.nil? && v_prod < 0
        fail ArgumentError, 'invalid value for "v_prod", must be greater than or equal to 0.'
      end

      @v_prod = v_prod
    end

    # Custom attribute writer method with validation
    # @param [Object] v_nf Value to be assigned
    def v_nf=(v_nf)
      if !v_nf.nil? && v_nf < 0
        fail ArgumentError, 'invalid value for "v_nf", must be greater than or equal to 0.'
      end

      @v_nf = v_nf
    end

    # Custom attribute writer method with validation
    # @param [Object] n_peso Value to be assigned
    def n_peso=(n_peso)
      if !n_peso.nil? && n_peso <= 0
        fail ArgumentError, 'invalid value for "n_peso", must be greater than 0.'
      end

      @n_peso = n_peso
    end

    # Custom attribute writer method with validation
    # @param [Object] pin Value to be assigned
    def pin=(pin)
      if !pin.nil? && pin.to_s.length > 9
        fail ArgumentError, 'invalid value for "pin", the character length must be smaller than or equal to 9.'
      end

      if !pin.nil? && pin.to_s.length < 2
        fail ArgumentError, 'invalid value for "pin", the character length must be great than or equal to 2.'
      end

      @pin = pin
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          n_roma == o.n_roma &&
          n_ped == o.n_ped &&
          mod == o.mod &&
          serie == o.serie &&
          n_doc == o.n_doc &&
          d_emi == o.d_emi &&
          v_bc == o.v_bc &&
          v_icms == o.v_icms &&
          v_bcst == o.v_bcst &&
          v_st == o.v_st &&
          v_prod == o.v_prod &&
          v_nf == o.v_nf &&
          n_cfop == o.n_cfop &&
          n_peso == o.n_peso &&
          pin == o.pin &&
          d_prev == o.d_prev &&
          inf_unid_carga == o.inf_unid_carga &&
          inf_unid_transp == o.inf_unid_transp
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [n_roma, n_ped, mod, serie, n_doc, d_emi, v_bc, v_icms, v_bcst, v_st, v_prod, v_nf, n_cfop, n_peso, pin, d_prev, inf_unid_carga, inf_unid_transp].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = NuvemfiscalSdkRuby.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
