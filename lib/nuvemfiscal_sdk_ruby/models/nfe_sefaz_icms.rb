=begin
#API Nuvem Fiscal

#API para automação comercial e documentos fiscais.

The version of the OpenAPI document: 2.44.0

Generated by: https://openapi-generator.tech
Generator version: 7.10.0

=end

require 'date'
require 'time'

module NuvemfiscalSdkRuby
  # Dados do ICMS Normal e ST.
  class NfeSefazICMS
    attr_accessor :icms00

    attr_accessor :icms02

    attr_accessor :icms10

    attr_accessor :icms15

    attr_accessor :icms20

    attr_accessor :icms30

    attr_accessor :icms40

    attr_accessor :icms51

    attr_accessor :icms53

    attr_accessor :icms60

    attr_accessor :icms61

    attr_accessor :icms70

    attr_accessor :icms90

    attr_accessor :icms_part

    attr_accessor :icmsst

    attr_accessor :icmssn101

    attr_accessor :icmssn102

    attr_accessor :icmssn201

    attr_accessor :icmssn202

    attr_accessor :icmssn500

    attr_accessor :icmssn900

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'icms00' => :'ICMS00',
        :'icms02' => :'ICMS02',
        :'icms10' => :'ICMS10',
        :'icms15' => :'ICMS15',
        :'icms20' => :'ICMS20',
        :'icms30' => :'ICMS30',
        :'icms40' => :'ICMS40',
        :'icms51' => :'ICMS51',
        :'icms53' => :'ICMS53',
        :'icms60' => :'ICMS60',
        :'icms61' => :'ICMS61',
        :'icms70' => :'ICMS70',
        :'icms90' => :'ICMS90',
        :'icms_part' => :'ICMSPart',
        :'icmsst' => :'ICMSST',
        :'icmssn101' => :'ICMSSN101',
        :'icmssn102' => :'ICMSSN102',
        :'icmssn201' => :'ICMSSN201',
        :'icmssn202' => :'ICMSSN202',
        :'icmssn500' => :'ICMSSN500',
        :'icmssn900' => :'ICMSSN900'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'icms00' => :'NfeSefazICMS00',
        :'icms02' => :'NfeSefazICMS02',
        :'icms10' => :'NfeSefazICMS10',
        :'icms15' => :'NfeSefazICMS15',
        :'icms20' => :'NfeSefazICMS20',
        :'icms30' => :'NfeSefazICMS30',
        :'icms40' => :'NfeSefazICMS40',
        :'icms51' => :'NfeSefazICMS51',
        :'icms53' => :'NfeSefazICMS53',
        :'icms60' => :'NfeSefazICMS60',
        :'icms61' => :'NfeSefazICMS61',
        :'icms70' => :'NfeSefazICMS70',
        :'icms90' => :'NfeSefazICMS90',
        :'icms_part' => :'NfeSefazICMSPart',
        :'icmsst' => :'NfeSefazICMSST',
        :'icmssn101' => :'NfeSefazICMSSN101',
        :'icmssn102' => :'NfeSefazICMSSN102',
        :'icmssn201' => :'NfeSefazICMSSN201',
        :'icmssn202' => :'NfeSefazICMSSN202',
        :'icmssn500' => :'NfeSefazICMSSN500',
        :'icmssn900' => :'NfeSefazICMSSN900'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `NuvemfiscalSdkRuby::NfeSefazICMS` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `NuvemfiscalSdkRuby::NfeSefazICMS`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'icms00')
        self.icms00 = attributes[:'icms00']
      end

      if attributes.key?(:'icms02')
        self.icms02 = attributes[:'icms02']
      end

      if attributes.key?(:'icms10')
        self.icms10 = attributes[:'icms10']
      end

      if attributes.key?(:'icms15')
        self.icms15 = attributes[:'icms15']
      end

      if attributes.key?(:'icms20')
        self.icms20 = attributes[:'icms20']
      end

      if attributes.key?(:'icms30')
        self.icms30 = attributes[:'icms30']
      end

      if attributes.key?(:'icms40')
        self.icms40 = attributes[:'icms40']
      end

      if attributes.key?(:'icms51')
        self.icms51 = attributes[:'icms51']
      end

      if attributes.key?(:'icms53')
        self.icms53 = attributes[:'icms53']
      end

      if attributes.key?(:'icms60')
        self.icms60 = attributes[:'icms60']
      end

      if attributes.key?(:'icms61')
        self.icms61 = attributes[:'icms61']
      end

      if attributes.key?(:'icms70')
        self.icms70 = attributes[:'icms70']
      end

      if attributes.key?(:'icms90')
        self.icms90 = attributes[:'icms90']
      end

      if attributes.key?(:'icms_part')
        self.icms_part = attributes[:'icms_part']
      end

      if attributes.key?(:'icmsst')
        self.icmsst = attributes[:'icmsst']
      end

      if attributes.key?(:'icmssn101')
        self.icmssn101 = attributes[:'icmssn101']
      end

      if attributes.key?(:'icmssn102')
        self.icmssn102 = attributes[:'icmssn102']
      end

      if attributes.key?(:'icmssn201')
        self.icmssn201 = attributes[:'icmssn201']
      end

      if attributes.key?(:'icmssn202')
        self.icmssn202 = attributes[:'icmssn202']
      end

      if attributes.key?(:'icmssn500')
        self.icmssn500 = attributes[:'icmssn500']
      end

      if attributes.key?(:'icmssn900')
        self.icmssn900 = attributes[:'icmssn900']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          icms00 == o.icms00 &&
          icms02 == o.icms02 &&
          icms10 == o.icms10 &&
          icms15 == o.icms15 &&
          icms20 == o.icms20 &&
          icms30 == o.icms30 &&
          icms40 == o.icms40 &&
          icms51 == o.icms51 &&
          icms53 == o.icms53 &&
          icms60 == o.icms60 &&
          icms61 == o.icms61 &&
          icms70 == o.icms70 &&
          icms90 == o.icms90 &&
          icms_part == o.icms_part &&
          icmsst == o.icmsst &&
          icmssn101 == o.icmssn101 &&
          icmssn102 == o.icmssn102 &&
          icmssn201 == o.icmssn201 &&
          icmssn202 == o.icmssn202 &&
          icmssn500 == o.icmssn500 &&
          icmssn900 == o.icmssn900
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [icms00, icms02, icms10, icms15, icms20, icms30, icms40, icms51, icms53, icms60, icms61, icms70, icms90, icms_part, icmsst, icmssn101, icmssn102, icmssn201, icmssn202, icmssn500, icmssn900].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = NuvemfiscalSdkRuby.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
