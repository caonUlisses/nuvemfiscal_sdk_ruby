=begin
#API Nuvem Fiscal

#API para automação comercial e documentos fiscais.

The version of the OpenAPI document: 2.44.0

Generated by: https://openapi-generator.tech
Generator version: 7.10.0

=end

require 'cgi'

module NuvemfiscalSdkRuby
  class EmpresaApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Alterar configuração de CT-e
    # @param cpf_cnpj [String] CPF ou CNPJ da empresa.  Utilize o valor sem máscara.
    # @param body [EmpresaConfigCte] 
    # @param [Hash] opts the optional parameters
    # @return [EmpresaConfigCte]
    def alterar_config_cte(cpf_cnpj, body, opts = {})
      data, _status_code, _headers = alterar_config_cte_with_http_info(cpf_cnpj, body, opts)
      data
    end

    # Alterar configuração de CT-e
    # @param cpf_cnpj [String] CPF ou CNPJ da empresa.  Utilize o valor sem máscara.
    # @param body [EmpresaConfigCte] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(EmpresaConfigCte, Integer, Hash)>] EmpresaConfigCte data, response status code and response headers
    def alterar_config_cte_with_http_info(cpf_cnpj, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EmpresaApi.alterar_config_cte ...'
      end
      # verify the required parameter 'cpf_cnpj' is set
      if @api_client.config.client_side_validation && cpf_cnpj.nil?
        fail ArgumentError, "Missing the required parameter 'cpf_cnpj' when calling EmpresaApi.alterar_config_cte"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling EmpresaApi.alterar_config_cte"
      end
      # resource path
      local_var_path = '/empresas/{cpf_cnpj}/cte'.sub('{' + 'cpf_cnpj' + '}', CGI.escape(cpf_cnpj.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'EmpresaConfigCte'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['jwt', 'oauth2']

      new_options = opts.merge(
        :operation => :"EmpresaApi.alterar_config_cte",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EmpresaApi#alterar_config_cte\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Alterar configuração de Distribuição de NF-e
    # @param cpf_cnpj [String] CPF ou CNPJ da empresa.  Utilize o valor sem máscara.
    # @param body [EmpresaConfigDistribuicaoNfe] 
    # @param [Hash] opts the optional parameters
    # @return [EmpresaConfigDistribuicaoNfe]
    def alterar_config_distribuicao_nfe(cpf_cnpj, body, opts = {})
      data, _status_code, _headers = alterar_config_distribuicao_nfe_with_http_info(cpf_cnpj, body, opts)
      data
    end

    # Alterar configuração de Distribuição de NF-e
    # @param cpf_cnpj [String] CPF ou CNPJ da empresa.  Utilize o valor sem máscara.
    # @param body [EmpresaConfigDistribuicaoNfe] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(EmpresaConfigDistribuicaoNfe, Integer, Hash)>] EmpresaConfigDistribuicaoNfe data, response status code and response headers
    def alterar_config_distribuicao_nfe_with_http_info(cpf_cnpj, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EmpresaApi.alterar_config_distribuicao_nfe ...'
      end
      # verify the required parameter 'cpf_cnpj' is set
      if @api_client.config.client_side_validation && cpf_cnpj.nil?
        fail ArgumentError, "Missing the required parameter 'cpf_cnpj' when calling EmpresaApi.alterar_config_distribuicao_nfe"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling EmpresaApi.alterar_config_distribuicao_nfe"
      end
      # resource path
      local_var_path = '/empresas/{cpf_cnpj}/distnfe'.sub('{' + 'cpf_cnpj' + '}', CGI.escape(cpf_cnpj.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'EmpresaConfigDistribuicaoNfe'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['jwt', 'oauth2']

      new_options = opts.merge(
        :operation => :"EmpresaApi.alterar_config_distribuicao_nfe",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EmpresaApi#alterar_config_distribuicao_nfe\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Alterar configuração de MDF-e
    # @param cpf_cnpj [String] CPF ou CNPJ da empresa.  Utilize o valor sem máscara.
    # @param body [EmpresaConfigMdfe] 
    # @param [Hash] opts the optional parameters
    # @return [EmpresaConfigMdfe]
    def alterar_config_mdfe(cpf_cnpj, body, opts = {})
      data, _status_code, _headers = alterar_config_mdfe_with_http_info(cpf_cnpj, body, opts)
      data
    end

    # Alterar configuração de MDF-e
    # @param cpf_cnpj [String] CPF ou CNPJ da empresa.  Utilize o valor sem máscara.
    # @param body [EmpresaConfigMdfe] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(EmpresaConfigMdfe, Integer, Hash)>] EmpresaConfigMdfe data, response status code and response headers
    def alterar_config_mdfe_with_http_info(cpf_cnpj, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EmpresaApi.alterar_config_mdfe ...'
      end
      # verify the required parameter 'cpf_cnpj' is set
      if @api_client.config.client_side_validation && cpf_cnpj.nil?
        fail ArgumentError, "Missing the required parameter 'cpf_cnpj' when calling EmpresaApi.alterar_config_mdfe"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling EmpresaApi.alterar_config_mdfe"
      end
      # resource path
      local_var_path = '/empresas/{cpf_cnpj}/mdfe'.sub('{' + 'cpf_cnpj' + '}', CGI.escape(cpf_cnpj.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'EmpresaConfigMdfe'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['jwt', 'oauth2']

      new_options = opts.merge(
        :operation => :"EmpresaApi.alterar_config_mdfe",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EmpresaApi#alterar_config_mdfe\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Alterar configuração de NFC-e
    # @param cpf_cnpj [String] CPF ou CNPJ da empresa.  Utilize o valor sem máscara.
    # @param body [EmpresaConfigNfce] 
    # @param [Hash] opts the optional parameters
    # @return [EmpresaConfigNfce]
    def alterar_config_nfce(cpf_cnpj, body, opts = {})
      data, _status_code, _headers = alterar_config_nfce_with_http_info(cpf_cnpj, body, opts)
      data
    end

    # Alterar configuração de NFC-e
    # @param cpf_cnpj [String] CPF ou CNPJ da empresa.  Utilize o valor sem máscara.
    # @param body [EmpresaConfigNfce] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(EmpresaConfigNfce, Integer, Hash)>] EmpresaConfigNfce data, response status code and response headers
    def alterar_config_nfce_with_http_info(cpf_cnpj, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EmpresaApi.alterar_config_nfce ...'
      end
      # verify the required parameter 'cpf_cnpj' is set
      if @api_client.config.client_side_validation && cpf_cnpj.nil?
        fail ArgumentError, "Missing the required parameter 'cpf_cnpj' when calling EmpresaApi.alterar_config_nfce"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling EmpresaApi.alterar_config_nfce"
      end
      # resource path
      local_var_path = '/empresas/{cpf_cnpj}/nfce'.sub('{' + 'cpf_cnpj' + '}', CGI.escape(cpf_cnpj.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'EmpresaConfigNfce'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['jwt', 'oauth2']

      new_options = opts.merge(
        :operation => :"EmpresaApi.alterar_config_nfce",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EmpresaApi#alterar_config_nfce\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Alterar configuração de NFCom
    # @param cpf_cnpj [String] CPF ou CNPJ da empresa.  Utilize o valor sem máscara.
    # @param body [EmpresaConfigNfcom] 
    # @param [Hash] opts the optional parameters
    # @return [EmpresaConfigNfcom]
    def alterar_config_nfcom(cpf_cnpj, body, opts = {})
      data, _status_code, _headers = alterar_config_nfcom_with_http_info(cpf_cnpj, body, opts)
      data
    end

    # Alterar configuração de NFCom
    # @param cpf_cnpj [String] CPF ou CNPJ da empresa.  Utilize o valor sem máscara.
    # @param body [EmpresaConfigNfcom] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(EmpresaConfigNfcom, Integer, Hash)>] EmpresaConfigNfcom data, response status code and response headers
    def alterar_config_nfcom_with_http_info(cpf_cnpj, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EmpresaApi.alterar_config_nfcom ...'
      end
      # verify the required parameter 'cpf_cnpj' is set
      if @api_client.config.client_side_validation && cpf_cnpj.nil?
        fail ArgumentError, "Missing the required parameter 'cpf_cnpj' when calling EmpresaApi.alterar_config_nfcom"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling EmpresaApi.alterar_config_nfcom"
      end
      # resource path
      local_var_path = '/empresas/{cpf_cnpj}/nfcom'.sub('{' + 'cpf_cnpj' + '}', CGI.escape(cpf_cnpj.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'EmpresaConfigNfcom'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['jwt', 'oauth2']

      new_options = opts.merge(
        :operation => :"EmpresaApi.alterar_config_nfcom",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EmpresaApi#alterar_config_nfcom\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Alterar configuração de NF-e
    # @param cpf_cnpj [String] CPF ou CNPJ da empresa.  Utilize o valor sem máscara.
    # @param body [EmpresaConfigNfe] 
    # @param [Hash] opts the optional parameters
    # @return [EmpresaConfigNfe]
    def alterar_config_nfe(cpf_cnpj, body, opts = {})
      data, _status_code, _headers = alterar_config_nfe_with_http_info(cpf_cnpj, body, opts)
      data
    end

    # Alterar configuração de NF-e
    # @param cpf_cnpj [String] CPF ou CNPJ da empresa.  Utilize o valor sem máscara.
    # @param body [EmpresaConfigNfe] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(EmpresaConfigNfe, Integer, Hash)>] EmpresaConfigNfe data, response status code and response headers
    def alterar_config_nfe_with_http_info(cpf_cnpj, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EmpresaApi.alterar_config_nfe ...'
      end
      # verify the required parameter 'cpf_cnpj' is set
      if @api_client.config.client_side_validation && cpf_cnpj.nil?
        fail ArgumentError, "Missing the required parameter 'cpf_cnpj' when calling EmpresaApi.alterar_config_nfe"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling EmpresaApi.alterar_config_nfe"
      end
      # resource path
      local_var_path = '/empresas/{cpf_cnpj}/nfe'.sub('{' + 'cpf_cnpj' + '}', CGI.escape(cpf_cnpj.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'EmpresaConfigNfe'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['jwt', 'oauth2']

      new_options = opts.merge(
        :operation => :"EmpresaApi.alterar_config_nfe",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EmpresaApi#alterar_config_nfe\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Alterar configuração de NFS-e
    # @param cpf_cnpj [String] CPF ou CNPJ da empresa.  Utilize o valor sem máscara.
    # @param body [EmpresaConfigNfse] 
    # @param [Hash] opts the optional parameters
    # @return [EmpresaConfigNfse]
    def alterar_config_nfse(cpf_cnpj, body, opts = {})
      data, _status_code, _headers = alterar_config_nfse_with_http_info(cpf_cnpj, body, opts)
      data
    end

    # Alterar configuração de NFS-e
    # @param cpf_cnpj [String] CPF ou CNPJ da empresa.  Utilize o valor sem máscara.
    # @param body [EmpresaConfigNfse] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(EmpresaConfigNfse, Integer, Hash)>] EmpresaConfigNfse data, response status code and response headers
    def alterar_config_nfse_with_http_info(cpf_cnpj, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EmpresaApi.alterar_config_nfse ...'
      end
      # verify the required parameter 'cpf_cnpj' is set
      if @api_client.config.client_side_validation && cpf_cnpj.nil?
        fail ArgumentError, "Missing the required parameter 'cpf_cnpj' when calling EmpresaApi.alterar_config_nfse"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling EmpresaApi.alterar_config_nfse"
      end
      # resource path
      local_var_path = '/empresas/{cpf_cnpj}/nfse'.sub('{' + 'cpf_cnpj' + '}', CGI.escape(cpf_cnpj.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'EmpresaConfigNfse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['jwt', 'oauth2']

      new_options = opts.merge(
        :operation => :"EmpresaApi.alterar_config_nfse",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EmpresaApi#alterar_config_nfse\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Alterar empresa
    # Altera o cadastro de uma empresa (emitente/prestador) que esteja associada a sua conta.  Nesse método, por tratar-se de um PUT, caso algum campo não seja informado, o valor dele será apagado.
    # @param cpf_cnpj [String] CPF ou CNPJ da empresa.  Utilize o valor sem máscara.
    # @param body [Empresa] 
    # @param [Hash] opts the optional parameters
    # @return [Empresa]
    def atualizar_empresa(cpf_cnpj, body, opts = {})
      data, _status_code, _headers = atualizar_empresa_with_http_info(cpf_cnpj, body, opts)
      data
    end

    # Alterar empresa
    # Altera o cadastro de uma empresa (emitente/prestador) que esteja associada a sua conta.  Nesse método, por tratar-se de um PUT, caso algum campo não seja informado, o valor dele será apagado.
    # @param cpf_cnpj [String] CPF ou CNPJ da empresa.  Utilize o valor sem máscara.
    # @param body [Empresa] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Empresa, Integer, Hash)>] Empresa data, response status code and response headers
    def atualizar_empresa_with_http_info(cpf_cnpj, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EmpresaApi.atualizar_empresa ...'
      end
      # verify the required parameter 'cpf_cnpj' is set
      if @api_client.config.client_side_validation && cpf_cnpj.nil?
        fail ArgumentError, "Missing the required parameter 'cpf_cnpj' when calling EmpresaApi.atualizar_empresa"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling EmpresaApi.atualizar_empresa"
      end
      # resource path
      local_var_path = '/empresas/{cpf_cnpj}'.sub('{' + 'cpf_cnpj' + '}', CGI.escape(cpf_cnpj.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'Empresa'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['jwt', 'oauth2']

      new_options = opts.merge(
        :operation => :"EmpresaApi.atualizar_empresa",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EmpresaApi#atualizar_empresa\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Baixar logotipo
    # @param cpf_cnpj [String] CPF ou CNPJ da empresa.  Utilize o valor sem máscara.
    # @param [Hash] opts the optional parameters
    # @return [File]
    def baixar_logotipo_empresa(cpf_cnpj, opts = {})
      data, _status_code, _headers = baixar_logotipo_empresa_with_http_info(cpf_cnpj, opts)
      data
    end

    # Baixar logotipo
    # @param cpf_cnpj [String] CPF ou CNPJ da empresa.  Utilize o valor sem máscara.
    # @param [Hash] opts the optional parameters
    # @return [Array<(File, Integer, Hash)>] File data, response status code and response headers
    def baixar_logotipo_empresa_with_http_info(cpf_cnpj, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EmpresaApi.baixar_logotipo_empresa ...'
      end
      # verify the required parameter 'cpf_cnpj' is set
      if @api_client.config.client_side_validation && cpf_cnpj.nil?
        fail ArgumentError, "Missing the required parameter 'cpf_cnpj' when calling EmpresaApi.baixar_logotipo_empresa"
      end
      # resource path
      local_var_path = '/empresas/{cpf_cnpj}/logotipo'.sub('{' + 'cpf_cnpj' + '}', CGI.escape(cpf_cnpj.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'File'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['jwt', 'oauth2']

      new_options = opts.merge(
        :operation => :"EmpresaApi.baixar_logotipo_empresa",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EmpresaApi#baixar_logotipo_empresa\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Cadastrar certificado
    # Cadastre ou atualize um certificado digital e vincule a sua empresa, para que possa iniciar a emissão de notas.  * No parâmetro `certificado`, envie o binário do certificado digital (.pfx ou .p12) codificado em **base64**.
    # @param cpf_cnpj [String] CPF ou CNPJ da empresa.  Utilize o valor sem máscara.
    # @param body [EmpresaPedidoCadastroCertificado] 
    # @param [Hash] opts the optional parameters
    # @return [EmpresaCertificado]
    def cadastrar_certificado_empresa(cpf_cnpj, body, opts = {})
      data, _status_code, _headers = cadastrar_certificado_empresa_with_http_info(cpf_cnpj, body, opts)
      data
    end

    # Cadastrar certificado
    # Cadastre ou atualize um certificado digital e vincule a sua empresa, para que possa iniciar a emissão de notas.  * No parâmetro &#x60;certificado&#x60;, envie o binário do certificado digital (.pfx ou .p12) codificado em **base64**.
    # @param cpf_cnpj [String] CPF ou CNPJ da empresa.  Utilize o valor sem máscara.
    # @param body [EmpresaPedidoCadastroCertificado] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(EmpresaCertificado, Integer, Hash)>] EmpresaCertificado data, response status code and response headers
    def cadastrar_certificado_empresa_with_http_info(cpf_cnpj, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EmpresaApi.cadastrar_certificado_empresa ...'
      end
      # verify the required parameter 'cpf_cnpj' is set
      if @api_client.config.client_side_validation && cpf_cnpj.nil?
        fail ArgumentError, "Missing the required parameter 'cpf_cnpj' when calling EmpresaApi.cadastrar_certificado_empresa"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling EmpresaApi.cadastrar_certificado_empresa"
      end
      # resource path
      local_var_path = '/empresas/{cpf_cnpj}/certificado'.sub('{' + 'cpf_cnpj' + '}', CGI.escape(cpf_cnpj.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'EmpresaCertificado'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['jwt', 'oauth2']

      new_options = opts.merge(
        :operation => :"EmpresaApi.cadastrar_certificado_empresa",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EmpresaApi#cadastrar_certificado_empresa\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Consultar certificado
    # @param cpf_cnpj [String] CPF ou CNPJ da empresa.  Utilize o valor sem máscara.
    # @param [Hash] opts the optional parameters
    # @return [EmpresaCertificado]
    def consultar_certificado_empresa(cpf_cnpj, opts = {})
      data, _status_code, _headers = consultar_certificado_empresa_with_http_info(cpf_cnpj, opts)
      data
    end

    # Consultar certificado
    # @param cpf_cnpj [String] CPF ou CNPJ da empresa.  Utilize o valor sem máscara.
    # @param [Hash] opts the optional parameters
    # @return [Array<(EmpresaCertificado, Integer, Hash)>] EmpresaCertificado data, response status code and response headers
    def consultar_certificado_empresa_with_http_info(cpf_cnpj, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EmpresaApi.consultar_certificado_empresa ...'
      end
      # verify the required parameter 'cpf_cnpj' is set
      if @api_client.config.client_side_validation && cpf_cnpj.nil?
        fail ArgumentError, "Missing the required parameter 'cpf_cnpj' when calling EmpresaApi.consultar_certificado_empresa"
      end
      # resource path
      local_var_path = '/empresas/{cpf_cnpj}/certificado'.sub('{' + 'cpf_cnpj' + '}', CGI.escape(cpf_cnpj.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'EmpresaCertificado'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['jwt', 'oauth2']

      new_options = opts.merge(
        :operation => :"EmpresaApi.consultar_certificado_empresa",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EmpresaApi#consultar_certificado_empresa\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Consultar configuração de CT-e
    # @param cpf_cnpj [String] CPF ou CNPJ da empresa.  Utilize o valor sem máscara.
    # @param [Hash] opts the optional parameters
    # @return [EmpresaConfigCte]
    def consultar_config_cte(cpf_cnpj, opts = {})
      data, _status_code, _headers = consultar_config_cte_with_http_info(cpf_cnpj, opts)
      data
    end

    # Consultar configuração de CT-e
    # @param cpf_cnpj [String] CPF ou CNPJ da empresa.  Utilize o valor sem máscara.
    # @param [Hash] opts the optional parameters
    # @return [Array<(EmpresaConfigCte, Integer, Hash)>] EmpresaConfigCte data, response status code and response headers
    def consultar_config_cte_with_http_info(cpf_cnpj, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EmpresaApi.consultar_config_cte ...'
      end
      # verify the required parameter 'cpf_cnpj' is set
      if @api_client.config.client_side_validation && cpf_cnpj.nil?
        fail ArgumentError, "Missing the required parameter 'cpf_cnpj' when calling EmpresaApi.consultar_config_cte"
      end
      # resource path
      local_var_path = '/empresas/{cpf_cnpj}/cte'.sub('{' + 'cpf_cnpj' + '}', CGI.escape(cpf_cnpj.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'EmpresaConfigCte'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['jwt', 'oauth2']

      new_options = opts.merge(
        :operation => :"EmpresaApi.consultar_config_cte",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EmpresaApi#consultar_config_cte\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Consultar configuração de Distribuição de NF-e
    # @param cpf_cnpj [String] CPF ou CNPJ da empresa.  Utilize o valor sem máscara.
    # @param [Hash] opts the optional parameters
    # @return [EmpresaConfigDistribuicaoNfe]
    def consultar_config_distribuicao_nfe(cpf_cnpj, opts = {})
      data, _status_code, _headers = consultar_config_distribuicao_nfe_with_http_info(cpf_cnpj, opts)
      data
    end

    # Consultar configuração de Distribuição de NF-e
    # @param cpf_cnpj [String] CPF ou CNPJ da empresa.  Utilize o valor sem máscara.
    # @param [Hash] opts the optional parameters
    # @return [Array<(EmpresaConfigDistribuicaoNfe, Integer, Hash)>] EmpresaConfigDistribuicaoNfe data, response status code and response headers
    def consultar_config_distribuicao_nfe_with_http_info(cpf_cnpj, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EmpresaApi.consultar_config_distribuicao_nfe ...'
      end
      # verify the required parameter 'cpf_cnpj' is set
      if @api_client.config.client_side_validation && cpf_cnpj.nil?
        fail ArgumentError, "Missing the required parameter 'cpf_cnpj' when calling EmpresaApi.consultar_config_distribuicao_nfe"
      end
      # resource path
      local_var_path = '/empresas/{cpf_cnpj}/distnfe'.sub('{' + 'cpf_cnpj' + '}', CGI.escape(cpf_cnpj.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'EmpresaConfigDistribuicaoNfe'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['jwt', 'oauth2']

      new_options = opts.merge(
        :operation => :"EmpresaApi.consultar_config_distribuicao_nfe",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EmpresaApi#consultar_config_distribuicao_nfe\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Consultar configuração de MDF-e
    # @param cpf_cnpj [String] CPF ou CNPJ da empresa.  Utilize o valor sem máscara.
    # @param [Hash] opts the optional parameters
    # @return [EmpresaConfigMdfe]
    def consultar_config_mdfe(cpf_cnpj, opts = {})
      data, _status_code, _headers = consultar_config_mdfe_with_http_info(cpf_cnpj, opts)
      data
    end

    # Consultar configuração de MDF-e
    # @param cpf_cnpj [String] CPF ou CNPJ da empresa.  Utilize o valor sem máscara.
    # @param [Hash] opts the optional parameters
    # @return [Array<(EmpresaConfigMdfe, Integer, Hash)>] EmpresaConfigMdfe data, response status code and response headers
    def consultar_config_mdfe_with_http_info(cpf_cnpj, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EmpresaApi.consultar_config_mdfe ...'
      end
      # verify the required parameter 'cpf_cnpj' is set
      if @api_client.config.client_side_validation && cpf_cnpj.nil?
        fail ArgumentError, "Missing the required parameter 'cpf_cnpj' when calling EmpresaApi.consultar_config_mdfe"
      end
      # resource path
      local_var_path = '/empresas/{cpf_cnpj}/mdfe'.sub('{' + 'cpf_cnpj' + '}', CGI.escape(cpf_cnpj.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'EmpresaConfigMdfe'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['jwt', 'oauth2']

      new_options = opts.merge(
        :operation => :"EmpresaApi.consultar_config_mdfe",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EmpresaApi#consultar_config_mdfe\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Consultar configuração de NFC-e
    # @param cpf_cnpj [String] CPF ou CNPJ da empresa.  Utilize o valor sem máscara.
    # @param [Hash] opts the optional parameters
    # @return [EmpresaConfigNfce]
    def consultar_config_nfce(cpf_cnpj, opts = {})
      data, _status_code, _headers = consultar_config_nfce_with_http_info(cpf_cnpj, opts)
      data
    end

    # Consultar configuração de NFC-e
    # @param cpf_cnpj [String] CPF ou CNPJ da empresa.  Utilize o valor sem máscara.
    # @param [Hash] opts the optional parameters
    # @return [Array<(EmpresaConfigNfce, Integer, Hash)>] EmpresaConfigNfce data, response status code and response headers
    def consultar_config_nfce_with_http_info(cpf_cnpj, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EmpresaApi.consultar_config_nfce ...'
      end
      # verify the required parameter 'cpf_cnpj' is set
      if @api_client.config.client_side_validation && cpf_cnpj.nil?
        fail ArgumentError, "Missing the required parameter 'cpf_cnpj' when calling EmpresaApi.consultar_config_nfce"
      end
      # resource path
      local_var_path = '/empresas/{cpf_cnpj}/nfce'.sub('{' + 'cpf_cnpj' + '}', CGI.escape(cpf_cnpj.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'EmpresaConfigNfce'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['jwt', 'oauth2']

      new_options = opts.merge(
        :operation => :"EmpresaApi.consultar_config_nfce",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EmpresaApi#consultar_config_nfce\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Consultar configuração de NFCom
    # @param cpf_cnpj [String] CPF ou CNPJ da empresa.  Utilize o valor sem máscara.
    # @param [Hash] opts the optional parameters
    # @return [EmpresaConfigNfcom]
    def consultar_config_nfcom(cpf_cnpj, opts = {})
      data, _status_code, _headers = consultar_config_nfcom_with_http_info(cpf_cnpj, opts)
      data
    end

    # Consultar configuração de NFCom
    # @param cpf_cnpj [String] CPF ou CNPJ da empresa.  Utilize o valor sem máscara.
    # @param [Hash] opts the optional parameters
    # @return [Array<(EmpresaConfigNfcom, Integer, Hash)>] EmpresaConfigNfcom data, response status code and response headers
    def consultar_config_nfcom_with_http_info(cpf_cnpj, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EmpresaApi.consultar_config_nfcom ...'
      end
      # verify the required parameter 'cpf_cnpj' is set
      if @api_client.config.client_side_validation && cpf_cnpj.nil?
        fail ArgumentError, "Missing the required parameter 'cpf_cnpj' when calling EmpresaApi.consultar_config_nfcom"
      end
      # resource path
      local_var_path = '/empresas/{cpf_cnpj}/nfcom'.sub('{' + 'cpf_cnpj' + '}', CGI.escape(cpf_cnpj.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'EmpresaConfigNfcom'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['jwt', 'oauth2']

      new_options = opts.merge(
        :operation => :"EmpresaApi.consultar_config_nfcom",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EmpresaApi#consultar_config_nfcom\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Consultar configuração de NF-e
    # @param cpf_cnpj [String] CPF ou CNPJ da empresa.  Utilize o valor sem máscara.
    # @param [Hash] opts the optional parameters
    # @return [EmpresaConfigNfe]
    def consultar_config_nfe(cpf_cnpj, opts = {})
      data, _status_code, _headers = consultar_config_nfe_with_http_info(cpf_cnpj, opts)
      data
    end

    # Consultar configuração de NF-e
    # @param cpf_cnpj [String] CPF ou CNPJ da empresa.  Utilize o valor sem máscara.
    # @param [Hash] opts the optional parameters
    # @return [Array<(EmpresaConfigNfe, Integer, Hash)>] EmpresaConfigNfe data, response status code and response headers
    def consultar_config_nfe_with_http_info(cpf_cnpj, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EmpresaApi.consultar_config_nfe ...'
      end
      # verify the required parameter 'cpf_cnpj' is set
      if @api_client.config.client_side_validation && cpf_cnpj.nil?
        fail ArgumentError, "Missing the required parameter 'cpf_cnpj' when calling EmpresaApi.consultar_config_nfe"
      end
      # resource path
      local_var_path = '/empresas/{cpf_cnpj}/nfe'.sub('{' + 'cpf_cnpj' + '}', CGI.escape(cpf_cnpj.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'EmpresaConfigNfe'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['jwt', 'oauth2']

      new_options = opts.merge(
        :operation => :"EmpresaApi.consultar_config_nfe",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EmpresaApi#consultar_config_nfe\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Consultar configuração de NFS-e
    # @param cpf_cnpj [String] CPF ou CNPJ da empresa.  Utilize o valor sem máscara.
    # @param [Hash] opts the optional parameters
    # @return [EmpresaConfigNfse]
    def consultar_config_nfse(cpf_cnpj, opts = {})
      data, _status_code, _headers = consultar_config_nfse_with_http_info(cpf_cnpj, opts)
      data
    end

    # Consultar configuração de NFS-e
    # @param cpf_cnpj [String] CPF ou CNPJ da empresa.  Utilize o valor sem máscara.
    # @param [Hash] opts the optional parameters
    # @return [Array<(EmpresaConfigNfse, Integer, Hash)>] EmpresaConfigNfse data, response status code and response headers
    def consultar_config_nfse_with_http_info(cpf_cnpj, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EmpresaApi.consultar_config_nfse ...'
      end
      # verify the required parameter 'cpf_cnpj' is set
      if @api_client.config.client_side_validation && cpf_cnpj.nil?
        fail ArgumentError, "Missing the required parameter 'cpf_cnpj' when calling EmpresaApi.consultar_config_nfse"
      end
      # resource path
      local_var_path = '/empresas/{cpf_cnpj}/nfse'.sub('{' + 'cpf_cnpj' + '}', CGI.escape(cpf_cnpj.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'EmpresaConfigNfse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['jwt', 'oauth2']

      new_options = opts.merge(
        :operation => :"EmpresaApi.consultar_config_nfse",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EmpresaApi#consultar_config_nfse\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Consultar empresa
    # @param cpf_cnpj [String] CPF ou CNPJ da empresa.  Utilize o valor sem máscara.
    # @param [Hash] opts the optional parameters
    # @return [Empresa]
    def consultar_empresa(cpf_cnpj, opts = {})
      data, _status_code, _headers = consultar_empresa_with_http_info(cpf_cnpj, opts)
      data
    end

    # Consultar empresa
    # @param cpf_cnpj [String] CPF ou CNPJ da empresa.  Utilize o valor sem máscara.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Empresa, Integer, Hash)>] Empresa data, response status code and response headers
    def consultar_empresa_with_http_info(cpf_cnpj, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EmpresaApi.consultar_empresa ...'
      end
      # verify the required parameter 'cpf_cnpj' is set
      if @api_client.config.client_side_validation && cpf_cnpj.nil?
        fail ArgumentError, "Missing the required parameter 'cpf_cnpj' when calling EmpresaApi.consultar_empresa"
      end
      # resource path
      local_var_path = '/empresas/{cpf_cnpj}'.sub('{' + 'cpf_cnpj' + '}', CGI.escape(cpf_cnpj.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Empresa'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['jwt', 'oauth2']

      new_options = opts.merge(
        :operation => :"EmpresaApi.consultar_empresa",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EmpresaApi#consultar_empresa\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Cadastrar empresa
    # Cadastre uma nova empresa (emitente ou prestador) à sua conta.
    # @param body [Empresa] 
    # @param [Hash] opts the optional parameters
    # @return [Empresa]
    def criar_empresa(body, opts = {})
      data, _status_code, _headers = criar_empresa_with_http_info(body, opts)
      data
    end

    # Cadastrar empresa
    # Cadastre uma nova empresa (emitente ou prestador) à sua conta.
    # @param body [Empresa] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Empresa, Integer, Hash)>] Empresa data, response status code and response headers
    def criar_empresa_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EmpresaApi.criar_empresa ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling EmpresaApi.criar_empresa"
      end
      # resource path
      local_var_path = '/empresas'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'Empresa'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['jwt', 'oauth2']

      new_options = opts.merge(
        :operation => :"EmpresaApi.criar_empresa",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EmpresaApi#criar_empresa\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Upload de certificado
    # Cadastre ou atualize um certificado digital e vincule a sua empresa, para que possa iniciar a emissão de notas.  * Utilize o `content-type` igual a `multipart/form-data`.  * No parâmetro `file`, envie o binário do arquivo (.pfx ou .p12) do certificado digital.  * No parâmetro `password`, envie a senha do certificado.
    # @param cpf_cnpj [String] CPF ou CNPJ da empresa.  Utilize o valor sem máscara.
    # @param [Hash] opts the optional parameters
    # @option opts [File] :input 
    # @return [EmpresaCertificado]
    def enviar_certificado_empresa(cpf_cnpj, opts = {})
      data, _status_code, _headers = enviar_certificado_empresa_with_http_info(cpf_cnpj, opts)
      data
    end

    # Upload de certificado
    # Cadastre ou atualize um certificado digital e vincule a sua empresa, para que possa iniciar a emissão de notas.  * Utilize o &#x60;content-type&#x60; igual a &#x60;multipart/form-data&#x60;.  * No parâmetro &#x60;file&#x60;, envie o binário do arquivo (.pfx ou .p12) do certificado digital.  * No parâmetro &#x60;password&#x60;, envie a senha do certificado.
    # @param cpf_cnpj [String] CPF ou CNPJ da empresa.  Utilize o valor sem máscara.
    # @param [Hash] opts the optional parameters
    # @option opts [File] :input 
    # @return [Array<(EmpresaCertificado, Integer, Hash)>] EmpresaCertificado data, response status code and response headers
    def enviar_certificado_empresa_with_http_info(cpf_cnpj, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EmpresaApi.enviar_certificado_empresa ...'
      end
      # verify the required parameter 'cpf_cnpj' is set
      if @api_client.config.client_side_validation && cpf_cnpj.nil?
        fail ArgumentError, "Missing the required parameter 'cpf_cnpj' when calling EmpresaApi.enviar_certificado_empresa"
      end
      # resource path
      local_var_path = '/empresas/{cpf_cnpj}/certificado/upload'.sub('{' + 'cpf_cnpj' + '}', CGI.escape(cpf_cnpj.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['multipart/form-data'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}
      form_params['Input'] = opts[:'input'] if !opts[:'input'].nil?

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'EmpresaCertificado'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['jwt', 'oauth2']

      new_options = opts.merge(
        :operation => :"EmpresaApi.enviar_certificado_empresa",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EmpresaApi#enviar_certificado_empresa\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Enviar logotipo
    # Cadastre ou atualize um logotipo e vincule a sua empresa.    **Restrições:**  * Tipos de mídia (MIME) suportados: `image/png` e `image/jpeg`  * Tamanho máximo do arquivo: 200 KB    **Cenários de uso:**  * Quero que minhas notas sejam impressas com esse logotipo.  * Quero trocar o logotipo utilizado em minhas impressões.
    # @param cpf_cnpj [String] CPF ou CNPJ da empresa.  Utilize o valor sem máscara.
    # @param [Hash] opts the optional parameters
    # @option opts [File] :input 
    # @return [nil]
    def enviar_logotipo_empresa(cpf_cnpj, opts = {})
      enviar_logotipo_empresa_with_http_info(cpf_cnpj, opts)
      nil
    end

    # Enviar logotipo
    # Cadastre ou atualize um logotipo e vincule a sua empresa.    **Restrições:**  * Tipos de mídia (MIME) suportados: &#x60;image/png&#x60; e &#x60;image/jpeg&#x60;  * Tamanho máximo do arquivo: 200 KB    **Cenários de uso:**  * Quero que minhas notas sejam impressas com esse logotipo.  * Quero trocar o logotipo utilizado em minhas impressões.
    # @param cpf_cnpj [String] CPF ou CNPJ da empresa.  Utilize o valor sem máscara.
    # @param [Hash] opts the optional parameters
    # @option opts [File] :input 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def enviar_logotipo_empresa_with_http_info(cpf_cnpj, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EmpresaApi.enviar_logotipo_empresa ...'
      end
      # verify the required parameter 'cpf_cnpj' is set
      if @api_client.config.client_side_validation && cpf_cnpj.nil?
        fail ArgumentError, "Missing the required parameter 'cpf_cnpj' when calling EmpresaApi.enviar_logotipo_empresa"
      end
      # resource path
      local_var_path = '/empresas/{cpf_cnpj}/logotipo'.sub('{' + 'cpf_cnpj' + '}', CGI.escape(cpf_cnpj.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['multipart/form-data'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}
      form_params['Input'] = opts[:'input'] if !opts[:'input'].nil?

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['jwt', 'oauth2']

      new_options = opts.merge(
        :operation => :"EmpresaApi.enviar_logotipo_empresa",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EmpresaApi#enviar_logotipo_empresa\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Deletar certificado
    # @param cpf_cnpj [String] CPF ou CNPJ da empresa.  Utilize o valor sem máscara.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def excluir_certificado_empresa(cpf_cnpj, opts = {})
      excluir_certificado_empresa_with_http_info(cpf_cnpj, opts)
      nil
    end

    # Deletar certificado
    # @param cpf_cnpj [String] CPF ou CNPJ da empresa.  Utilize o valor sem máscara.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def excluir_certificado_empresa_with_http_info(cpf_cnpj, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EmpresaApi.excluir_certificado_empresa ...'
      end
      # verify the required parameter 'cpf_cnpj' is set
      if @api_client.config.client_side_validation && cpf_cnpj.nil?
        fail ArgumentError, "Missing the required parameter 'cpf_cnpj' when calling EmpresaApi.excluir_certificado_empresa"
      end
      # resource path
      local_var_path = '/empresas/{cpf_cnpj}/certificado'.sub('{' + 'cpf_cnpj' + '}', CGI.escape(cpf_cnpj.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['jwt', 'oauth2']

      new_options = opts.merge(
        :operation => :"EmpresaApi.excluir_certificado_empresa",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EmpresaApi#excluir_certificado_empresa\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Deletar empresa
    # @param cpf_cnpj [String] CPF ou CNPJ da empresa.  Utilize o valor sem máscara.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def excluir_empresa(cpf_cnpj, opts = {})
      excluir_empresa_with_http_info(cpf_cnpj, opts)
      nil
    end

    # Deletar empresa
    # @param cpf_cnpj [String] CPF ou CNPJ da empresa.  Utilize o valor sem máscara.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def excluir_empresa_with_http_info(cpf_cnpj, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EmpresaApi.excluir_empresa ...'
      end
      # verify the required parameter 'cpf_cnpj' is set
      if @api_client.config.client_side_validation && cpf_cnpj.nil?
        fail ArgumentError, "Missing the required parameter 'cpf_cnpj' when calling EmpresaApi.excluir_empresa"
      end
      # resource path
      local_var_path = '/empresas/{cpf_cnpj}'.sub('{' + 'cpf_cnpj' + '}', CGI.escape(cpf_cnpj.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['jwt', 'oauth2']

      new_options = opts.merge(
        :operation => :"EmpresaApi.excluir_empresa",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EmpresaApi#excluir_empresa\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Deletar logotipo
    # @param cpf_cnpj [String] CPF ou CNPJ da empresa.  Utilize o valor sem máscara.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def excluir_logotipo_empresa(cpf_cnpj, opts = {})
      excluir_logotipo_empresa_with_http_info(cpf_cnpj, opts)
      nil
    end

    # Deletar logotipo
    # @param cpf_cnpj [String] CPF ou CNPJ da empresa.  Utilize o valor sem máscara.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def excluir_logotipo_empresa_with_http_info(cpf_cnpj, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EmpresaApi.excluir_logotipo_empresa ...'
      end
      # verify the required parameter 'cpf_cnpj' is set
      if @api_client.config.client_side_validation && cpf_cnpj.nil?
        fail ArgumentError, "Missing the required parameter 'cpf_cnpj' when calling EmpresaApi.excluir_logotipo_empresa"
      end
      # resource path
      local_var_path = '/empresas/{cpf_cnpj}/logotipo'.sub('{' + 'cpf_cnpj' + '}', CGI.escape(cpf_cnpj.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['jwt', 'oauth2']

      new_options = opts.merge(
        :operation => :"EmpresaApi.excluir_logotipo_empresa",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EmpresaApi#excluir_logotipo_empresa\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Listar empresas
    # Retorna a lista das empresas associadas à sua conta. As empresas são retornadas ordenadas pela data da criação, com as mais recentes aparecendo primeiro.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :top Limite no número de objetos a serem retornados pela API, entre 1 e 100. (default to 10)
    # @option opts [Integer] :skip Quantidade de objetos que serão ignorados antes da lista começar a ser retornada. (default to 0)
    # @option opts [Boolean] :inlinecount Inclui no JSON de resposta, na propriedade &#x60;@count&#x60;, o número total de registros que o filtro retornaria, independente dos filtros de paginação. (default to false)
    # @option opts [String] :cpf_cnpj Filtrar pelo CPF ou CNPJ da empresa.    *Utilize o valor sem máscara*.
    # @return [EmpresaListagem]
    def listar_empresas(opts = {})
      data, _status_code, _headers = listar_empresas_with_http_info(opts)
      data
    end

    # Listar empresas
    # Retorna a lista das empresas associadas à sua conta. As empresas são retornadas ordenadas pela data da criação, com as mais recentes aparecendo primeiro.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :top Limite no número de objetos a serem retornados pela API, entre 1 e 100. (default to 10)
    # @option opts [Integer] :skip Quantidade de objetos que serão ignorados antes da lista começar a ser retornada. (default to 0)
    # @option opts [Boolean] :inlinecount Inclui no JSON de resposta, na propriedade &#x60;@count&#x60;, o número total de registros que o filtro retornaria, independente dos filtros de paginação. (default to false)
    # @option opts [String] :cpf_cnpj Filtrar pelo CPF ou CNPJ da empresa.    *Utilize o valor sem máscara*.
    # @return [Array<(EmpresaListagem, Integer, Hash)>] EmpresaListagem data, response status code and response headers
    def listar_empresas_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EmpresaApi.listar_empresas ...'
      end
      # resource path
      local_var_path = '/empresas'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'$top'] = opts[:'top'] if !opts[:'top'].nil?
      query_params[:'$skip'] = opts[:'skip'] if !opts[:'skip'].nil?
      query_params[:'$inlinecount'] = opts[:'inlinecount'] if !opts[:'inlinecount'].nil?
      query_params[:'cpf_cnpj'] = opts[:'cpf_cnpj'] if !opts[:'cpf_cnpj'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'EmpresaListagem'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['jwt', 'oauth2']

      new_options = opts.merge(
        :operation => :"EmpresaApi.listar_empresas",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EmpresaApi#listar_empresas\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
