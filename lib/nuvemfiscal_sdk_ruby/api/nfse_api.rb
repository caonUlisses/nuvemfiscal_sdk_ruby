=begin
#API Nuvem Fiscal

#API para automação comercial e documentos fiscais.

The version of the OpenAPI document: 2.44.0

Generated by: https://openapi-generator.tech
Generator version: 7.10.0

=end

require 'cgi'

module NuvemfiscalSdkRuby
  class NfseApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Baixar PDF do DANFSE
    # @param id [String] ID único da NFS-e gerado pela Nuvem Fiscal.
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :logotipo Imprime o documento com logotipo, desde que esteja cadastrado na empresa. (default to false)
    # @option opts [String] :mensagem_rodape Imprime mensagem no rodapé do documento.    O caractere &#x60;|&#x60; (pipe) poderá ser utilizado para definir a quantidade e o alinhamento das mensagens.    **Exemplos de Uso:**  * &#x60;\&quot;esquerda\&quot;&#x60;  * &#x60;\&quot;esquerda|centro\&quot;&#x60;  * &#x60;\&quot;esquerda|centro|direita\&quot;&#x60;  * &#x60;\&quot;|centro\&quot;&#x60;, &#x60;\&quot;|centro|\&quot;&#x60;  * &#x60;\&quot;|centro|direita\&quot;&#x60;  * &#x60;\&quot;||direita\&quot;&#x60;  * &#x60;\&quot;esquerda||direita\&quot;&#x60;    Default: &#x60;\&quot;\&quot;&#x60;
    # @return [File]
    def baixar_pdf_nfse(id, opts = {})
      data, _status_code, _headers = baixar_pdf_nfse_with_http_info(id, opts)
      data
    end

    # Baixar PDF do DANFSE
    # @param id [String] ID único da NFS-e gerado pela Nuvem Fiscal.
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :logotipo Imprime o documento com logotipo, desde que esteja cadastrado na empresa. (default to false)
    # @option opts [String] :mensagem_rodape Imprime mensagem no rodapé do documento.    O caractere &#x60;|&#x60; (pipe) poderá ser utilizado para definir a quantidade e o alinhamento das mensagens.    **Exemplos de Uso:**  * &#x60;\&quot;esquerda\&quot;&#x60;  * &#x60;\&quot;esquerda|centro\&quot;&#x60;  * &#x60;\&quot;esquerda|centro|direita\&quot;&#x60;  * &#x60;\&quot;|centro\&quot;&#x60;, &#x60;\&quot;|centro|\&quot;&#x60;  * &#x60;\&quot;|centro|direita\&quot;&#x60;  * &#x60;\&quot;||direita\&quot;&#x60;  * &#x60;\&quot;esquerda||direita\&quot;&#x60;    Default: &#x60;\&quot;\&quot;&#x60;
    # @return [Array<(File, Integer, Hash)>] File data, response status code and response headers
    def baixar_pdf_nfse_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NfseApi.baixar_pdf_nfse ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling NfseApi.baixar_pdf_nfse"
      end
      if @api_client.config.client_side_validation && !opts[:'mensagem_rodape'].nil? && opts[:'mensagem_rodape'].to_s.length > 120
        fail ArgumentError, 'invalid value for "opts[:"mensagem_rodape"]" when calling NfseApi.baixar_pdf_nfse, the character length must be smaller than or equal to 120.'
      end

      # resource path
      local_var_path = '/nfse/{id}/pdf'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'logotipo'] = opts[:'logotipo'] if !opts[:'logotipo'].nil?
      query_params[:'mensagem_rodape'] = opts[:'mensagem_rodape'] if !opts[:'mensagem_rodape'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'File'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['jwt', 'oauth2']

      new_options = opts.merge(
        :operation => :"NfseApi.baixar_pdf_nfse",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NfseApi#baixar_pdf_nfse\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Baixar XML do evento de cancelamento
    # @param id [String] ID único da NFS-e gerado pela Nuvem Fiscal.
    # @param [Hash] opts the optional parameters
    # @return [File]
    def baixar_xml_cancelamento_nfse(id, opts = {})
      data, _status_code, _headers = baixar_xml_cancelamento_nfse_with_http_info(id, opts)
      data
    end

    # Baixar XML do evento de cancelamento
    # @param id [String] ID único da NFS-e gerado pela Nuvem Fiscal.
    # @param [Hash] opts the optional parameters
    # @return [Array<(File, Integer, Hash)>] File data, response status code and response headers
    def baixar_xml_cancelamento_nfse_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NfseApi.baixar_xml_cancelamento_nfse ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling NfseApi.baixar_xml_cancelamento_nfse"
      end
      # resource path
      local_var_path = '/nfse/{Id}/cancelamento/xml'.sub('{' + 'Id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'File'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['jwt', 'oauth2']

      new_options = opts.merge(
        :operation => :"NfseApi.baixar_xml_cancelamento_nfse",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NfseApi#baixar_xml_cancelamento_nfse\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Baixar XML da DPS
    # @param id [String] ID único da NFS-e gerado pela Nuvem Fiscal.
    # @param [Hash] opts the optional parameters
    # @return [File]
    def baixar_xml_dps(id, opts = {})
      data, _status_code, _headers = baixar_xml_dps_with_http_info(id, opts)
      data
    end

    # Baixar XML da DPS
    # @param id [String] ID único da NFS-e gerado pela Nuvem Fiscal.
    # @param [Hash] opts the optional parameters
    # @return [Array<(File, Integer, Hash)>] File data, response status code and response headers
    def baixar_xml_dps_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NfseApi.baixar_xml_dps ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling NfseApi.baixar_xml_dps"
      end
      # resource path
      local_var_path = '/nfse/{id}/xml/dps'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'File'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['jwt', 'oauth2']

      new_options = opts.merge(
        :operation => :"NfseApi.baixar_xml_dps",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NfseApi#baixar_xml_dps\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Baixar XML da NFS-e processada
    # @param id [String] ID único da NFS-e gerado pela Nuvem Fiscal.
    # @param [Hash] opts the optional parameters
    # @return [File]
    def baixar_xml_nfse(id, opts = {})
      data, _status_code, _headers = baixar_xml_nfse_with_http_info(id, opts)
      data
    end

    # Baixar XML da NFS-e processada
    # @param id [String] ID único da NFS-e gerado pela Nuvem Fiscal.
    # @param [Hash] opts the optional parameters
    # @return [Array<(File, Integer, Hash)>] File data, response status code and response headers
    def baixar_xml_nfse_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NfseApi.baixar_xml_nfse ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling NfseApi.baixar_xml_nfse"
      end
      # resource path
      local_var_path = '/nfse/{id}/xml'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'File'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['jwt', 'oauth2']

      new_options = opts.merge(
        :operation => :"NfseApi.baixar_xml_nfse",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NfseApi#baixar_xml_nfse\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Cancelar uma NFS-e autorizada
    # **Informações adicionais**:  - Cota: <a href=\"/docs/limites#dfe-eventos\">dfe-eventos</a>  - Consumo: 1 unidade por requisição.
    # @param id [String] ID único da NFS-e gerado pela Nuvem Fiscal.
    # @param [Hash] opts the optional parameters
    # @option opts [NfsePedidoCancelamento] :body 
    # @return [NfseCancelamento]
    def cancelar_nfse(id, opts = {})
      data, _status_code, _headers = cancelar_nfse_with_http_info(id, opts)
      data
    end

    # Cancelar uma NFS-e autorizada
    # **Informações adicionais**:  - Cota: &lt;a href&#x3D;\&quot;/docs/limites#dfe-eventos\&quot;&gt;dfe-eventos&lt;/a&gt;  - Consumo: 1 unidade por requisição.
    # @param id [String] ID único da NFS-e gerado pela Nuvem Fiscal.
    # @param [Hash] opts the optional parameters
    # @option opts [NfsePedidoCancelamento] :body 
    # @return [Array<(NfseCancelamento, Integer, Hash)>] NfseCancelamento data, response status code and response headers
    def cancelar_nfse_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NfseApi.cancelar_nfse ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling NfseApi.cancelar_nfse"
      end
      # resource path
      local_var_path = '/nfse/{id}/cancelamento'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'body'])

      # return_type
      return_type = opts[:debug_return_type] || 'NfseCancelamento'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['jwt', 'oauth2']

      new_options = opts.merge(
        :operation => :"NfseApi.cancelar_nfse",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NfseApi#cancelar_nfse\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Cidades atendidas
    # Fornece uma relação completa de todos os municípios atendidos pela Nuvem Fiscal.
    # @param [Hash] opts the optional parameters
    # @return [NfseCidadesAtendidas]
    def cidades_atendidas(opts = {})
      data, _status_code, _headers = cidades_atendidas_with_http_info(opts)
      data
    end

    # Cidades atendidas
    # Fornece uma relação completa de todos os municípios atendidos pela Nuvem Fiscal.
    # @param [Hash] opts the optional parameters
    # @return [Array<(NfseCidadesAtendidas, Integer, Hash)>] NfseCidadesAtendidas data, response status code and response headers
    def cidades_atendidas_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NfseApi.cidades_atendidas ...'
      end
      # resource path
      local_var_path = '/nfse/cidades'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'NfseCidadesAtendidas'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['jwt', 'oauth2']

      new_options = opts.merge(
        :operation => :"NfseApi.cidades_atendidas",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NfseApi#cidades_atendidas\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Consultar o cancelamento da NFS-e
    # @param id [String] ID único da NFS-e gerado pela Nuvem Fiscal.
    # @param [Hash] opts the optional parameters
    # @return [NfseCancelamento]
    def consultar_cancelamento_nfse(id, opts = {})
      data, _status_code, _headers = consultar_cancelamento_nfse_with_http_info(id, opts)
      data
    end

    # Consultar o cancelamento da NFS-e
    # @param id [String] ID único da NFS-e gerado pela Nuvem Fiscal.
    # @param [Hash] opts the optional parameters
    # @return [Array<(NfseCancelamento, Integer, Hash)>] NfseCancelamento data, response status code and response headers
    def consultar_cancelamento_nfse_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NfseApi.consultar_cancelamento_nfse ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling NfseApi.consultar_cancelamento_nfse"
      end
      # resource path
      local_var_path = '/nfse/{id}/cancelamento'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'NfseCancelamento'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['jwt', 'oauth2']

      new_options = opts.merge(
        :operation => :"NfseApi.consultar_cancelamento_nfse",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NfseApi#consultar_cancelamento_nfse\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Consultar lote de NFS-e
    # Consulta os detalhes de um lote já existente. Forneça o ID único obtido de uma requisição de emissão ou de listagem de lotes e a Nuvem Fiscal irá retornar as informações do lote correspondente.
    # @param id [String] ID único do lote gerado pela Nuvem Fiscal.
    # @param [Hash] opts the optional parameters
    # @return [RpsLote]
    def consultar_lote_nfse(id, opts = {})
      data, _status_code, _headers = consultar_lote_nfse_with_http_info(id, opts)
      data
    end

    # Consultar lote de NFS-e
    # Consulta os detalhes de um lote já existente. Forneça o ID único obtido de uma requisição de emissão ou de listagem de lotes e a Nuvem Fiscal irá retornar as informações do lote correspondente.
    # @param id [String] ID único do lote gerado pela Nuvem Fiscal.
    # @param [Hash] opts the optional parameters
    # @return [Array<(RpsLote, Integer, Hash)>] RpsLote data, response status code and response headers
    def consultar_lote_nfse_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NfseApi.consultar_lote_nfse ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling NfseApi.consultar_lote_nfse"
      end
      # resource path
      local_var_path = '/nfse/lotes/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'RpsLote'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['jwt', 'oauth2']

      new_options = opts.merge(
        :operation => :"NfseApi.consultar_lote_nfse",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NfseApi#consultar_lote_nfse\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Consultar metadados
    # Consulta a disponibilidade de emissão e alguns metadados de um município.
    # @param codigo_ibge [String] Código IBGE do município.
    # @param [Hash] opts the optional parameters
    # @return [NfseCidadeMetadados]
    def consultar_metadados(codigo_ibge, opts = {})
      data, _status_code, _headers = consultar_metadados_with_http_info(codigo_ibge, opts)
      data
    end

    # Consultar metadados
    # Consulta a disponibilidade de emissão e alguns metadados de um município.
    # @param codigo_ibge [String] Código IBGE do município.
    # @param [Hash] opts the optional parameters
    # @return [Array<(NfseCidadeMetadados, Integer, Hash)>] NfseCidadeMetadados data, response status code and response headers
    def consultar_metadados_with_http_info(codigo_ibge, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NfseApi.consultar_metadados ...'
      end
      # verify the required parameter 'codigo_ibge' is set
      if @api_client.config.client_side_validation && codigo_ibge.nil?
        fail ArgumentError, "Missing the required parameter 'codigo_ibge' when calling NfseApi.consultar_metadados"
      end
      # resource path
      local_var_path = '/nfse/cidades/{codigo_ibge}'.sub('{' + 'codigo_ibge' + '}', CGI.escape(codigo_ibge.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'NfseCidadeMetadados'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['jwt', 'oauth2']

      new_options = opts.merge(
        :operation => :"NfseApi.consultar_metadados",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NfseApi#consultar_metadados\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Consultar NFS-e
    # Consulta os detalhes de uma NFS-e já existente. Forneça o ID único obtido de uma requisição de criação ou de listagem de notas e a Nuvem Fiscal irá retornar as informações da nota correspondente.
    # @param id [String] ID único da NFS-e gerado pela Nuvem Fiscal.
    # @param [Hash] opts the optional parameters
    # @return [Nfse]
    def consultar_nfse(id, opts = {})
      data, _status_code, _headers = consultar_nfse_with_http_info(id, opts)
      data
    end

    # Consultar NFS-e
    # Consulta os detalhes de uma NFS-e já existente. Forneça o ID único obtido de uma requisição de criação ou de listagem de notas e a Nuvem Fiscal irá retornar as informações da nota correspondente.
    # @param id [String] ID único da NFS-e gerado pela Nuvem Fiscal.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Nfse, Integer, Hash)>] Nfse data, response status code and response headers
    def consultar_nfse_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NfseApi.consultar_nfse ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling NfseApi.consultar_nfse"
      end
      # resource path
      local_var_path = '/nfse/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Nfse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['jwt', 'oauth2']

      new_options = opts.merge(
        :operation => :"NfseApi.consultar_nfse",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NfseApi#consultar_nfse\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Emitir lote de NFS-e
    # **Informações adicionais**:  - Cota: <a href=\"/docs/limites#dfe-eventos\">dfe-eventos</a>  - Consumo: 1 unidade por NFS-e.
    # @param body [RpsPedidoEmissaoLote] 
    # @param [Hash] opts the optional parameters
    # @return [RpsLote]
    def emitir_lote_nfse(body, opts = {})
      data, _status_code, _headers = emitir_lote_nfse_with_http_info(body, opts)
      data
    end

    # Emitir lote de NFS-e
    # **Informações adicionais**:  - Cota: &lt;a href&#x3D;\&quot;/docs/limites#dfe-eventos\&quot;&gt;dfe-eventos&lt;/a&gt;  - Consumo: 1 unidade por NFS-e.
    # @param body [RpsPedidoEmissaoLote] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(RpsLote, Integer, Hash)>] RpsLote data, response status code and response headers
    def emitir_lote_nfse_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NfseApi.emitir_lote_nfse ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling NfseApi.emitir_lote_nfse"
      end
      # resource path
      local_var_path = '/nfse/lotes'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'RpsLote'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['jwt', 'oauth2']

      new_options = opts.merge(
        :operation => :"NfseApi.emitir_lote_nfse",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NfseApi#emitir_lote_nfse\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Emitir lote de NFS-e
    # **Informações adicionais**:  - Cota: <a href=\"/docs/limites#dfe-eventos\">dfe-eventos</a>  - Consumo: 1 unidade por NFS-e.
    # @param body [NfseLoteDpsPedidoEmissao] 
    # @param [Hash] opts the optional parameters
    # @return [RpsLote]
    def emitir_lote_nfse_dps(body, opts = {})
      data, _status_code, _headers = emitir_lote_nfse_dps_with_http_info(body, opts)
      data
    end

    # Emitir lote de NFS-e
    # **Informações adicionais**:  - Cota: &lt;a href&#x3D;\&quot;/docs/limites#dfe-eventos\&quot;&gt;dfe-eventos&lt;/a&gt;  - Consumo: 1 unidade por NFS-e.
    # @param body [NfseLoteDpsPedidoEmissao] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(RpsLote, Integer, Hash)>] RpsLote data, response status code and response headers
    def emitir_lote_nfse_dps_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NfseApi.emitir_lote_nfse_dps ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling NfseApi.emitir_lote_nfse_dps"
      end
      # resource path
      local_var_path = '/nfse/dps/lotes'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'RpsLote'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['jwt', 'oauth2']

      new_options = opts.merge(
        :operation => :"NfseApi.emitir_lote_nfse_dps",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NfseApi#emitir_lote_nfse_dps\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Emitir NFS-e
    # **Informações adicionais**:  - Cota: <a href=\"/docs/limites#dfe-eventos\">dfe-eventos</a>  - Consumo: 1 unidade por requisição.
    # @param body [NfsePedidoEmissao] 
    # @param [Hash] opts the optional parameters
    # @return [Nfse]
    def emitir_nfse(body, opts = {})
      data, _status_code, _headers = emitir_nfse_with_http_info(body, opts)
      data
    end

    # Emitir NFS-e
    # **Informações adicionais**:  - Cota: &lt;a href&#x3D;\&quot;/docs/limites#dfe-eventos\&quot;&gt;dfe-eventos&lt;/a&gt;  - Consumo: 1 unidade por requisição.
    # @param body [NfsePedidoEmissao] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Nfse, Integer, Hash)>] Nfse data, response status code and response headers
    def emitir_nfse_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NfseApi.emitir_nfse ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling NfseApi.emitir_nfse"
      end
      # resource path
      local_var_path = '/nfse'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'Nfse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['jwt', 'oauth2']

      new_options = opts.merge(
        :operation => :"NfseApi.emitir_nfse",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NfseApi#emitir_nfse\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Emitir NFS-e
    # **Informações adicionais**:  - Cota: <a href=\"/docs/limites#dfe-eventos\">dfe-eventos</a>  - Consumo: 1 unidade por requisição.
    # @param body [NfseDpsPedidoEmissao] 
    # @param [Hash] opts the optional parameters
    # @return [Nfse]
    def emitir_nfse_dps(body, opts = {})
      data, _status_code, _headers = emitir_nfse_dps_with_http_info(body, opts)
      data
    end

    # Emitir NFS-e
    # **Informações adicionais**:  - Cota: &lt;a href&#x3D;\&quot;/docs/limites#dfe-eventos\&quot;&gt;dfe-eventos&lt;/a&gt;  - Consumo: 1 unidade por requisição.
    # @param body [NfseDpsPedidoEmissao] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Nfse, Integer, Hash)>] Nfse data, response status code and response headers
    def emitir_nfse_dps_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NfseApi.emitir_nfse_dps ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling NfseApi.emitir_nfse_dps"
      end
      # resource path
      local_var_path = '/nfse/dps'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'Nfse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['jwt', 'oauth2']

      new_options = opts.merge(
        :operation => :"NfseApi.emitir_nfse_dps",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NfseApi#emitir_nfse_dps\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Listar lotes de NFS-e
    # Retorna a lista dos lotes de acordo com os critérios de busca utilizados. Os lotes são retornados ordenados pela data da criação, com os mais recentes aparecendo primeiro.
    # @param cpf_cnpj [String] Filtrar pelo CPF ou CNPJ do emitente.  Utilize o valor sem máscara.
    # @param ambiente [String] Identificação do Ambiente.    Valores aceitos: homologacao, producao
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :top Limite no número de objetos a serem retornados pela API, entre 1 e 100. (default to 10)
    # @option opts [Integer] :skip Quantidade de objetos que serão ignorados antes da lista começar a ser retornada. (default to 0)
    # @option opts [Boolean] :inlinecount Inclui no JSON de resposta, na propriedade &#x60;@count&#x60;, o número total de registros que o filtro retornaria, independente dos filtros de paginação. (default to false)
    # @option opts [String] :referencia 
    # @return [RpsLoteListagem]
    def listar_lotes_nfse(cpf_cnpj, ambiente, opts = {})
      data, _status_code, _headers = listar_lotes_nfse_with_http_info(cpf_cnpj, ambiente, opts)
      data
    end

    # Listar lotes de NFS-e
    # Retorna a lista dos lotes de acordo com os critérios de busca utilizados. Os lotes são retornados ordenados pela data da criação, com os mais recentes aparecendo primeiro.
    # @param cpf_cnpj [String] Filtrar pelo CPF ou CNPJ do emitente.  Utilize o valor sem máscara.
    # @param ambiente [String] Identificação do Ambiente.    Valores aceitos: homologacao, producao
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :top Limite no número de objetos a serem retornados pela API, entre 1 e 100. (default to 10)
    # @option opts [Integer] :skip Quantidade de objetos que serão ignorados antes da lista começar a ser retornada. (default to 0)
    # @option opts [Boolean] :inlinecount Inclui no JSON de resposta, na propriedade &#x60;@count&#x60;, o número total de registros que o filtro retornaria, independente dos filtros de paginação. (default to false)
    # @option opts [String] :referencia 
    # @return [Array<(RpsLoteListagem, Integer, Hash)>] RpsLoteListagem data, response status code and response headers
    def listar_lotes_nfse_with_http_info(cpf_cnpj, ambiente, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NfseApi.listar_lotes_nfse ...'
      end
      # verify the required parameter 'cpf_cnpj' is set
      if @api_client.config.client_side_validation && cpf_cnpj.nil?
        fail ArgumentError, "Missing the required parameter 'cpf_cnpj' when calling NfseApi.listar_lotes_nfse"
      end
      # verify the required parameter 'ambiente' is set
      if @api_client.config.client_side_validation && ambiente.nil?
        fail ArgumentError, "Missing the required parameter 'ambiente' when calling NfseApi.listar_lotes_nfse"
      end
      # resource path
      local_var_path = '/nfse/lotes'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'cpf_cnpj'] = cpf_cnpj
      query_params[:'ambiente'] = ambiente
      query_params[:'$top'] = opts[:'top'] if !opts[:'top'].nil?
      query_params[:'$skip'] = opts[:'skip'] if !opts[:'skip'].nil?
      query_params[:'$inlinecount'] = opts[:'inlinecount'] if !opts[:'inlinecount'].nil?
      query_params[:'referencia'] = opts[:'referencia'] if !opts[:'referencia'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'RpsLoteListagem'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['jwt', 'oauth2']

      new_options = opts.merge(
        :operation => :"NfseApi.listar_lotes_nfse",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NfseApi#listar_lotes_nfse\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Listar NFS-e
    # Retorna a lista de notas de acordo com os critérios de busca utilizados. As notas são retornadas ordenadas pela data da criação, com as mais recentes aparecendo primeiro.
    # @param cpf_cnpj [String] Filtrar pelo CPF ou CNPJ do emitente.    Utilize o valor sem máscara.
    # @param ambiente [String] Identificação do Ambiente.    Valores aceitos: homologacao, producao
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :top Limite no número de objetos a serem retornados pela API, entre 1 e 100. (default to 10)
    # @option opts [Integer] :skip Quantidade de objetos que serão ignorados antes da lista começar a ser retornada. (default to 0)
    # @option opts [Boolean] :inlinecount Inclui no JSON de resposta, na propriedade &#x60;@count&#x60;, o número total de registros que o filtro retornaria, independente dos filtros de paginação. (default to false)
    # @option opts [String] :referencia Seu identificador único para o documento.
    # @option opts [String] :chave Chave de acesso do DF-e.
    # @option opts [String] :serie Série do DF-e.
    # @return [NfseListagem]
    def listar_nfse(cpf_cnpj, ambiente, opts = {})
      data, _status_code, _headers = listar_nfse_with_http_info(cpf_cnpj, ambiente, opts)
      data
    end

    # Listar NFS-e
    # Retorna a lista de notas de acordo com os critérios de busca utilizados. As notas são retornadas ordenadas pela data da criação, com as mais recentes aparecendo primeiro.
    # @param cpf_cnpj [String] Filtrar pelo CPF ou CNPJ do emitente.    Utilize o valor sem máscara.
    # @param ambiente [String] Identificação do Ambiente.    Valores aceitos: homologacao, producao
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :top Limite no número de objetos a serem retornados pela API, entre 1 e 100. (default to 10)
    # @option opts [Integer] :skip Quantidade de objetos que serão ignorados antes da lista começar a ser retornada. (default to 0)
    # @option opts [Boolean] :inlinecount Inclui no JSON de resposta, na propriedade &#x60;@count&#x60;, o número total de registros que o filtro retornaria, independente dos filtros de paginação. (default to false)
    # @option opts [String] :referencia Seu identificador único para o documento.
    # @option opts [String] :chave Chave de acesso do DF-e.
    # @option opts [String] :serie Série do DF-e.
    # @return [Array<(NfseListagem, Integer, Hash)>] NfseListagem data, response status code and response headers
    def listar_nfse_with_http_info(cpf_cnpj, ambiente, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NfseApi.listar_nfse ...'
      end
      # verify the required parameter 'cpf_cnpj' is set
      if @api_client.config.client_side_validation && cpf_cnpj.nil?
        fail ArgumentError, "Missing the required parameter 'cpf_cnpj' when calling NfseApi.listar_nfse"
      end
      # verify the required parameter 'ambiente' is set
      if @api_client.config.client_side_validation && ambiente.nil?
        fail ArgumentError, "Missing the required parameter 'ambiente' when calling NfseApi.listar_nfse"
      end
      # resource path
      local_var_path = '/nfse'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'cpf_cnpj'] = cpf_cnpj
      query_params[:'ambiente'] = ambiente
      query_params[:'$top'] = opts[:'top'] if !opts[:'top'].nil?
      query_params[:'$skip'] = opts[:'skip'] if !opts[:'skip'].nil?
      query_params[:'$inlinecount'] = opts[:'inlinecount'] if !opts[:'inlinecount'].nil?
      query_params[:'referencia'] = opts[:'referencia'] if !opts[:'referencia'].nil?
      query_params[:'chave'] = opts[:'chave'] if !opts[:'chave'].nil?
      query_params[:'serie'] = opts[:'serie'] if !opts[:'serie'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'NfseListagem'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['jwt', 'oauth2']

      new_options = opts.merge(
        :operation => :"NfseApi.listar_nfse",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NfseApi#listar_nfse\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Sincroniza dados na NFS-e a partir da Prefeitura
    # Realiza a sincronização dos dados a partir da consulta da situação atual da NFS-e na prefeitura.    **Cenários de uso**:  * Sincronizar uma nota que se encontra com o status `processando` na Nuvem Fiscal, mas está autorizada na prefeitura;  * Sincronizar uma nota que se encontra com o status `erro` na Nuvem Fiscal, mas está autorizada na prefeitura (útil em casos de erros de transmissão, como instabilidades e timeouts);  * Sincronizar uma nota que se encontra com o status `autorizada`na Nuvem Fiscal, mas está cancelada na prefeitura.    **Informações adicionais**:  - Cota: <a href=\"/docs/limites#dfe-eventos\">dfe-eventos</a>  - Consumo: 1 unidade por evento sincronizado ou requisição.
    # @param id [String] ID único da NFS-e gerado pela Nuvem Fiscal.
    # @param [Hash] opts the optional parameters
    # @option opts [NfsePedidoSincronizacao] :body 
    # @return [NfseSincronizacao]
    def sincronizar_nfse(id, opts = {})
      data, _status_code, _headers = sincronizar_nfse_with_http_info(id, opts)
      data
    end

    # Sincroniza dados na NFS-e a partir da Prefeitura
    # Realiza a sincronização dos dados a partir da consulta da situação atual da NFS-e na prefeitura.    **Cenários de uso**:  * Sincronizar uma nota que se encontra com o status &#x60;processando&#x60; na Nuvem Fiscal, mas está autorizada na prefeitura;  * Sincronizar uma nota que se encontra com o status &#x60;erro&#x60; na Nuvem Fiscal, mas está autorizada na prefeitura (útil em casos de erros de transmissão, como instabilidades e timeouts);  * Sincronizar uma nota que se encontra com o status &#x60;autorizada&#x60;na Nuvem Fiscal, mas está cancelada na prefeitura.    **Informações adicionais**:  - Cota: &lt;a href&#x3D;\&quot;/docs/limites#dfe-eventos\&quot;&gt;dfe-eventos&lt;/a&gt;  - Consumo: 1 unidade por evento sincronizado ou requisição.
    # @param id [String] ID único da NFS-e gerado pela Nuvem Fiscal.
    # @param [Hash] opts the optional parameters
    # @option opts [NfsePedidoSincronizacao] :body 
    # @return [Array<(NfseSincronizacao, Integer, Hash)>] NfseSincronizacao data, response status code and response headers
    def sincronizar_nfse_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NfseApi.sincronizar_nfse ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling NfseApi.sincronizar_nfse"
      end
      # resource path
      local_var_path = '/nfse/{id}/sincronizar'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'body'])

      # return_type
      return_type = opts[:debug_return_type] || 'NfseSincronizacao'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['jwt', 'oauth2']

      new_options = opts.merge(
        :operation => :"NfseApi.sincronizar_nfse",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NfseApi#sincronizar_nfse\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
