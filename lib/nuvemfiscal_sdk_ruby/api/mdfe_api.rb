=begin
#API Nuvem Fiscal

#API para automação comercial e documentos fiscais.

The version of the OpenAPI document: 2.44.0

Generated by: https://openapi-generator.tech
Generator version: 7.10.0

=end

require 'cgi'

module NuvemfiscalSdkRuby
  class MdfeApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Baixar PDF do cancelamento
    # @param id [String] ID único do MDF-e gerado pela Nuvem Fiscal.
    # @param [Hash] opts the optional parameters
    # @return [File]
    def baixar_pdf_cancelamento_mdfe(id, opts = {})
      data, _status_code, _headers = baixar_pdf_cancelamento_mdfe_with_http_info(id, opts)
      data
    end

    # Baixar PDF do cancelamento
    # @param id [String] ID único do MDF-e gerado pela Nuvem Fiscal.
    # @param [Hash] opts the optional parameters
    # @return [Array<(File, Integer, Hash)>] File data, response status code and response headers
    def baixar_pdf_cancelamento_mdfe_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MdfeApi.baixar_pdf_cancelamento_mdfe ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling MdfeApi.baixar_pdf_cancelamento_mdfe"
      end
      # resource path
      local_var_path = '/mdfe/{id}/cancelamento/pdf'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'File'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['jwt', 'oauth2']

      new_options = opts.merge(
        :operation => :"MdfeApi.baixar_pdf_cancelamento_mdfe",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MdfeApi#baixar_pdf_cancelamento_mdfe\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Baixar PDF do encerramento
    # @param id [String] ID único do MDF-e gerado pela Nuvem Fiscal.
    # @param [Hash] opts the optional parameters
    # @return [File]
    def baixar_pdf_encerramento_mdfe(id, opts = {})
      data, _status_code, _headers = baixar_pdf_encerramento_mdfe_with_http_info(id, opts)
      data
    end

    # Baixar PDF do encerramento
    # @param id [String] ID único do MDF-e gerado pela Nuvem Fiscal.
    # @param [Hash] opts the optional parameters
    # @return [Array<(File, Integer, Hash)>] File data, response status code and response headers
    def baixar_pdf_encerramento_mdfe_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MdfeApi.baixar_pdf_encerramento_mdfe ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling MdfeApi.baixar_pdf_encerramento_mdfe"
      end
      # resource path
      local_var_path = '/mdfe/{id}/encerramento/pdf'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'File'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['jwt', 'oauth2']

      new_options = opts.merge(
        :operation => :"MdfeApi.baixar_pdf_encerramento_mdfe",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MdfeApi#baixar_pdf_encerramento_mdfe\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Baixar PDF do evento
    # @param id [String] ID único do evento gerado pela Nuvem Fiscal.
    # @param [Hash] opts the optional parameters
    # @return [File]
    def baixar_pdf_evento_mdfe(id, opts = {})
      data, _status_code, _headers = baixar_pdf_evento_mdfe_with_http_info(id, opts)
      data
    end

    # Baixar PDF do evento
    # @param id [String] ID único do evento gerado pela Nuvem Fiscal.
    # @param [Hash] opts the optional parameters
    # @return [Array<(File, Integer, Hash)>] File data, response status code and response headers
    def baixar_pdf_evento_mdfe_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MdfeApi.baixar_pdf_evento_mdfe ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling MdfeApi.baixar_pdf_evento_mdfe"
      end
      # resource path
      local_var_path = '/mdfe/eventos/{id}/pdf'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'File'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['jwt', 'oauth2']

      new_options = opts.merge(
        :operation => :"MdfeApi.baixar_pdf_evento_mdfe",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MdfeApi#baixar_pdf_evento_mdfe\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Baixar PDF do DAMDFE
    # @param id [String] ID único do MDF-e gerado pela Nuvem Fiscal.
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :logotipo Imprime o documento com logotipo, desde que esteja cadastrado na empresa. (default to false)
    # @return [File]
    def baixar_pdf_mdfe(id, opts = {})
      data, _status_code, _headers = baixar_pdf_mdfe_with_http_info(id, opts)
      data
    end

    # Baixar PDF do DAMDFE
    # @param id [String] ID único do MDF-e gerado pela Nuvem Fiscal.
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :logotipo Imprime o documento com logotipo, desde que esteja cadastrado na empresa. (default to false)
    # @return [Array<(File, Integer, Hash)>] File data, response status code and response headers
    def baixar_pdf_mdfe_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MdfeApi.baixar_pdf_mdfe ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling MdfeApi.baixar_pdf_mdfe"
      end
      # resource path
      local_var_path = '/mdfe/{id}/pdf'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'logotipo'] = opts[:'logotipo'] if !opts[:'logotipo'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'File'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['jwt', 'oauth2']

      new_options = opts.merge(
        :operation => :"MdfeApi.baixar_pdf_mdfe",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MdfeApi#baixar_pdf_mdfe\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Baixar XML do cancelamento
    # @param id [String] ID único do MDF-e gerado pela Nuvem Fiscal.
    # @param [Hash] opts the optional parameters
    # @return [File]
    def baixar_xml_cancelamento_mdfe(id, opts = {})
      data, _status_code, _headers = baixar_xml_cancelamento_mdfe_with_http_info(id, opts)
      data
    end

    # Baixar XML do cancelamento
    # @param id [String] ID único do MDF-e gerado pela Nuvem Fiscal.
    # @param [Hash] opts the optional parameters
    # @return [Array<(File, Integer, Hash)>] File data, response status code and response headers
    def baixar_xml_cancelamento_mdfe_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MdfeApi.baixar_xml_cancelamento_mdfe ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling MdfeApi.baixar_xml_cancelamento_mdfe"
      end
      # resource path
      local_var_path = '/mdfe/{id}/cancelamento/xml'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'File'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['jwt', 'oauth2']

      new_options = opts.merge(
        :operation => :"MdfeApi.baixar_xml_cancelamento_mdfe",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MdfeApi#baixar_xml_cancelamento_mdfe\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Baixar XML do encerramento
    # @param id [String] ID único do MDF-e gerado pela Nuvem Fiscal.
    # @param [Hash] opts the optional parameters
    # @return [File]
    def baixar_xml_encerramento_mdfe(id, opts = {})
      data, _status_code, _headers = baixar_xml_encerramento_mdfe_with_http_info(id, opts)
      data
    end

    # Baixar XML do encerramento
    # @param id [String] ID único do MDF-e gerado pela Nuvem Fiscal.
    # @param [Hash] opts the optional parameters
    # @return [Array<(File, Integer, Hash)>] File data, response status code and response headers
    def baixar_xml_encerramento_mdfe_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MdfeApi.baixar_xml_encerramento_mdfe ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling MdfeApi.baixar_xml_encerramento_mdfe"
      end
      # resource path
      local_var_path = '/mdfe/{id}/encerramento/xml'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'File'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['jwt', 'oauth2']

      new_options = opts.merge(
        :operation => :"MdfeApi.baixar_xml_encerramento_mdfe",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MdfeApi#baixar_xml_encerramento_mdfe\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Baixar XML do evento
    # @param id [String] ID único do evento gerado pela Nuvem Fiscal.
    # @param [Hash] opts the optional parameters
    # @return [File]
    def baixar_xml_evento_mdfe(id, opts = {})
      data, _status_code, _headers = baixar_xml_evento_mdfe_with_http_info(id, opts)
      data
    end

    # Baixar XML do evento
    # @param id [String] ID único do evento gerado pela Nuvem Fiscal.
    # @param [Hash] opts the optional parameters
    # @return [Array<(File, Integer, Hash)>] File data, response status code and response headers
    def baixar_xml_evento_mdfe_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MdfeApi.baixar_xml_evento_mdfe ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling MdfeApi.baixar_xml_evento_mdfe"
      end
      # resource path
      local_var_path = '/mdfe/eventos/{id}/xml'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'File'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['jwt', 'oauth2']

      new_options = opts.merge(
        :operation => :"MdfeApi.baixar_xml_evento_mdfe",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MdfeApi#baixar_xml_evento_mdfe\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Baixar XML do MDF-e processado
    # Utilize esse endpoint para obter o XML do manifesto enviado para a SEFAZ, complementado com a informação do protocolo de autorização ou denegação de uso (TAG raiz `mdfeProc`).    O XML só estará disponível nesse endpoint caso o manifesto tenha sido autorizado ou denegado pela SEFAZ. Para obter o XML nos demais casos, utilize o endpoint `GET /mdfe/{id}/xml/manifesto`.
    # @param id [String] ID único do MDF-e gerado pela Nuvem Fiscal.
    # @param [Hash] opts the optional parameters
    # @return [File]
    def baixar_xml_mdfe(id, opts = {})
      data, _status_code, _headers = baixar_xml_mdfe_with_http_info(id, opts)
      data
    end

    # Baixar XML do MDF-e processado
    # Utilize esse endpoint para obter o XML do manifesto enviado para a SEFAZ, complementado com a informação do protocolo de autorização ou denegação de uso (TAG raiz &#x60;mdfeProc&#x60;).    O XML só estará disponível nesse endpoint caso o manifesto tenha sido autorizado ou denegado pela SEFAZ. Para obter o XML nos demais casos, utilize o endpoint &#x60;GET /mdfe/{id}/xml/manifesto&#x60;.
    # @param id [String] ID único do MDF-e gerado pela Nuvem Fiscal.
    # @param [Hash] opts the optional parameters
    # @return [Array<(File, Integer, Hash)>] File data, response status code and response headers
    def baixar_xml_mdfe_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MdfeApi.baixar_xml_mdfe ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling MdfeApi.baixar_xml_mdfe"
      end
      # resource path
      local_var_path = '/mdfe/{id}/xml'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'File'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['jwt', 'oauth2']

      new_options = opts.merge(
        :operation => :"MdfeApi.baixar_xml_mdfe",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MdfeApi#baixar_xml_mdfe\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Baixar XML do MDF-e
    # Utilize esse endpoint para obter o XML do manifesto enviado para a SEFAZ.    O XML estará disponível nesse endpoint mesmo em casos que o manifesto tenha sido rejeitado.
    # @param id [String] ID único da MDF-e gerado pela Nuvem Fiscal.
    # @param [Hash] opts the optional parameters
    # @return [File]
    def baixar_xml_mdfe_manifesto(id, opts = {})
      data, _status_code, _headers = baixar_xml_mdfe_manifesto_with_http_info(id, opts)
      data
    end

    # Baixar XML do MDF-e
    # Utilize esse endpoint para obter o XML do manifesto enviado para a SEFAZ.    O XML estará disponível nesse endpoint mesmo em casos que o manifesto tenha sido rejeitado.
    # @param id [String] ID único da MDF-e gerado pela Nuvem Fiscal.
    # @param [Hash] opts the optional parameters
    # @return [Array<(File, Integer, Hash)>] File data, response status code and response headers
    def baixar_xml_mdfe_manifesto_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MdfeApi.baixar_xml_mdfe_manifesto ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling MdfeApi.baixar_xml_mdfe_manifesto"
      end
      # resource path
      local_var_path = '/mdfe/{id}/xml/manifesto'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'File'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['jwt', 'oauth2']

      new_options = opts.merge(
        :operation => :"MdfeApi.baixar_xml_mdfe_manifesto",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MdfeApi#baixar_xml_mdfe_manifesto\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Baixar XML do Protocolo da SEFAZ
    # @param id [String] ID único da MDF-e gerado pela Nuvem Fiscal.
    # @param [Hash] opts the optional parameters
    # @return [File]
    def baixar_xml_mdfe_protocolo(id, opts = {})
      data, _status_code, _headers = baixar_xml_mdfe_protocolo_with_http_info(id, opts)
      data
    end

    # Baixar XML do Protocolo da SEFAZ
    # @param id [String] ID único da MDF-e gerado pela Nuvem Fiscal.
    # @param [Hash] opts the optional parameters
    # @return [Array<(File, Integer, Hash)>] File data, response status code and response headers
    def baixar_xml_mdfe_protocolo_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MdfeApi.baixar_xml_mdfe_protocolo ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling MdfeApi.baixar_xml_mdfe_protocolo"
      end
      # resource path
      local_var_path = '/mdfe/{id}/xml/protocolo'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'File'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['jwt', 'oauth2']

      new_options = opts.merge(
        :operation => :"MdfeApi.baixar_xml_mdfe_protocolo",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MdfeApi#baixar_xml_mdfe_protocolo\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Cancelar um MDF-e autorizado
    # **Informações adicionais**:  - Cota: <a href=\"/docs/limites#dfe-eventos\">dfe-eventos</a>  - Consumo: 1 unidade por requisição.
    # @param id [String] ID único do MDF-e gerado pela Nuvem Fiscal.
    # @param [Hash] opts the optional parameters
    # @option opts [MdfePedidoCancelamento] :body Dados do cancelamento.
    # @return [DfeCancelamento]
    def cancelar_mdfe(id, opts = {})
      data, _status_code, _headers = cancelar_mdfe_with_http_info(id, opts)
      data
    end

    # Cancelar um MDF-e autorizado
    # **Informações adicionais**:  - Cota: &lt;a href&#x3D;\&quot;/docs/limites#dfe-eventos\&quot;&gt;dfe-eventos&lt;/a&gt;  - Consumo: 1 unidade por requisição.
    # @param id [String] ID único do MDF-e gerado pela Nuvem Fiscal.
    # @param [Hash] opts the optional parameters
    # @option opts [MdfePedidoCancelamento] :body Dados do cancelamento.
    # @return [Array<(DfeCancelamento, Integer, Hash)>] DfeCancelamento data, response status code and response headers
    def cancelar_mdfe_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MdfeApi.cancelar_mdfe ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling MdfeApi.cancelar_mdfe"
      end
      # resource path
      local_var_path = '/mdfe/{id}/cancelamento'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'body'])

      # return_type
      return_type = opts[:debug_return_type] || 'DfeCancelamento'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['jwt', 'oauth2']

      new_options = opts.merge(
        :operation => :"MdfeApi.cancelar_mdfe",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MdfeApi#cancelar_mdfe\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Consultar o cancelamento do MDF-e
    # @param id [String] ID único do MDF-e gerado pela Nuvem Fiscal.
    # @param [Hash] opts the optional parameters
    # @return [DfeCancelamento]
    def consultar_cancelamento_mdfe(id, opts = {})
      data, _status_code, _headers = consultar_cancelamento_mdfe_with_http_info(id, opts)
      data
    end

    # Consultar o cancelamento do MDF-e
    # @param id [String] ID único do MDF-e gerado pela Nuvem Fiscal.
    # @param [Hash] opts the optional parameters
    # @return [Array<(DfeCancelamento, Integer, Hash)>] DfeCancelamento data, response status code and response headers
    def consultar_cancelamento_mdfe_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MdfeApi.consultar_cancelamento_mdfe ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling MdfeApi.consultar_cancelamento_mdfe"
      end
      # resource path
      local_var_path = '/mdfe/{id}/cancelamento'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'DfeCancelamento'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['jwt', 'oauth2']

      new_options = opts.merge(
        :operation => :"MdfeApi.consultar_cancelamento_mdfe",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MdfeApi#consultar_cancelamento_mdfe\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Consultar encerramento do MDF-e
    # @param id [String] ID único do MDF-e gerado pela Nuvem Fiscal.
    # @param [Hash] opts the optional parameters
    # @return [MdfeEncerramento]
    def consultar_encerramento_mdfe(id, opts = {})
      data, _status_code, _headers = consultar_encerramento_mdfe_with_http_info(id, opts)
      data
    end

    # Consultar encerramento do MDF-e
    # @param id [String] ID único do MDF-e gerado pela Nuvem Fiscal.
    # @param [Hash] opts the optional parameters
    # @return [Array<(MdfeEncerramento, Integer, Hash)>] MdfeEncerramento data, response status code and response headers
    def consultar_encerramento_mdfe_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MdfeApi.consultar_encerramento_mdfe ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling MdfeApi.consultar_encerramento_mdfe"
      end
      # resource path
      local_var_path = '/mdfe/{id}/encerramento'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'MdfeEncerramento'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['jwt', 'oauth2']

      new_options = opts.merge(
        :operation => :"MdfeApi.consultar_encerramento_mdfe",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MdfeApi#consultar_encerramento_mdfe\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Consultar evento do MDF-e
    # @param id [String] ID único do evento gerado pela Nuvem Fiscal.
    # @param [Hash] opts the optional parameters
    # @return [DfeEvento]
    def consultar_evento_mdfe(id, opts = {})
      data, _status_code, _headers = consultar_evento_mdfe_with_http_info(id, opts)
      data
    end

    # Consultar evento do MDF-e
    # @param id [String] ID único do evento gerado pela Nuvem Fiscal.
    # @param [Hash] opts the optional parameters
    # @return [Array<(DfeEvento, Integer, Hash)>] DfeEvento data, response status code and response headers
    def consultar_evento_mdfe_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MdfeApi.consultar_evento_mdfe ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling MdfeApi.consultar_evento_mdfe"
      end
      # resource path
      local_var_path = '/mdfe/eventos/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'DfeEvento'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['jwt', 'oauth2']

      new_options = opts.merge(
        :operation => :"MdfeApi.consultar_evento_mdfe",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MdfeApi#consultar_evento_mdfe\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Consultar lote de MDF-e
    # Consulta os detalhes de um lote já existente. Forneça o ID único obtido de uma requisição de emissão ou de listagem de lotes e a Nuvem Fiscal irá retornar as informações do lote correspondente.
    # @param id [String] ID único do lote gerado pela Nuvem Fiscal.
    # @param [Hash] opts the optional parameters
    # @return [DfeLote]
    def consultar_lote_mdfe(id, opts = {})
      data, _status_code, _headers = consultar_lote_mdfe_with_http_info(id, opts)
      data
    end

    # Consultar lote de MDF-e
    # Consulta os detalhes de um lote já existente. Forneça o ID único obtido de uma requisição de emissão ou de listagem de lotes e a Nuvem Fiscal irá retornar as informações do lote correspondente.
    # @param id [String] ID único do lote gerado pela Nuvem Fiscal.
    # @param [Hash] opts the optional parameters
    # @return [Array<(DfeLote, Integer, Hash)>] DfeLote data, response status code and response headers
    def consultar_lote_mdfe_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MdfeApi.consultar_lote_mdfe ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling MdfeApi.consultar_lote_mdfe"
      end
      # resource path
      local_var_path = '/mdfe/lotes/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'DfeLote'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['jwt', 'oauth2']

      new_options = opts.merge(
        :operation => :"MdfeApi.consultar_lote_mdfe",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MdfeApi#consultar_lote_mdfe\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Consultar manifesto
    # Consulta os detalhes de um manifesto já existente. Forneça o ID único obtido de uma requisição de emissão ou de listagem de manifestos e a Nuvem Fiscal irá retornar as informações do manifesto correspondente.
    # @param id [String] ID único do MDF-e gerado pela Nuvem Fiscal.
    # @param [Hash] opts the optional parameters
    # @return [Dfe]
    def consultar_mdfe(id, opts = {})
      data, _status_code, _headers = consultar_mdfe_with_http_info(id, opts)
      data
    end

    # Consultar manifesto
    # Consulta os detalhes de um manifesto já existente. Forneça o ID único obtido de uma requisição de emissão ou de listagem de manifestos e a Nuvem Fiscal irá retornar as informações do manifesto correspondente.
    # @param id [String] ID único do MDF-e gerado pela Nuvem Fiscal.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Dfe, Integer, Hash)>] Dfe data, response status code and response headers
    def consultar_mdfe_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MdfeApi.consultar_mdfe ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling MdfeApi.consultar_mdfe"
      end
      # resource path
      local_var_path = '/mdfe/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Dfe'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['jwt', 'oauth2']

      new_options = opts.merge(
        :operation => :"MdfeApi.consultar_mdfe",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MdfeApi#consultar_mdfe\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Consulta MDF-e não encerrados
    # @param cpf_cnpj [String] CPF/CNPJ do emitente.  Utilize o valor sem máscara.
    # @param [Hash] opts the optional parameters
    # @return [MdfeNaoEncerrados]
    def consultar_mdfe_nao_encerrados(cpf_cnpj, opts = {})
      data, _status_code, _headers = consultar_mdfe_nao_encerrados_with_http_info(cpf_cnpj, opts)
      data
    end

    # Consulta MDF-e não encerrados
    # @param cpf_cnpj [String] CPF/CNPJ do emitente.  Utilize o valor sem máscara.
    # @param [Hash] opts the optional parameters
    # @return [Array<(MdfeNaoEncerrados, Integer, Hash)>] MdfeNaoEncerrados data, response status code and response headers
    def consultar_mdfe_nao_encerrados_with_http_info(cpf_cnpj, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MdfeApi.consultar_mdfe_nao_encerrados ...'
      end
      # verify the required parameter 'cpf_cnpj' is set
      if @api_client.config.client_side_validation && cpf_cnpj.nil?
        fail ArgumentError, "Missing the required parameter 'cpf_cnpj' when calling MdfeApi.consultar_mdfe_nao_encerrados"
      end
      # resource path
      local_var_path = '/mdfe/nao-encerrados'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'cpf_cnpj'] = cpf_cnpj

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'MdfeNaoEncerrados'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['jwt', 'oauth2']

      new_options = opts.merge(
        :operation => :"MdfeApi.consultar_mdfe_nao_encerrados",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MdfeApi#consultar_mdfe_nao_encerrados\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Consulta do Status do Serviço na SEFAZ Autorizadora
    # Consulta do status do serviço prestado pelo Portal da Secretaria de Fazenda Estadual.    A Nuvem Fiscal mantém a última consulta em cache por 5 minutos, evitando sobrecarregar desnecessariamente os servidores da SEFAZ (conforme orientação do MOC - versão 3.0.0a, item 4.6.3). Dessa forma, você poderá chamar esse endpoint quantas vezes quiser, sem preocupar-se em ter o seu CNPJ bloqueado por consumo indevido (Rejeição 656).
    # @param cpf_cnpj [String] CPF/CNPJ do emitente.  Utilize o valor sem máscara.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :autorizador Ambiente Autorizador.    Autorizadores disponíveis: &#x60;SVRS&#x60;.    *Caso não seja informado, será utilizado o ambiente autorizador da UF do emitente.*
    # @return [DfeSefazStatus]
    def consultar_status_sefaz_mdfe(cpf_cnpj, opts = {})
      data, _status_code, _headers = consultar_status_sefaz_mdfe_with_http_info(cpf_cnpj, opts)
      data
    end

    # Consulta do Status do Serviço na SEFAZ Autorizadora
    # Consulta do status do serviço prestado pelo Portal da Secretaria de Fazenda Estadual.    A Nuvem Fiscal mantém a última consulta em cache por 5 minutos, evitando sobrecarregar desnecessariamente os servidores da SEFAZ (conforme orientação do MOC - versão 3.0.0a, item 4.6.3). Dessa forma, você poderá chamar esse endpoint quantas vezes quiser, sem preocupar-se em ter o seu CNPJ bloqueado por consumo indevido (Rejeição 656).
    # @param cpf_cnpj [String] CPF/CNPJ do emitente.  Utilize o valor sem máscara.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :autorizador Ambiente Autorizador.    Autorizadores disponíveis: &#x60;SVRS&#x60;.    *Caso não seja informado, será utilizado o ambiente autorizador da UF do emitente.*
    # @return [Array<(DfeSefazStatus, Integer, Hash)>] DfeSefazStatus data, response status code and response headers
    def consultar_status_sefaz_mdfe_with_http_info(cpf_cnpj, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MdfeApi.consultar_status_sefaz_mdfe ...'
      end
      # verify the required parameter 'cpf_cnpj' is set
      if @api_client.config.client_side_validation && cpf_cnpj.nil?
        fail ArgumentError, "Missing the required parameter 'cpf_cnpj' when calling MdfeApi.consultar_status_sefaz_mdfe"
      end
      # resource path
      local_var_path = '/mdfe/sefaz/status'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'cpf_cnpj'] = cpf_cnpj
      query_params[:'autorizador'] = opts[:'autorizador'] if !opts[:'autorizador'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'DfeSefazStatus'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['jwt', 'oauth2']

      new_options = opts.merge(
        :operation => :"MdfeApi.consultar_status_sefaz_mdfe",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MdfeApi#consultar_status_sefaz_mdfe\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Emitir lote de MDF-e
    # **Informações adicionais**:  - Cota: <a href=\"/docs/limites#dfe-eventos\">dfe-eventos</a>  - Consumo: 1 unidade por MDF-e.
    # @param body [MdfePedidoEmissaoLote] 
    # @param [Hash] opts the optional parameters
    # @return [DfeLote]
    def emitir_lote_mdfe(body, opts = {})
      data, _status_code, _headers = emitir_lote_mdfe_with_http_info(body, opts)
      data
    end

    # Emitir lote de MDF-e
    # **Informações adicionais**:  - Cota: &lt;a href&#x3D;\&quot;/docs/limites#dfe-eventos\&quot;&gt;dfe-eventos&lt;/a&gt;  - Consumo: 1 unidade por MDF-e.
    # @param body [MdfePedidoEmissaoLote] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(DfeLote, Integer, Hash)>] DfeLote data, response status code and response headers
    def emitir_lote_mdfe_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MdfeApi.emitir_lote_mdfe ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling MdfeApi.emitir_lote_mdfe"
      end
      # resource path
      local_var_path = '/mdfe/lotes'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'DfeLote'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['jwt', 'oauth2']

      new_options = opts.merge(
        :operation => :"MdfeApi.emitir_lote_mdfe",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MdfeApi#emitir_lote_mdfe\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Emitir MDF-e
    # **Informações adicionais**:  - Cota: <a href=\"/docs/limites#dfe-eventos\">dfe-eventos</a>  - Consumo: 1 unidade por requisição.
    # @param body [MdfePedidoEmissao] 
    # @param [Hash] opts the optional parameters
    # @return [Dfe]
    def emitir_mdfe(body, opts = {})
      data, _status_code, _headers = emitir_mdfe_with_http_info(body, opts)
      data
    end

    # Emitir MDF-e
    # **Informações adicionais**:  - Cota: &lt;a href&#x3D;\&quot;/docs/limites#dfe-eventos\&quot;&gt;dfe-eventos&lt;/a&gt;  - Consumo: 1 unidade por requisição.
    # @param body [MdfePedidoEmissao] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Dfe, Integer, Hash)>] Dfe data, response status code and response headers
    def emitir_mdfe_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MdfeApi.emitir_mdfe ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling MdfeApi.emitir_mdfe"
      end
      # resource path
      local_var_path = '/mdfe'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'Dfe'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['jwt', 'oauth2']

      new_options = opts.merge(
        :operation => :"MdfeApi.emitir_mdfe",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MdfeApi#emitir_mdfe\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Encerrar um MDF-e autorizado
    # **Informações adicionais**:  - Cota: <a href=\"/docs/limites#dfe-eventos\">dfe-eventos</a>  - Consumo: 1 unidade por requisição.
    # @param id [String] ID único do MDF-e gerado pela Nuvem Fiscal.
    # @param body [MdfePedidoEncerramento] 
    # @param [Hash] opts the optional parameters
    # @return [MdfeEncerramento]
    def encerrar_mdfe(id, body, opts = {})
      data, _status_code, _headers = encerrar_mdfe_with_http_info(id, body, opts)
      data
    end

    # Encerrar um MDF-e autorizado
    # **Informações adicionais**:  - Cota: &lt;a href&#x3D;\&quot;/docs/limites#dfe-eventos\&quot;&gt;dfe-eventos&lt;/a&gt;  - Consumo: 1 unidade por requisição.
    # @param id [String] ID único do MDF-e gerado pela Nuvem Fiscal.
    # @param body [MdfePedidoEncerramento] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(MdfeEncerramento, Integer, Hash)>] MdfeEncerramento data, response status code and response headers
    def encerrar_mdfe_with_http_info(id, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MdfeApi.encerrar_mdfe ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling MdfeApi.encerrar_mdfe"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling MdfeApi.encerrar_mdfe"
      end
      # resource path
      local_var_path = '/mdfe/{id}/encerramento'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'MdfeEncerramento'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['jwt', 'oauth2']

      new_options = opts.merge(
        :operation => :"MdfeApi.encerrar_mdfe",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MdfeApi#encerrar_mdfe\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Incluir um condutor em um MDF-e autorizado
    # **Informações adicionais**:  - Cota: <a href=\"/docs/limites#dfe-eventos\">dfe-eventos</a>  - Consumo: 1 unidade por requisição.
    # @param id [String] ID único do MDF-e gerado pela Nuvem Fiscal.
    # @param body [MdfePedidoInclusaoCondutor] 
    # @param [Hash] opts the optional parameters
    # @return [MdfeInclusaoCondutor]
    def incluir_condutor_mdfe(id, body, opts = {})
      data, _status_code, _headers = incluir_condutor_mdfe_with_http_info(id, body, opts)
      data
    end

    # Incluir um condutor em um MDF-e autorizado
    # **Informações adicionais**:  - Cota: &lt;a href&#x3D;\&quot;/docs/limites#dfe-eventos\&quot;&gt;dfe-eventos&lt;/a&gt;  - Consumo: 1 unidade por requisição.
    # @param id [String] ID único do MDF-e gerado pela Nuvem Fiscal.
    # @param body [MdfePedidoInclusaoCondutor] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(MdfeInclusaoCondutor, Integer, Hash)>] MdfeInclusaoCondutor data, response status code and response headers
    def incluir_condutor_mdfe_with_http_info(id, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MdfeApi.incluir_condutor_mdfe ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling MdfeApi.incluir_condutor_mdfe"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling MdfeApi.incluir_condutor_mdfe"
      end
      # resource path
      local_var_path = '/mdfe/{id}/inclusao-condutor'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'MdfeInclusaoCondutor'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['jwt', 'oauth2']

      new_options = opts.merge(
        :operation => :"MdfeApi.incluir_condutor_mdfe",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MdfeApi#incluir_condutor_mdfe\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Incluir um DF-e em um MDF-e autorizado
    # **Informações adicionais**:  - Cota: <a href=\"/docs/limites#dfe-eventos\">dfe-eventos</a>  - Consumo: 1 unidade por requisição.
    # @param id [String] ID único do MDF-e gerado pela Nuvem Fiscal.
    # @param body [MdfePedidoInclusaoDfe] 
    # @param [Hash] opts the optional parameters
    # @return [MdfeInclusaoDfe]
    def incluir_dfe_mdfe(id, body, opts = {})
      data, _status_code, _headers = incluir_dfe_mdfe_with_http_info(id, body, opts)
      data
    end

    # Incluir um DF-e em um MDF-e autorizado
    # **Informações adicionais**:  - Cota: &lt;a href&#x3D;\&quot;/docs/limites#dfe-eventos\&quot;&gt;dfe-eventos&lt;/a&gt;  - Consumo: 1 unidade por requisição.
    # @param id [String] ID único do MDF-e gerado pela Nuvem Fiscal.
    # @param body [MdfePedidoInclusaoDfe] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(MdfeInclusaoDfe, Integer, Hash)>] MdfeInclusaoDfe data, response status code and response headers
    def incluir_dfe_mdfe_with_http_info(id, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MdfeApi.incluir_dfe_mdfe ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling MdfeApi.incluir_dfe_mdfe"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling MdfeApi.incluir_dfe_mdfe"
      end
      # resource path
      local_var_path = '/mdfe/{id}/inclusao-dfe'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'MdfeInclusaoDfe'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['jwt', 'oauth2']

      new_options = opts.merge(
        :operation => :"MdfeApi.incluir_dfe_mdfe",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MdfeApi#incluir_dfe_mdfe\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Listar lotes de MDF-e
    # Retorna a lista dos lotes de acordo com os critérios de busca utilizados. Os lotes são retornados ordenados pela data da criação, com os mais recentes aparecendo primeiro.
    # @param cpf_cnpj [String] Filtrar pelo CPF ou CNPJ do emitente.  Utilize o valor sem máscara.
    # @param ambiente [String] Identificação do Ambiente.    Valores aceitos: homologacao, producao
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :top Limite no número de objetos a serem retornados pela API, entre 1 e 100. (default to 10)
    # @option opts [Integer] :skip Quantidade de objetos que serão ignorados antes da lista começar a ser retornada. (default to 0)
    # @option opts [Boolean] :inlinecount Inclui no JSON de resposta, na propriedade &#x60;@count&#x60;, o número total de registros que o filtro retornaria, independente dos filtros de paginação. (default to false)
    # @option opts [String] :referencia 
    # @return [DfeLoteListagem]
    def listar_lotes_mdfe(cpf_cnpj, ambiente, opts = {})
      data, _status_code, _headers = listar_lotes_mdfe_with_http_info(cpf_cnpj, ambiente, opts)
      data
    end

    # Listar lotes de MDF-e
    # Retorna a lista dos lotes de acordo com os critérios de busca utilizados. Os lotes são retornados ordenados pela data da criação, com os mais recentes aparecendo primeiro.
    # @param cpf_cnpj [String] Filtrar pelo CPF ou CNPJ do emitente.  Utilize o valor sem máscara.
    # @param ambiente [String] Identificação do Ambiente.    Valores aceitos: homologacao, producao
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :top Limite no número de objetos a serem retornados pela API, entre 1 e 100. (default to 10)
    # @option opts [Integer] :skip Quantidade de objetos que serão ignorados antes da lista começar a ser retornada. (default to 0)
    # @option opts [Boolean] :inlinecount Inclui no JSON de resposta, na propriedade &#x60;@count&#x60;, o número total de registros que o filtro retornaria, independente dos filtros de paginação. (default to false)
    # @option opts [String] :referencia 
    # @return [Array<(DfeLoteListagem, Integer, Hash)>] DfeLoteListagem data, response status code and response headers
    def listar_lotes_mdfe_with_http_info(cpf_cnpj, ambiente, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MdfeApi.listar_lotes_mdfe ...'
      end
      # verify the required parameter 'cpf_cnpj' is set
      if @api_client.config.client_side_validation && cpf_cnpj.nil?
        fail ArgumentError, "Missing the required parameter 'cpf_cnpj' when calling MdfeApi.listar_lotes_mdfe"
      end
      # verify the required parameter 'ambiente' is set
      if @api_client.config.client_side_validation && ambiente.nil?
        fail ArgumentError, "Missing the required parameter 'ambiente' when calling MdfeApi.listar_lotes_mdfe"
      end
      # resource path
      local_var_path = '/mdfe/lotes'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'cpf_cnpj'] = cpf_cnpj
      query_params[:'ambiente'] = ambiente
      query_params[:'$top'] = opts[:'top'] if !opts[:'top'].nil?
      query_params[:'$skip'] = opts[:'skip'] if !opts[:'skip'].nil?
      query_params[:'$inlinecount'] = opts[:'inlinecount'] if !opts[:'inlinecount'].nil?
      query_params[:'referencia'] = opts[:'referencia'] if !opts[:'referencia'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'DfeLoteListagem'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['jwt', 'oauth2']

      new_options = opts.merge(
        :operation => :"MdfeApi.listar_lotes_mdfe",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MdfeApi#listar_lotes_mdfe\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Listar MDF-e
    # Retorna a lista de manifestos de acordo com os critérios de busca utilizados. Os manifestos são retornados ordenados pela data da criação, com os mais recentes aparecendo primeiro.
    # @param cpf_cnpj [String] Filtrar pelo CPF ou CNPJ do emitente.    Utilize o valor sem máscara.
    # @param ambiente [String] Identificação do Ambiente.    Valores aceitos: homologacao, producao
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :top Limite no número de objetos a serem retornados pela API, entre 1 e 100. (default to 10)
    # @option opts [Integer] :skip Quantidade de objetos que serão ignorados antes da lista começar a ser retornada. (default to 0)
    # @option opts [Boolean] :inlinecount Inclui no JSON de resposta, na propriedade &#x60;@count&#x60;, o número total de registros que o filtro retornaria, independente dos filtros de paginação. (default to false)
    # @option opts [String] :referencia Seu identificador único para o documento.
    # @option opts [String] :chave Chave de acesso do DF-e.
    # @option opts [String] :serie Série do DF-e.
    # @return [DfeListagem]
    def listar_mdfe(cpf_cnpj, ambiente, opts = {})
      data, _status_code, _headers = listar_mdfe_with_http_info(cpf_cnpj, ambiente, opts)
      data
    end

    # Listar MDF-e
    # Retorna a lista de manifestos de acordo com os critérios de busca utilizados. Os manifestos são retornados ordenados pela data da criação, com os mais recentes aparecendo primeiro.
    # @param cpf_cnpj [String] Filtrar pelo CPF ou CNPJ do emitente.    Utilize o valor sem máscara.
    # @param ambiente [String] Identificação do Ambiente.    Valores aceitos: homologacao, producao
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :top Limite no número de objetos a serem retornados pela API, entre 1 e 100. (default to 10)
    # @option opts [Integer] :skip Quantidade de objetos que serão ignorados antes da lista começar a ser retornada. (default to 0)
    # @option opts [Boolean] :inlinecount Inclui no JSON de resposta, na propriedade &#x60;@count&#x60;, o número total de registros que o filtro retornaria, independente dos filtros de paginação. (default to false)
    # @option opts [String] :referencia Seu identificador único para o documento.
    # @option opts [String] :chave Chave de acesso do DF-e.
    # @option opts [String] :serie Série do DF-e.
    # @return [Array<(DfeListagem, Integer, Hash)>] DfeListagem data, response status code and response headers
    def listar_mdfe_with_http_info(cpf_cnpj, ambiente, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MdfeApi.listar_mdfe ...'
      end
      # verify the required parameter 'cpf_cnpj' is set
      if @api_client.config.client_side_validation && cpf_cnpj.nil?
        fail ArgumentError, "Missing the required parameter 'cpf_cnpj' when calling MdfeApi.listar_mdfe"
      end
      # verify the required parameter 'ambiente' is set
      if @api_client.config.client_side_validation && ambiente.nil?
        fail ArgumentError, "Missing the required parameter 'ambiente' when calling MdfeApi.listar_mdfe"
      end
      # resource path
      local_var_path = '/mdfe'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'cpf_cnpj'] = cpf_cnpj
      query_params[:'ambiente'] = ambiente
      query_params[:'$top'] = opts[:'top'] if !opts[:'top'].nil?
      query_params[:'$skip'] = opts[:'skip'] if !opts[:'skip'].nil?
      query_params[:'$inlinecount'] = opts[:'inlinecount'] if !opts[:'inlinecount'].nil?
      query_params[:'referencia'] = opts[:'referencia'] if !opts[:'referencia'].nil?
      query_params[:'chave'] = opts[:'chave'] if !opts[:'chave'].nil?
      query_params[:'serie'] = opts[:'serie'] if !opts[:'serie'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'DfeListagem'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['jwt', 'oauth2']

      new_options = opts.merge(
        :operation => :"MdfeApi.listar_mdfe",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MdfeApi#listar_mdfe\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Sincroniza dados no MDF-e a partir da SEFAZ
    # Realiza a sincronização dos dados a partir da consulta da situação atual da MDF-e na Base de Dados do Portal da Secretaria de Fazenda Estadual.    **Cenários de uso**:  * Sincronizar um manifesto que se encontra com o status `erro` na Nuvem Fiscal, mas está autorizado na SEFAZ (útil em casos de erros de transmissão com a SEFAZ, como instabilidades e timeouts).  * Sincronizar um manifesto que se encontra com o status `autorizado`na Nuvem Fiscal, mas está cancelado ou encerrado na SEFAZ.  * Sincronizar todos os eventos de Cancelamento, Encerramento, Inclusão de condutor e Inclusão de DF-e de um manifesto que porventura não tenham sido feitos a partir da Nuvem Fiscal.    **Informações adicionais**:  - Cota: <a href=\"/docs/limites#dfe-eventos\">dfe-eventos</a>  - Consumo: 1 unidade por evento sincronizado ou requisição.
    # @param id [String] ID único do MDF-e gerado pela Nuvem Fiscal.
    # @param [Hash] opts the optional parameters
    # @return [DfeSincronizacao]
    def sincronizar_mdfe(id, opts = {})
      data, _status_code, _headers = sincronizar_mdfe_with_http_info(id, opts)
      data
    end

    # Sincroniza dados no MDF-e a partir da SEFAZ
    # Realiza a sincronização dos dados a partir da consulta da situação atual da MDF-e na Base de Dados do Portal da Secretaria de Fazenda Estadual.    **Cenários de uso**:  * Sincronizar um manifesto que se encontra com o status &#x60;erro&#x60; na Nuvem Fiscal, mas está autorizado na SEFAZ (útil em casos de erros de transmissão com a SEFAZ, como instabilidades e timeouts).  * Sincronizar um manifesto que se encontra com o status &#x60;autorizado&#x60;na Nuvem Fiscal, mas está cancelado ou encerrado na SEFAZ.  * Sincronizar todos os eventos de Cancelamento, Encerramento, Inclusão de condutor e Inclusão de DF-e de um manifesto que porventura não tenham sido feitos a partir da Nuvem Fiscal.    **Informações adicionais**:  - Cota: &lt;a href&#x3D;\&quot;/docs/limites#dfe-eventos\&quot;&gt;dfe-eventos&lt;/a&gt;  - Consumo: 1 unidade por evento sincronizado ou requisição.
    # @param id [String] ID único do MDF-e gerado pela Nuvem Fiscal.
    # @param [Hash] opts the optional parameters
    # @return [Array<(DfeSincronizacao, Integer, Hash)>] DfeSincronizacao data, response status code and response headers
    def sincronizar_mdfe_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MdfeApi.sincronizar_mdfe ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling MdfeApi.sincronizar_mdfe"
      end
      # resource path
      local_var_path = '/mdfe/{id}/sincronizar'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'DfeSincronizacao'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['jwt', 'oauth2']

      new_options = opts.merge(
        :operation => :"MdfeApi.sincronizar_mdfe",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MdfeApi#sincronizar_mdfe\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
