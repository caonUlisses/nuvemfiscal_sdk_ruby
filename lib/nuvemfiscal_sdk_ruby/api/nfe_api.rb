=begin
#API Nuvem Fiscal

#API para automação comercial e documentos fiscais.

The version of the OpenAPI document: 2.44.0

Generated by: https://openapi-generator.tech
Generator version: 7.10.0

=end

require 'cgi'

module NuvemfiscalSdkRuby
  class NfeApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Baixar PDF do cancelamento
    # @param id [String] ID único da NF-e gerado pela Nuvem Fiscal.
    # @param [Hash] opts the optional parameters
    # @return [File]
    def baixar_pdf_cancelamento_nfe(id, opts = {})
      data, _status_code, _headers = baixar_pdf_cancelamento_nfe_with_http_info(id, opts)
      data
    end

    # Baixar PDF do cancelamento
    # @param id [String] ID único da NF-e gerado pela Nuvem Fiscal.
    # @param [Hash] opts the optional parameters
    # @return [Array<(File, Integer, Hash)>] File data, response status code and response headers
    def baixar_pdf_cancelamento_nfe_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NfeApi.baixar_pdf_cancelamento_nfe ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling NfeApi.baixar_pdf_cancelamento_nfe"
      end
      # resource path
      local_var_path = '/nfe/{id}/cancelamento/pdf'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'File'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['jwt', 'oauth2']

      new_options = opts.merge(
        :operation => :"NfeApi.baixar_pdf_cancelamento_nfe",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NfeApi#baixar_pdf_cancelamento_nfe\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Baixar PDF da carta de correção
    # @param id [String] ID único da NF-e gerado pela Nuvem Fiscal.
    # @param [Hash] opts the optional parameters
    # @return [File]
    def baixar_pdf_carta_correcao_nfe(id, opts = {})
      data, _status_code, _headers = baixar_pdf_carta_correcao_nfe_with_http_info(id, opts)
      data
    end

    # Baixar PDF da carta de correção
    # @param id [String] ID único da NF-e gerado pela Nuvem Fiscal.
    # @param [Hash] opts the optional parameters
    # @return [Array<(File, Integer, Hash)>] File data, response status code and response headers
    def baixar_pdf_carta_correcao_nfe_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NfeApi.baixar_pdf_carta_correcao_nfe ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling NfeApi.baixar_pdf_carta_correcao_nfe"
      end
      # resource path
      local_var_path = '/nfe/{id}/carta-correcao/pdf'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'File'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['jwt', 'oauth2']

      new_options = opts.merge(
        :operation => :"NfeApi.baixar_pdf_carta_correcao_nfe",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NfeApi#baixar_pdf_carta_correcao_nfe\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Baixar PDF do evento
    # @param id [String] ID único do evento gerado pela Nuvem Fiscal.
    # @param [Hash] opts the optional parameters
    # @return [File]
    def baixar_pdf_evento_nfe(id, opts = {})
      data, _status_code, _headers = baixar_pdf_evento_nfe_with_http_info(id, opts)
      data
    end

    # Baixar PDF do evento
    # @param id [String] ID único do evento gerado pela Nuvem Fiscal.
    # @param [Hash] opts the optional parameters
    # @return [Array<(File, Integer, Hash)>] File data, response status code and response headers
    def baixar_pdf_evento_nfe_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NfeApi.baixar_pdf_evento_nfe ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling NfeApi.baixar_pdf_evento_nfe"
      end
      # resource path
      local_var_path = '/nfe/eventos/{id}/pdf'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'File'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['jwt', 'oauth2']

      new_options = opts.merge(
        :operation => :"NfeApi.baixar_pdf_evento_nfe",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NfeApi#baixar_pdf_evento_nfe\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Baixar PDF da inutilização
    # @param id [String] ID único do evento gerado pela Nuvem Fiscal.
    # @param [Hash] opts the optional parameters
    # @return [File]
    def baixar_pdf_inutilizacao_nfe(id, opts = {})
      data, _status_code, _headers = baixar_pdf_inutilizacao_nfe_with_http_info(id, opts)
      data
    end

    # Baixar PDF da inutilização
    # @param id [String] ID único do evento gerado pela Nuvem Fiscal.
    # @param [Hash] opts the optional parameters
    # @return [Array<(File, Integer, Hash)>] File data, response status code and response headers
    def baixar_pdf_inutilizacao_nfe_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NfeApi.baixar_pdf_inutilizacao_nfe ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling NfeApi.baixar_pdf_inutilizacao_nfe"
      end
      # resource path
      local_var_path = '/nfe/inutilizacoes/{id}/pdf'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'File'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['jwt', 'oauth2']

      new_options = opts.merge(
        :operation => :"NfeApi.baixar_pdf_inutilizacao_nfe",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NfeApi#baixar_pdf_inutilizacao_nfe\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Baixar PDF do DANFE
    # @param id [String] ID único da NF-e gerado pela Nuvem Fiscal.
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :logotipo Imprime o documento com logotipo, desde que esteja cadastrado na empresa. (default to false)
    # @option opts [Boolean] :nome_fantasia Exibe o nome fantasia do emitente, desde que esteja presente no XML da nota. (default to false)
    # @option opts [String] :formato Formato de impressão do DANFE.    Valores disponíveis:  - &#x60;padrao&#x60;: será utilizado o formato definido no XML da NF-e (tag \&quot;tpImp\&quot;);  - &#x60;retrato&#x60;: tamanho A4 em modo retrato;  - &#x60;paisagem&#x60;: tamanho A4 em modo paisagem;  - &#x60;simplificado&#x60;: formato simplificado utilizado nas operações realizadas fora do estabelecimento (Anexo II do MOC, item 3.11);  - &#x60;etiqueta&#x60;: formato simplificado utilizado nas operações em comércio eletrônico (Anexo II do MOC, item 3.12 e NT 2020.004). (default to 'padrao')
    # @option opts [String] :mensagem_rodape Imprime mensagem no rodapé do documento.    O caractere &#x60;|&#x60; (pipe) poderá ser utilizado para definir a quantidade e o alinhamento das mensagens.    **Exemplos de Uso:**  * &#x60;\&quot;esquerda\&quot;&#x60;  * &#x60;\&quot;esquerda|centro\&quot;&#x60;  * &#x60;\&quot;esquerda|centro|direita\&quot;&#x60;  * &#x60;\&quot;|centro\&quot;&#x60;, &#x60;\&quot;|centro|\&quot;&#x60;  * &#x60;\&quot;|centro|direita\&quot;&#x60;  * &#x60;\&quot;||direita\&quot;&#x60;  * &#x60;\&quot;esquerda||direita\&quot;&#x60;
    # @option opts [Boolean] :canhoto Imprime o documento com o bloco de canhoto. (default to true)
    # @return [File]
    def baixar_pdf_nfe(id, opts = {})
      data, _status_code, _headers = baixar_pdf_nfe_with_http_info(id, opts)
      data
    end

    # Baixar PDF do DANFE
    # @param id [String] ID único da NF-e gerado pela Nuvem Fiscal.
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :logotipo Imprime o documento com logotipo, desde que esteja cadastrado na empresa. (default to false)
    # @option opts [Boolean] :nome_fantasia Exibe o nome fantasia do emitente, desde que esteja presente no XML da nota. (default to false)
    # @option opts [String] :formato Formato de impressão do DANFE.    Valores disponíveis:  - &#x60;padrao&#x60;: será utilizado o formato definido no XML da NF-e (tag \&quot;tpImp\&quot;);  - &#x60;retrato&#x60;: tamanho A4 em modo retrato;  - &#x60;paisagem&#x60;: tamanho A4 em modo paisagem;  - &#x60;simplificado&#x60;: formato simplificado utilizado nas operações realizadas fora do estabelecimento (Anexo II do MOC, item 3.11);  - &#x60;etiqueta&#x60;: formato simplificado utilizado nas operações em comércio eletrônico (Anexo II do MOC, item 3.12 e NT 2020.004). (default to 'padrao')
    # @option opts [String] :mensagem_rodape Imprime mensagem no rodapé do documento.    O caractere &#x60;|&#x60; (pipe) poderá ser utilizado para definir a quantidade e o alinhamento das mensagens.    **Exemplos de Uso:**  * &#x60;\&quot;esquerda\&quot;&#x60;  * &#x60;\&quot;esquerda|centro\&quot;&#x60;  * &#x60;\&quot;esquerda|centro|direita\&quot;&#x60;  * &#x60;\&quot;|centro\&quot;&#x60;, &#x60;\&quot;|centro|\&quot;&#x60;  * &#x60;\&quot;|centro|direita\&quot;&#x60;  * &#x60;\&quot;||direita\&quot;&#x60;  * &#x60;\&quot;esquerda||direita\&quot;&#x60;
    # @option opts [Boolean] :canhoto Imprime o documento com o bloco de canhoto. (default to true)
    # @return [Array<(File, Integer, Hash)>] File data, response status code and response headers
    def baixar_pdf_nfe_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NfeApi.baixar_pdf_nfe ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling NfeApi.baixar_pdf_nfe"
      end
      if @api_client.config.client_side_validation && !opts[:'mensagem_rodape'].nil? && opts[:'mensagem_rodape'].to_s.length > 120
        fail ArgumentError, 'invalid value for "opts[:"mensagem_rodape"]" when calling NfeApi.baixar_pdf_nfe, the character length must be smaller than or equal to 120.'
      end

      # resource path
      local_var_path = '/nfe/{id}/pdf'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'logotipo'] = opts[:'logotipo'] if !opts[:'logotipo'].nil?
      query_params[:'nome_fantasia'] = opts[:'nome_fantasia'] if !opts[:'nome_fantasia'].nil?
      query_params[:'formato'] = opts[:'formato'] if !opts[:'formato'].nil?
      query_params[:'mensagem_rodape'] = opts[:'mensagem_rodape'] if !opts[:'mensagem_rodape'].nil?
      query_params[:'canhoto'] = opts[:'canhoto'] if !opts[:'canhoto'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'File'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['jwt', 'oauth2']

      new_options = opts.merge(
        :operation => :"NfeApi.baixar_pdf_nfe",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NfeApi#baixar_pdf_nfe\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Prévia do PDF do DANFE
    # Através desse endpoint, é possível enviar os dados de uma NF-e e gerar uma prévia do DANFE.    Os dados de entrada são os mesmos do endpoint de emissão de NF-e (`POST /nfe`).    **Atenção**: O DANFE gerado por este endpoint é apenas para fins de visualização e não possui valor fiscal. Para a emissão de uma NF-e com valor fiscal, utilize o processo de emissão padrão descrito na documentação.    **Informações adicionais**:  - Cota: <a href=\"/docs/limites#dfe-eventos\">dfe-eventos</a>  - Consumo: 1 unidade por requisição.
    # @param body [NfePedidoEmissao] 
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :logotipo Imprime o documento com logotipo, desde que esteja cadastrado na empresa. (default to false)
    # @option opts [Boolean] :nome_fantasia Exibe o nome fantasia do emitente, desde que esteja presente no XML da nota. (default to false)
    # @option opts [String] :formato Formato de impressão do DANFE.    Valores disponíveis:  - &#x60;padrao&#x60;: será utilizado o formato definido no XML da NF-e (tag \&quot;tpImp\&quot;);  - &#x60;retrato&#x60;: tamanho A4 em modo retrato;  - &#x60;paisagem&#x60;: tamanho A4 em modo paisagem;  - &#x60;simplificado&#x60;: formato simplificado utilizado nas operações realizadas fora do estabelecimento (Anexo II do MOC, item 3.11);  - &#x60;etiqueta&#x60;: formato simplificado utilizado nas operações em comércio eletrônico (Anexo II do MOC, item 3.12 e NT 2020.004). (default to 'padrao')
    # @option opts [String] :mensagem_rodape Imprime mensagem no rodapé do documento.    O caractere &#x60;|&#x60; (pipe) poderá ser utilizado para definir a quantidade e o alinhamento das mensagens.    **Exemplos de Uso:**  * &#x60;\&quot;esquerda\&quot;&#x60;  * &#x60;\&quot;esquerda|centro\&quot;&#x60;  * &#x60;\&quot;esquerda|centro|direita\&quot;&#x60;  * &#x60;\&quot;|centro\&quot;&#x60;, &#x60;\&quot;|centro|\&quot;&#x60;  * &#x60;\&quot;|centro|direita\&quot;&#x60;  * &#x60;\&quot;||direita\&quot;&#x60;  * &#x60;\&quot;esquerda||direita\&quot;&#x60;
    # @option opts [Boolean] :canhoto Imprime o documento com o bloco de canhoto. (default to true)
    # @return [File]
    def baixar_previa_pdf_nfe(body, opts = {})
      data, _status_code, _headers = baixar_previa_pdf_nfe_with_http_info(body, opts)
      data
    end

    # Prévia do PDF do DANFE
    # Através desse endpoint, é possível enviar os dados de uma NF-e e gerar uma prévia do DANFE.    Os dados de entrada são os mesmos do endpoint de emissão de NF-e (&#x60;POST /nfe&#x60;).    **Atenção**: O DANFE gerado por este endpoint é apenas para fins de visualização e não possui valor fiscal. Para a emissão de uma NF-e com valor fiscal, utilize o processo de emissão padrão descrito na documentação.    **Informações adicionais**:  - Cota: &lt;a href&#x3D;\&quot;/docs/limites#dfe-eventos\&quot;&gt;dfe-eventos&lt;/a&gt;  - Consumo: 1 unidade por requisição.
    # @param body [NfePedidoEmissao] 
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :logotipo Imprime o documento com logotipo, desde que esteja cadastrado na empresa. (default to false)
    # @option opts [Boolean] :nome_fantasia Exibe o nome fantasia do emitente, desde que esteja presente no XML da nota. (default to false)
    # @option opts [String] :formato Formato de impressão do DANFE.    Valores disponíveis:  - &#x60;padrao&#x60;: será utilizado o formato definido no XML da NF-e (tag \&quot;tpImp\&quot;);  - &#x60;retrato&#x60;: tamanho A4 em modo retrato;  - &#x60;paisagem&#x60;: tamanho A4 em modo paisagem;  - &#x60;simplificado&#x60;: formato simplificado utilizado nas operações realizadas fora do estabelecimento (Anexo II do MOC, item 3.11);  - &#x60;etiqueta&#x60;: formato simplificado utilizado nas operações em comércio eletrônico (Anexo II do MOC, item 3.12 e NT 2020.004). (default to 'padrao')
    # @option opts [String] :mensagem_rodape Imprime mensagem no rodapé do documento.    O caractere &#x60;|&#x60; (pipe) poderá ser utilizado para definir a quantidade e o alinhamento das mensagens.    **Exemplos de Uso:**  * &#x60;\&quot;esquerda\&quot;&#x60;  * &#x60;\&quot;esquerda|centro\&quot;&#x60;  * &#x60;\&quot;esquerda|centro|direita\&quot;&#x60;  * &#x60;\&quot;|centro\&quot;&#x60;, &#x60;\&quot;|centro|\&quot;&#x60;  * &#x60;\&quot;|centro|direita\&quot;&#x60;  * &#x60;\&quot;||direita\&quot;&#x60;  * &#x60;\&quot;esquerda||direita\&quot;&#x60;
    # @option opts [Boolean] :canhoto Imprime o documento com o bloco de canhoto. (default to true)
    # @return [Array<(File, Integer, Hash)>] File data, response status code and response headers
    def baixar_previa_pdf_nfe_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NfeApi.baixar_previa_pdf_nfe ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling NfeApi.baixar_previa_pdf_nfe"
      end
      if @api_client.config.client_side_validation && !opts[:'mensagem_rodape'].nil? && opts[:'mensagem_rodape'].to_s.length > 120
        fail ArgumentError, 'invalid value for "opts[:"mensagem_rodape"]" when calling NfeApi.baixar_previa_pdf_nfe, the character length must be smaller than or equal to 120.'
      end

      # resource path
      local_var_path = '/nfe/previa/pdf'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'logotipo'] = opts[:'logotipo'] if !opts[:'logotipo'].nil?
      query_params[:'nome_fantasia'] = opts[:'nome_fantasia'] if !opts[:'nome_fantasia'].nil?
      query_params[:'formato'] = opts[:'formato'] if !opts[:'formato'].nil?
      query_params[:'mensagem_rodape'] = opts[:'mensagem_rodape'] if !opts[:'mensagem_rodape'].nil?
      query_params[:'canhoto'] = opts[:'canhoto'] if !opts[:'canhoto'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'File'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['jwt', 'oauth2']

      new_options = opts.merge(
        :operation => :"NfeApi.baixar_previa_pdf_nfe",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NfeApi#baixar_previa_pdf_nfe\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Prévia do XML da NF-e
    # Através desse endpoint, é possível enviar os dados de uma NF-e e gerar uma prévia do XML, sem a assinatura digital.    Os dados de entrada são os mesmos do endpoint de emissão de NF-e (`POST /nfe`).    **Atenção**: O XML gerado por este endpoint é apenas para fins de visualização e não possui valor fiscal. Para a emissão de uma NF-e com valor fiscal, utilize o processo de emissão padrão descrito na documentação.    **Informações adicionais**:  - Cota: <a href=\"/docs/limites#dfe-eventos\">dfe-eventos</a>  - Consumo: 1 unidade por requisição.
    # @param body [NfePedidoEmissao] 
    # @param [Hash] opts the optional parameters
    # @return [File]
    def baixar_previa_xml_nfe(body, opts = {})
      data, _status_code, _headers = baixar_previa_xml_nfe_with_http_info(body, opts)
      data
    end

    # Prévia do XML da NF-e
    # Através desse endpoint, é possível enviar os dados de uma NF-e e gerar uma prévia do XML, sem a assinatura digital.    Os dados de entrada são os mesmos do endpoint de emissão de NF-e (&#x60;POST /nfe&#x60;).    **Atenção**: O XML gerado por este endpoint é apenas para fins de visualização e não possui valor fiscal. Para a emissão de uma NF-e com valor fiscal, utilize o processo de emissão padrão descrito na documentação.    **Informações adicionais**:  - Cota: &lt;a href&#x3D;\&quot;/docs/limites#dfe-eventos\&quot;&gt;dfe-eventos&lt;/a&gt;  - Consumo: 1 unidade por requisição.
    # @param body [NfePedidoEmissao] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(File, Integer, Hash)>] File data, response status code and response headers
    def baixar_previa_xml_nfe_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NfeApi.baixar_previa_xml_nfe ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling NfeApi.baixar_previa_xml_nfe"
      end
      # resource path
      local_var_path = '/nfe/previa/xml'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'File'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['jwt', 'oauth2']

      new_options = opts.merge(
        :operation => :"NfeApi.baixar_previa_xml_nfe",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NfeApi#baixar_previa_xml_nfe\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Baixar XML do cancelamento
    # @param id [String] ID único da NF-e gerado pela Nuvem Fiscal.
    # @param [Hash] opts the optional parameters
    # @return [File]
    def baixar_xml_cancelamento_nfe(id, opts = {})
      data, _status_code, _headers = baixar_xml_cancelamento_nfe_with_http_info(id, opts)
      data
    end

    # Baixar XML do cancelamento
    # @param id [String] ID único da NF-e gerado pela Nuvem Fiscal.
    # @param [Hash] opts the optional parameters
    # @return [Array<(File, Integer, Hash)>] File data, response status code and response headers
    def baixar_xml_cancelamento_nfe_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NfeApi.baixar_xml_cancelamento_nfe ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling NfeApi.baixar_xml_cancelamento_nfe"
      end
      # resource path
      local_var_path = '/nfe/{id}/cancelamento/xml'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'File'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['jwt', 'oauth2']

      new_options = opts.merge(
        :operation => :"NfeApi.baixar_xml_cancelamento_nfe",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NfeApi#baixar_xml_cancelamento_nfe\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Baixar XML da carta de correção
    # @param id [String] ID único da NF-e gerado pela Nuvem Fiscal.
    # @param [Hash] opts the optional parameters
    # @return [File]
    def baixar_xml_carta_correcao_nfe(id, opts = {})
      data, _status_code, _headers = baixar_xml_carta_correcao_nfe_with_http_info(id, opts)
      data
    end

    # Baixar XML da carta de correção
    # @param id [String] ID único da NF-e gerado pela Nuvem Fiscal.
    # @param [Hash] opts the optional parameters
    # @return [Array<(File, Integer, Hash)>] File data, response status code and response headers
    def baixar_xml_carta_correcao_nfe_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NfeApi.baixar_xml_carta_correcao_nfe ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling NfeApi.baixar_xml_carta_correcao_nfe"
      end
      # resource path
      local_var_path = '/nfe/{id}/carta-correcao/xml'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'File'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['jwt', 'oauth2']

      new_options = opts.merge(
        :operation => :"NfeApi.baixar_xml_carta_correcao_nfe",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NfeApi#baixar_xml_carta_correcao_nfe\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Baixar XML do evento
    # @param id [String] ID único do evento gerado pela Nuvem Fiscal.
    # @param [Hash] opts the optional parameters
    # @return [File]
    def baixar_xml_evento_nfe(id, opts = {})
      data, _status_code, _headers = baixar_xml_evento_nfe_with_http_info(id, opts)
      data
    end

    # Baixar XML do evento
    # @param id [String] ID único do evento gerado pela Nuvem Fiscal.
    # @param [Hash] opts the optional parameters
    # @return [Array<(File, Integer, Hash)>] File data, response status code and response headers
    def baixar_xml_evento_nfe_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NfeApi.baixar_xml_evento_nfe ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling NfeApi.baixar_xml_evento_nfe"
      end
      # resource path
      local_var_path = '/nfe/eventos/{id}/xml'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'File'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['jwt', 'oauth2']

      new_options = opts.merge(
        :operation => :"NfeApi.baixar_xml_evento_nfe",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NfeApi#baixar_xml_evento_nfe\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Baixar XML da inutilização
    # @param id [String] ID único do evento gerado pela Nuvem Fiscal.
    # @param [Hash] opts the optional parameters
    # @return [File]
    def baixar_xml_inutilizacao_nfe(id, opts = {})
      data, _status_code, _headers = baixar_xml_inutilizacao_nfe_with_http_info(id, opts)
      data
    end

    # Baixar XML da inutilização
    # @param id [String] ID único do evento gerado pela Nuvem Fiscal.
    # @param [Hash] opts the optional parameters
    # @return [Array<(File, Integer, Hash)>] File data, response status code and response headers
    def baixar_xml_inutilizacao_nfe_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NfeApi.baixar_xml_inutilizacao_nfe ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling NfeApi.baixar_xml_inutilizacao_nfe"
      end
      # resource path
      local_var_path = '/nfe/inutilizacoes/{id}/xml'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'File'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['jwt', 'oauth2']

      new_options = opts.merge(
        :operation => :"NfeApi.baixar_xml_inutilizacao_nfe",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NfeApi#baixar_xml_inutilizacao_nfe\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Baixar XML da NF-e processada
    # Utilize esse endpoint para obter o XML da nota enviado para a SEFAZ, complementado com a informação do protocolo de autorização ou denegação de uso (TAG raiz `nfeProc`).    O XML só estará disponível nesse endpoint caso a nota tenha sido autorizada ou denegada pela SEFAZ. Para obter o XML nos demais casos, utilize o endpoint `GET /nfe/{id}/xml/nota`.
    # @param id [String] ID único da NF-e gerado pela Nuvem Fiscal.
    # @param [Hash] opts the optional parameters
    # @return [File]
    def baixar_xml_nfe(id, opts = {})
      data, _status_code, _headers = baixar_xml_nfe_with_http_info(id, opts)
      data
    end

    # Baixar XML da NF-e processada
    # Utilize esse endpoint para obter o XML da nota enviado para a SEFAZ, complementado com a informação do protocolo de autorização ou denegação de uso (TAG raiz &#x60;nfeProc&#x60;).    O XML só estará disponível nesse endpoint caso a nota tenha sido autorizada ou denegada pela SEFAZ. Para obter o XML nos demais casos, utilize o endpoint &#x60;GET /nfe/{id}/xml/nota&#x60;.
    # @param id [String] ID único da NF-e gerado pela Nuvem Fiscal.
    # @param [Hash] opts the optional parameters
    # @return [Array<(File, Integer, Hash)>] File data, response status code and response headers
    def baixar_xml_nfe_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NfeApi.baixar_xml_nfe ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling NfeApi.baixar_xml_nfe"
      end
      # resource path
      local_var_path = '/nfe/{id}/xml'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'File'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['jwt', 'oauth2']

      new_options = opts.merge(
        :operation => :"NfeApi.baixar_xml_nfe",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NfeApi#baixar_xml_nfe\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Baixar XML da NF-e
    # Utilize esse endpoint para obter o XML da nota enviado para a SEFAZ.    O XML estará disponível nesse endpoint mesmo em casos que a nota tenha sido rejeitada.
    # @param id [String] ID único da NF-e gerado pela Nuvem Fiscal.
    # @param [Hash] opts the optional parameters
    # @return [File]
    def baixar_xml_nfe_nota(id, opts = {})
      data, _status_code, _headers = baixar_xml_nfe_nota_with_http_info(id, opts)
      data
    end

    # Baixar XML da NF-e
    # Utilize esse endpoint para obter o XML da nota enviado para a SEFAZ.    O XML estará disponível nesse endpoint mesmo em casos que a nota tenha sido rejeitada.
    # @param id [String] ID único da NF-e gerado pela Nuvem Fiscal.
    # @param [Hash] opts the optional parameters
    # @return [Array<(File, Integer, Hash)>] File data, response status code and response headers
    def baixar_xml_nfe_nota_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NfeApi.baixar_xml_nfe_nota ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling NfeApi.baixar_xml_nfe_nota"
      end
      # resource path
      local_var_path = '/nfe/{id}/xml/nota'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'File'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['jwt', 'oauth2']

      new_options = opts.merge(
        :operation => :"NfeApi.baixar_xml_nfe_nota",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NfeApi#baixar_xml_nfe_nota\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Baixar XML do Protocolo da SEFAZ
    # @param id [String] ID único da NF-e gerado pela Nuvem Fiscal.
    # @param [Hash] opts the optional parameters
    # @return [File]
    def baixar_xml_nfe_protocolo(id, opts = {})
      data, _status_code, _headers = baixar_xml_nfe_protocolo_with_http_info(id, opts)
      data
    end

    # Baixar XML do Protocolo da SEFAZ
    # @param id [String] ID único da NF-e gerado pela Nuvem Fiscal.
    # @param [Hash] opts the optional parameters
    # @return [Array<(File, Integer, Hash)>] File data, response status code and response headers
    def baixar_xml_nfe_protocolo_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NfeApi.baixar_xml_nfe_protocolo ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling NfeApi.baixar_xml_nfe_protocolo"
      end
      # resource path
      local_var_path = '/nfe/{id}/xml/protocolo'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'File'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['jwt', 'oauth2']

      new_options = opts.merge(
        :operation => :"NfeApi.baixar_xml_nfe_protocolo",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NfeApi#baixar_xml_nfe_protocolo\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Cancelar uma NF-e autorizada
    # **Informações adicionais**:  - Cota: <a href=\"/docs/limites#dfe-eventos\">dfe-eventos</a>  - Consumo: 1 unidade por requisição.
    # @param id [String] ID único da NF-e gerado pela Nuvem Fiscal.
    # @param [Hash] opts the optional parameters
    # @option opts [NfePedidoCancelamento] :body 
    # @return [DfeCancelamento]
    def cancelar_nfe(id, opts = {})
      data, _status_code, _headers = cancelar_nfe_with_http_info(id, opts)
      data
    end

    # Cancelar uma NF-e autorizada
    # **Informações adicionais**:  - Cota: &lt;a href&#x3D;\&quot;/docs/limites#dfe-eventos\&quot;&gt;dfe-eventos&lt;/a&gt;  - Consumo: 1 unidade por requisição.
    # @param id [String] ID único da NF-e gerado pela Nuvem Fiscal.
    # @param [Hash] opts the optional parameters
    # @option opts [NfePedidoCancelamento] :body 
    # @return [Array<(DfeCancelamento, Integer, Hash)>] DfeCancelamento data, response status code and response headers
    def cancelar_nfe_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NfeApi.cancelar_nfe ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling NfeApi.cancelar_nfe"
      end
      # resource path
      local_var_path = '/nfe/{id}/cancelamento'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'body'])

      # return_type
      return_type = opts[:debug_return_type] || 'DfeCancelamento'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['jwt', 'oauth2']

      new_options = opts.merge(
        :operation => :"NfeApi.cancelar_nfe",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NfeApi#cancelar_nfe\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Consultar o cancelamento da NF-e
    # @param id [String] ID único da NF-e gerado pela Nuvem Fiscal.
    # @param [Hash] opts the optional parameters
    # @return [DfeCancelamento]
    def consultar_cancelamento_nfe(id, opts = {})
      data, _status_code, _headers = consultar_cancelamento_nfe_with_http_info(id, opts)
      data
    end

    # Consultar o cancelamento da NF-e
    # @param id [String] ID único da NF-e gerado pela Nuvem Fiscal.
    # @param [Hash] opts the optional parameters
    # @return [Array<(DfeCancelamento, Integer, Hash)>] DfeCancelamento data, response status code and response headers
    def consultar_cancelamento_nfe_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NfeApi.consultar_cancelamento_nfe ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling NfeApi.consultar_cancelamento_nfe"
      end
      # resource path
      local_var_path = '/nfe/{id}/cancelamento'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'DfeCancelamento'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['jwt', 'oauth2']

      new_options = opts.merge(
        :operation => :"NfeApi.consultar_cancelamento_nfe",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NfeApi#consultar_cancelamento_nfe\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Consultar a solicitação de correção da NF-e
    # @param id [String] ID único da NF-e gerado pela Nuvem Fiscal.
    # @param [Hash] opts the optional parameters
    # @return [DfeCartaCorrecao]
    def consultar_carta_correcao_nfe(id, opts = {})
      data, _status_code, _headers = consultar_carta_correcao_nfe_with_http_info(id, opts)
      data
    end

    # Consultar a solicitação de correção da NF-e
    # @param id [String] ID único da NF-e gerado pela Nuvem Fiscal.
    # @param [Hash] opts the optional parameters
    # @return [Array<(DfeCartaCorrecao, Integer, Hash)>] DfeCartaCorrecao data, response status code and response headers
    def consultar_carta_correcao_nfe_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NfeApi.consultar_carta_correcao_nfe ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling NfeApi.consultar_carta_correcao_nfe"
      end
      # resource path
      local_var_path = '/nfe/{id}/carta-correcao'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'DfeCartaCorrecao'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['jwt', 'oauth2']

      new_options = opts.merge(
        :operation => :"NfeApi.consultar_carta_correcao_nfe",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NfeApi#consultar_carta_correcao_nfe\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Consultar contribuinte
    # Consulta o Cadastro Centralizado de Contribuintes (CCC) do ICMS da unidade federada.    **Informações adicionais**:  - Cota: <a href=\"/docs/limites#dfe-eventos\">dfe-eventos</a>  - Consumo: 1 unidade por requisição.
    # @param cpf_cnpj [String] CPF ou CNPJ da empresa.    *Utilize o valor sem máscara*.
    # @param argumento [String] Argumento de pesquisa.    Valores válidos:  * &#x60;CNPJ&#x60;  * &#x60;CPF&#x60;  * &#x60;IE&#x60;
    # @param documento [String] Documento a ser consultado (CNPJ, CPF ou Inscrição Estadual).
    # @param [Hash] opts the optional parameters
    # @option opts [String] :uf Sigla da UF consultada.     Utilize &#x60;SU&#x60; para SUFRAMA.    *Caso não seja informada, será utilizada a UF da empresa.*
    # @return [DfeContribuinteInfCons]
    def consultar_contribuinte_nfe(cpf_cnpj, argumento, documento, opts = {})
      data, _status_code, _headers = consultar_contribuinte_nfe_with_http_info(cpf_cnpj, argumento, documento, opts)
      data
    end

    # Consultar contribuinte
    # Consulta o Cadastro Centralizado de Contribuintes (CCC) do ICMS da unidade federada.    **Informações adicionais**:  - Cota: &lt;a href&#x3D;\&quot;/docs/limites#dfe-eventos\&quot;&gt;dfe-eventos&lt;/a&gt;  - Consumo: 1 unidade por requisição.
    # @param cpf_cnpj [String] CPF ou CNPJ da empresa.    *Utilize o valor sem máscara*.
    # @param argumento [String] Argumento de pesquisa.    Valores válidos:  * &#x60;CNPJ&#x60;  * &#x60;CPF&#x60;  * &#x60;IE&#x60;
    # @param documento [String] Documento a ser consultado (CNPJ, CPF ou Inscrição Estadual).
    # @param [Hash] opts the optional parameters
    # @option opts [String] :uf Sigla da UF consultada.     Utilize &#x60;SU&#x60; para SUFRAMA.    *Caso não seja informada, será utilizada a UF da empresa.*
    # @return [Array<(DfeContribuinteInfCons, Integer, Hash)>] DfeContribuinteInfCons data, response status code and response headers
    def consultar_contribuinte_nfe_with_http_info(cpf_cnpj, argumento, documento, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NfeApi.consultar_contribuinte_nfe ...'
      end
      # verify the required parameter 'cpf_cnpj' is set
      if @api_client.config.client_side_validation && cpf_cnpj.nil?
        fail ArgumentError, "Missing the required parameter 'cpf_cnpj' when calling NfeApi.consultar_contribuinte_nfe"
      end
      # verify the required parameter 'argumento' is set
      if @api_client.config.client_side_validation && argumento.nil?
        fail ArgumentError, "Missing the required parameter 'argumento' when calling NfeApi.consultar_contribuinte_nfe"
      end
      # verify the required parameter 'documento' is set
      if @api_client.config.client_side_validation && documento.nil?
        fail ArgumentError, "Missing the required parameter 'documento' when calling NfeApi.consultar_contribuinte_nfe"
      end
      # resource path
      local_var_path = '/nfe/cadastro-contribuinte'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'cpf_cnpj'] = cpf_cnpj
      query_params[:'argumento'] = argumento
      query_params[:'documento'] = documento
      query_params[:'uf'] = opts[:'uf'] if !opts[:'uf'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'DfeContribuinteInfCons'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['jwt', 'oauth2']

      new_options = opts.merge(
        :operation => :"NfeApi.consultar_contribuinte_nfe",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NfeApi#consultar_contribuinte_nfe\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Consultar evento
    # @param id [String] ID único do evento gerado pela Nuvem Fiscal.
    # @param [Hash] opts the optional parameters
    # @return [DfeEvento]
    def consultar_evento_nfe(id, opts = {})
      data, _status_code, _headers = consultar_evento_nfe_with_http_info(id, opts)
      data
    end

    # Consultar evento
    # @param id [String] ID único do evento gerado pela Nuvem Fiscal.
    # @param [Hash] opts the optional parameters
    # @return [Array<(DfeEvento, Integer, Hash)>] DfeEvento data, response status code and response headers
    def consultar_evento_nfe_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NfeApi.consultar_evento_nfe ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling NfeApi.consultar_evento_nfe"
      end
      # resource path
      local_var_path = '/nfe/eventos/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'DfeEvento'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['jwt', 'oauth2']

      new_options = opts.merge(
        :operation => :"NfeApi.consultar_evento_nfe",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NfeApi#consultar_evento_nfe\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Consultar a inutilização de sequência de numeração
    # @param id [String] ID único do evento gerado pela Nuvem Fiscal.
    # @param [Hash] opts the optional parameters
    # @return [DfeInutilizacao]
    def consultar_inutilizacao_nfe(id, opts = {})
      data, _status_code, _headers = consultar_inutilizacao_nfe_with_http_info(id, opts)
      data
    end

    # Consultar a inutilização de sequência de numeração
    # @param id [String] ID único do evento gerado pela Nuvem Fiscal.
    # @param [Hash] opts the optional parameters
    # @return [Array<(DfeInutilizacao, Integer, Hash)>] DfeInutilizacao data, response status code and response headers
    def consultar_inutilizacao_nfe_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NfeApi.consultar_inutilizacao_nfe ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling NfeApi.consultar_inutilizacao_nfe"
      end
      # resource path
      local_var_path = '/nfe/inutilizacoes/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'DfeInutilizacao'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['jwt', 'oauth2']

      new_options = opts.merge(
        :operation => :"NfeApi.consultar_inutilizacao_nfe",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NfeApi#consultar_inutilizacao_nfe\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Consultar lote de NF-e
    # Consulta os detalhes de um lote já existente. Forneça o ID único obtido de uma requisição de emissão ou de listagem de lotes e a Nuvem Fiscal irá retornar as informações do lote correspondente.
    # @param id [String] ID único do lote gerado pela Nuvem Fiscal.
    # @param [Hash] opts the optional parameters
    # @return [DfeLote]
    def consultar_lote_nfe(id, opts = {})
      data, _status_code, _headers = consultar_lote_nfe_with_http_info(id, opts)
      data
    end

    # Consultar lote de NF-e
    # Consulta os detalhes de um lote já existente. Forneça o ID único obtido de uma requisição de emissão ou de listagem de lotes e a Nuvem Fiscal irá retornar as informações do lote correspondente.
    # @param id [String] ID único do lote gerado pela Nuvem Fiscal.
    # @param [Hash] opts the optional parameters
    # @return [Array<(DfeLote, Integer, Hash)>] DfeLote data, response status code and response headers
    def consultar_lote_nfe_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NfeApi.consultar_lote_nfe ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling NfeApi.consultar_lote_nfe"
      end
      # resource path
      local_var_path = '/nfe/lotes/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'DfeLote'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['jwt', 'oauth2']

      new_options = opts.merge(
        :operation => :"NfeApi.consultar_lote_nfe",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NfeApi#consultar_lote_nfe\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Consultar NF-e
    # Consulta os detalhes de uma NF-e já existente. Forneça o ID único obtido de uma requisição de emissão ou de listagem de notas e a Nuvem Fiscal irá retornar as informações da nota correspondente.
    # @param id [String] ID único da NF-e gerado pela Nuvem Fiscal.
    # @param [Hash] opts the optional parameters
    # @return [Dfe]
    def consultar_nfe(id, opts = {})
      data, _status_code, _headers = consultar_nfe_with_http_info(id, opts)
      data
    end

    # Consultar NF-e
    # Consulta os detalhes de uma NF-e já existente. Forneça o ID único obtido de uma requisição de emissão ou de listagem de notas e a Nuvem Fiscal irá retornar as informações da nota correspondente.
    # @param id [String] ID único da NF-e gerado pela Nuvem Fiscal.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Dfe, Integer, Hash)>] Dfe data, response status code and response headers
    def consultar_nfe_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NfeApi.consultar_nfe ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling NfeApi.consultar_nfe"
      end
      # resource path
      local_var_path = '/nfe/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Dfe'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['jwt', 'oauth2']

      new_options = opts.merge(
        :operation => :"NfeApi.consultar_nfe",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NfeApi#consultar_nfe\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Consulta do Status do Serviço na SEFAZ Autorizadora
    # Consulta do status do serviço prestado pelo Portal da Secretaria de Fazenda Estadual.    A Nuvem Fiscal mantém a última consulta em cache por 5 minutos, evitando sobrecarregar desnecessariamente os servidores da SEFAZ (conforme orientação do MOC - versão 7.0, item 5.5.3). Dessa forma, você poderá chamar esse endpoint quantas vezes quiser, sem preocupar-se em ter o seu CNPJ bloqueado por consumo indevido (Rejeição 656).
    # @param cpf_cnpj [String] CPF/CNPJ do emitente.  Utilize o valor sem máscara.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :autorizador Ambiente Autorizador.    Autorizadores disponíveis: &#x60;AM&#x60;, &#x60;BA&#x60;, &#x60;GO&#x60;, &#x60;MG&#x60;, &#x60;MS&#x60;, &#x60;MT&#x60;, &#x60;PE&#x60;, &#x60;PR&#x60;, &#x60;RS&#x60;, &#x60;SP&#x60;, &#x60;SVAN&#x60;, &#x60;SVRS&#x60;, &#x60;SVCAN&#x60;, &#x60;SVCRS&#x60;, &#x60;AN&#x60;.    *Caso não seja informado, será utilizado o ambiente autorizador da UF do emitente.*
    # @return [DfeSefazStatus]
    def consultar_status_sefaz_nfe(cpf_cnpj, opts = {})
      data, _status_code, _headers = consultar_status_sefaz_nfe_with_http_info(cpf_cnpj, opts)
      data
    end

    # Consulta do Status do Serviço na SEFAZ Autorizadora
    # Consulta do status do serviço prestado pelo Portal da Secretaria de Fazenda Estadual.    A Nuvem Fiscal mantém a última consulta em cache por 5 minutos, evitando sobrecarregar desnecessariamente os servidores da SEFAZ (conforme orientação do MOC - versão 7.0, item 5.5.3). Dessa forma, você poderá chamar esse endpoint quantas vezes quiser, sem preocupar-se em ter o seu CNPJ bloqueado por consumo indevido (Rejeição 656).
    # @param cpf_cnpj [String] CPF/CNPJ do emitente.  Utilize o valor sem máscara.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :autorizador Ambiente Autorizador.    Autorizadores disponíveis: &#x60;AM&#x60;, &#x60;BA&#x60;, &#x60;GO&#x60;, &#x60;MG&#x60;, &#x60;MS&#x60;, &#x60;MT&#x60;, &#x60;PE&#x60;, &#x60;PR&#x60;, &#x60;RS&#x60;, &#x60;SP&#x60;, &#x60;SVAN&#x60;, &#x60;SVRS&#x60;, &#x60;SVCAN&#x60;, &#x60;SVCRS&#x60;, &#x60;AN&#x60;.    *Caso não seja informado, será utilizado o ambiente autorizador da UF do emitente.*
    # @return [Array<(DfeSefazStatus, Integer, Hash)>] DfeSefazStatus data, response status code and response headers
    def consultar_status_sefaz_nfe_with_http_info(cpf_cnpj, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NfeApi.consultar_status_sefaz_nfe ...'
      end
      # verify the required parameter 'cpf_cnpj' is set
      if @api_client.config.client_side_validation && cpf_cnpj.nil?
        fail ArgumentError, "Missing the required parameter 'cpf_cnpj' when calling NfeApi.consultar_status_sefaz_nfe"
      end
      # resource path
      local_var_path = '/nfe/sefaz/status'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'cpf_cnpj'] = cpf_cnpj
      query_params[:'autorizador'] = opts[:'autorizador'] if !opts[:'autorizador'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'DfeSefazStatus'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['jwt', 'oauth2']

      new_options = opts.merge(
        :operation => :"NfeApi.consultar_status_sefaz_nfe",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NfeApi#consultar_status_sefaz_nfe\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Solicitar correção da NF-e
    # É possível enviar até 20 correções diferentes, sendo que será válido sempre a última correção enviada.    **Informações adicionais**:  - Cota: <a href=\"/docs/limites#dfe-eventos\">dfe-eventos</a>  - Consumo: 1 unidade por requisição.
    # @param id [String] ID único da NF-e gerado pela Nuvem Fiscal.
    # @param body [NfePedidoCartaCorrecao] Contém os dados do pedido para carta de correção.
    # @param [Hash] opts the optional parameters
    # @return [DfeCartaCorrecao]
    def criar_carta_correcao_nfe(id, body, opts = {})
      data, _status_code, _headers = criar_carta_correcao_nfe_with_http_info(id, body, opts)
      data
    end

    # Solicitar correção da NF-e
    # É possível enviar até 20 correções diferentes, sendo que será válido sempre a última correção enviada.    **Informações adicionais**:  - Cota: &lt;a href&#x3D;\&quot;/docs/limites#dfe-eventos\&quot;&gt;dfe-eventos&lt;/a&gt;  - Consumo: 1 unidade por requisição.
    # @param id [String] ID único da NF-e gerado pela Nuvem Fiscal.
    # @param body [NfePedidoCartaCorrecao] Contém os dados do pedido para carta de correção.
    # @param [Hash] opts the optional parameters
    # @return [Array<(DfeCartaCorrecao, Integer, Hash)>] DfeCartaCorrecao data, response status code and response headers
    def criar_carta_correcao_nfe_with_http_info(id, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NfeApi.criar_carta_correcao_nfe ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling NfeApi.criar_carta_correcao_nfe"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling NfeApi.criar_carta_correcao_nfe"
      end
      # resource path
      local_var_path = '/nfe/{id}/carta-correcao'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'DfeCartaCorrecao'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['jwt', 'oauth2']

      new_options = opts.merge(
        :operation => :"NfeApi.criar_carta_correcao_nfe",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NfeApi#criar_carta_correcao_nfe\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Emitir lote de NF-e
    # **Informações adicionais**:  - Cota: <a href=\"/docs/limites#dfe-eventos\">dfe-eventos</a>  - Consumo: 1 unidade por NF-e.
    # @param body [NfePedidoEmissaoLote] 
    # @param [Hash] opts the optional parameters
    # @return [DfeLote]
    def emitir_lote_nfe(body, opts = {})
      data, _status_code, _headers = emitir_lote_nfe_with_http_info(body, opts)
      data
    end

    # Emitir lote de NF-e
    # **Informações adicionais**:  - Cota: &lt;a href&#x3D;\&quot;/docs/limites#dfe-eventos\&quot;&gt;dfe-eventos&lt;/a&gt;  - Consumo: 1 unidade por NF-e.
    # @param body [NfePedidoEmissaoLote] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(DfeLote, Integer, Hash)>] DfeLote data, response status code and response headers
    def emitir_lote_nfe_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NfeApi.emitir_lote_nfe ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling NfeApi.emitir_lote_nfe"
      end
      # resource path
      local_var_path = '/nfe/lotes'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'DfeLote'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['jwt', 'oauth2']

      new_options = opts.merge(
        :operation => :"NfeApi.emitir_lote_nfe",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NfeApi#emitir_lote_nfe\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Emitir NF-e
    # Este endpoint permite a emissão de Notas Fiscais Eletrônicas (NF-e).  A solicitação deve ser feita enviando os dados necessários para a  emissão de uma NF-e.     A estrutura do JSON utilizado na solicitação segue a hierarquia e  nomenclatura de campos definidos no <a href=\"https://www.nfe.fazenda.gov.br/portal/principal.aspx\" target=\"_blank\">  Manual de Orientação ao Contribuinte (MOC)</a>.  Esta conformidade visa facilitar a integração de novos usuários que já  possuem familiaridade com o padrão, além de permitir a resolução de  dúvidas diretamente no MOC, com um profissional de contabilidade  habilitado ou em outras fontes confiáveis que tratam do mesmo assunto.    **Comportamento Assíncrono**    A resposta desse endpoint inclui a propriedade *status* no JSON.  Caso o valor retornado seja *pendente*, significa que a solicitação está  sendo realizada de forma assíncrona pela API. Nesse caso, o usuário deverá  adotar um fluxo que consiste em requisitar periodicamente o endpoint  <a href=\"#tag/Nfe/operation/ConsultarNfe\">Consultar NF-e</a> até que  seja retornado um status indicando o fim da emissão.    **Informações adicionais**:  - Cota: <a href=\"/docs/limites#dfe-eventos\">dfe-eventos</a>  - Consumo: 1 unidade por requisição.
    # @param body [NfePedidoEmissao] 
    # @param [Hash] opts the optional parameters
    # @return [Dfe]
    def emitir_nfe(body, opts = {})
      data, _status_code, _headers = emitir_nfe_with_http_info(body, opts)
      data
    end

    # Emitir NF-e
    # Este endpoint permite a emissão de Notas Fiscais Eletrônicas (NF-e).  A solicitação deve ser feita enviando os dados necessários para a  emissão de uma NF-e.     A estrutura do JSON utilizado na solicitação segue a hierarquia e  nomenclatura de campos definidos no &lt;a href&#x3D;\&quot;https://www.nfe.fazenda.gov.br/portal/principal.aspx\&quot; target&#x3D;\&quot;_blank\&quot;&gt;  Manual de Orientação ao Contribuinte (MOC)&lt;/a&gt;.  Esta conformidade visa facilitar a integração de novos usuários que já  possuem familiaridade com o padrão, além de permitir a resolução de  dúvidas diretamente no MOC, com um profissional de contabilidade  habilitado ou em outras fontes confiáveis que tratam do mesmo assunto.    **Comportamento Assíncrono**    A resposta desse endpoint inclui a propriedade *status* no JSON.  Caso o valor retornado seja *pendente*, significa que a solicitação está  sendo realizada de forma assíncrona pela API. Nesse caso, o usuário deverá  adotar um fluxo que consiste em requisitar periodicamente o endpoint  &lt;a href&#x3D;\&quot;#tag/Nfe/operation/ConsultarNfe\&quot;&gt;Consultar NF-e&lt;/a&gt; até que  seja retornado um status indicando o fim da emissão.    **Informações adicionais**:  - Cota: &lt;a href&#x3D;\&quot;/docs/limites#dfe-eventos\&quot;&gt;dfe-eventos&lt;/a&gt;  - Consumo: 1 unidade por requisição.
    # @param body [NfePedidoEmissao] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Dfe, Integer, Hash)>] Dfe data, response status code and response headers
    def emitir_nfe_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NfeApi.emitir_nfe ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling NfeApi.emitir_nfe"
      end
      # resource path
      local_var_path = '/nfe'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'Dfe'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['jwt', 'oauth2']

      new_options = opts.merge(
        :operation => :"NfeApi.emitir_nfe",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NfeApi#emitir_nfe\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Enviar e-mail
    # Envia o XML e PDF da nota via email.    **Informações adicionais**:  - Cota: <a href=\"/docs/limites#dfe-eventos\">dfe-eventos</a>  - Consumo: 1 unidade por requisição.
    # @param id [String] ID único da NF-e gerado pela Nuvem Fiscal.
    # @param [Hash] opts the optional parameters
    # @option opts [DfePedidoEnvioEmail] :body 
    # @return [EmailStatusResponse]
    def enviar_email_nfe(id, opts = {})
      data, _status_code, _headers = enviar_email_nfe_with_http_info(id, opts)
      data
    end

    # Enviar e-mail
    # Envia o XML e PDF da nota via email.    **Informações adicionais**:  - Cota: &lt;a href&#x3D;\&quot;/docs/limites#dfe-eventos\&quot;&gt;dfe-eventos&lt;/a&gt;  - Consumo: 1 unidade por requisição.
    # @param id [String] ID único da NF-e gerado pela Nuvem Fiscal.
    # @param [Hash] opts the optional parameters
    # @option opts [DfePedidoEnvioEmail] :body 
    # @return [Array<(EmailStatusResponse, Integer, Hash)>] EmailStatusResponse data, response status code and response headers
    def enviar_email_nfe_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NfeApi.enviar_email_nfe ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling NfeApi.enviar_email_nfe"
      end
      # resource path
      local_var_path = '/nfe/{id}/email'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'body'])

      # return_type
      return_type = opts[:debug_return_type] || 'EmailStatusResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['jwt', 'oauth2']

      new_options = opts.merge(
        :operation => :"NfeApi.enviar_email_nfe",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NfeApi#enviar_email_nfe\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Inutilizar uma sequência de numeração de NF-e
    # **Informações adicionais**:  - Cota: <a href=\"/docs/limites#dfe-eventos\">dfe-eventos</a>  - Consumo: 1 unidade por requisição.
    # @param body [DfePedidoInutilizacao] 
    # @param [Hash] opts the optional parameters
    # @return [DfeInutilizacao]
    def inutilizar_numeracao_nfe(body, opts = {})
      data, _status_code, _headers = inutilizar_numeracao_nfe_with_http_info(body, opts)
      data
    end

    # Inutilizar uma sequência de numeração de NF-e
    # **Informações adicionais**:  - Cota: &lt;a href&#x3D;\&quot;/docs/limites#dfe-eventos\&quot;&gt;dfe-eventos&lt;/a&gt;  - Consumo: 1 unidade por requisição.
    # @param body [DfePedidoInutilizacao] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(DfeInutilizacao, Integer, Hash)>] DfeInutilizacao data, response status code and response headers
    def inutilizar_numeracao_nfe_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NfeApi.inutilizar_numeracao_nfe ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling NfeApi.inutilizar_numeracao_nfe"
      end
      # resource path
      local_var_path = '/nfe/inutilizacoes'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'DfeInutilizacao'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['jwt', 'oauth2']

      new_options = opts.merge(
        :operation => :"NfeApi.inutilizar_numeracao_nfe",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NfeApi#inutilizar_numeracao_nfe\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Listar eventos
    # Retorna a lista de eventos vinculados a um documento fiscal de acordo com os critérios de busca utilizados. Os eventos são retornados ordenados pela data da criação, com as mais recentes aparecendo primeiro.
    # @param dfe_id [String] ID único gerado pela Nuvem Fiscal para o documento fiscal.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :top Limite no número de objetos a serem retornados pela API, entre 1 e 100. (default to 10)
    # @option opts [Integer] :skip Quantidade de objetos que serão ignorados antes da lista começar a ser retornada. (default to 0)
    # @option opts [Boolean] :inlinecount Inclui no JSON de resposta, na propriedade &#x60;@count&#x60;, o número total de registros que o filtro retornaria, independente dos filtros de paginação. (default to false)
    # @return [DfeEventoListagem]
    def listar_eventos_nfe(dfe_id, opts = {})
      data, _status_code, _headers = listar_eventos_nfe_with_http_info(dfe_id, opts)
      data
    end

    # Listar eventos
    # Retorna a lista de eventos vinculados a um documento fiscal de acordo com os critérios de busca utilizados. Os eventos são retornados ordenados pela data da criação, com as mais recentes aparecendo primeiro.
    # @param dfe_id [String] ID único gerado pela Nuvem Fiscal para o documento fiscal.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :top Limite no número de objetos a serem retornados pela API, entre 1 e 100. (default to 10)
    # @option opts [Integer] :skip Quantidade de objetos que serão ignorados antes da lista começar a ser retornada. (default to 0)
    # @option opts [Boolean] :inlinecount Inclui no JSON de resposta, na propriedade &#x60;@count&#x60;, o número total de registros que o filtro retornaria, independente dos filtros de paginação. (default to false)
    # @return [Array<(DfeEventoListagem, Integer, Hash)>] DfeEventoListagem data, response status code and response headers
    def listar_eventos_nfe_with_http_info(dfe_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NfeApi.listar_eventos_nfe ...'
      end
      # verify the required parameter 'dfe_id' is set
      if @api_client.config.client_side_validation && dfe_id.nil?
        fail ArgumentError, "Missing the required parameter 'dfe_id' when calling NfeApi.listar_eventos_nfe"
      end
      # resource path
      local_var_path = '/nfe/eventos'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'dfe_id'] = dfe_id
      query_params[:'$top'] = opts[:'top'] if !opts[:'top'].nil?
      query_params[:'$skip'] = opts[:'skip'] if !opts[:'skip'].nil?
      query_params[:'$inlinecount'] = opts[:'inlinecount'] if !opts[:'inlinecount'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'DfeEventoListagem'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['jwt', 'oauth2']

      new_options = opts.merge(
        :operation => :"NfeApi.listar_eventos_nfe",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NfeApi#listar_eventos_nfe\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Listar lotes de NF-e
    # Retorna a lista dos lotes de acordo com os critérios de busca utilizados. Os lotes são retornados ordenados pela data da criação, com os mais recentes aparecendo primeiro.
    # @param cpf_cnpj [String] Filtrar pelo CPF ou CNPJ do emitente.  Utilize o valor sem máscara.
    # @param ambiente [String] Identificação do Ambiente.    Valores aceitos: homologacao, producao
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :top Limite no número de objetos a serem retornados pela API, entre 1 e 100. (default to 10)
    # @option opts [Integer] :skip Quantidade de objetos que serão ignorados antes da lista começar a ser retornada. (default to 0)
    # @option opts [Boolean] :inlinecount Inclui no JSON de resposta, na propriedade &#x60;@count&#x60;, o número total de registros que o filtro retornaria, independente dos filtros de paginação. (default to false)
    # @option opts [String] :referencia 
    # @return [DfeLoteListagem]
    def listar_lotes_nfe(cpf_cnpj, ambiente, opts = {})
      data, _status_code, _headers = listar_lotes_nfe_with_http_info(cpf_cnpj, ambiente, opts)
      data
    end

    # Listar lotes de NF-e
    # Retorna a lista dos lotes de acordo com os critérios de busca utilizados. Os lotes são retornados ordenados pela data da criação, com os mais recentes aparecendo primeiro.
    # @param cpf_cnpj [String] Filtrar pelo CPF ou CNPJ do emitente.  Utilize o valor sem máscara.
    # @param ambiente [String] Identificação do Ambiente.    Valores aceitos: homologacao, producao
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :top Limite no número de objetos a serem retornados pela API, entre 1 e 100. (default to 10)
    # @option opts [Integer] :skip Quantidade de objetos que serão ignorados antes da lista começar a ser retornada. (default to 0)
    # @option opts [Boolean] :inlinecount Inclui no JSON de resposta, na propriedade &#x60;@count&#x60;, o número total de registros que o filtro retornaria, independente dos filtros de paginação. (default to false)
    # @option opts [String] :referencia 
    # @return [Array<(DfeLoteListagem, Integer, Hash)>] DfeLoteListagem data, response status code and response headers
    def listar_lotes_nfe_with_http_info(cpf_cnpj, ambiente, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NfeApi.listar_lotes_nfe ...'
      end
      # verify the required parameter 'cpf_cnpj' is set
      if @api_client.config.client_side_validation && cpf_cnpj.nil?
        fail ArgumentError, "Missing the required parameter 'cpf_cnpj' when calling NfeApi.listar_lotes_nfe"
      end
      # verify the required parameter 'ambiente' is set
      if @api_client.config.client_side_validation && ambiente.nil?
        fail ArgumentError, "Missing the required parameter 'ambiente' when calling NfeApi.listar_lotes_nfe"
      end
      # resource path
      local_var_path = '/nfe/lotes'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'cpf_cnpj'] = cpf_cnpj
      query_params[:'ambiente'] = ambiente
      query_params[:'$top'] = opts[:'top'] if !opts[:'top'].nil?
      query_params[:'$skip'] = opts[:'skip'] if !opts[:'skip'].nil?
      query_params[:'$inlinecount'] = opts[:'inlinecount'] if !opts[:'inlinecount'].nil?
      query_params[:'referencia'] = opts[:'referencia'] if !opts[:'referencia'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'DfeLoteListagem'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['jwt', 'oauth2']

      new_options = opts.merge(
        :operation => :"NfeApi.listar_lotes_nfe",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NfeApi#listar_lotes_nfe\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Listar NF-e
    # Retorna a lista de notas de acordo com os critérios de busca utilizados. As notas são retornadas ordenadas pela data da criação, com as mais recentes aparecendo primeiro.
    # @param cpf_cnpj [String] Filtrar pelo CPF ou CNPJ do emitente.    Utilize o valor sem máscara.
    # @param ambiente [String] Identificação do Ambiente.    Valores aceitos: homologacao, producao
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :top Limite no número de objetos a serem retornados pela API, entre 1 e 100. (default to 10)
    # @option opts [Integer] :skip Quantidade de objetos que serão ignorados antes da lista começar a ser retornada. (default to 0)
    # @option opts [Boolean] :inlinecount Inclui no JSON de resposta, na propriedade &#x60;@count&#x60;, o número total de registros que o filtro retornaria, independente dos filtros de paginação. (default to false)
    # @option opts [String] :referencia Seu identificador único para o documento.
    # @option opts [String] :chave Chave de acesso do DF-e.
    # @option opts [String] :serie Série do DF-e.
    # @return [DfeListagem]
    def listar_nfe(cpf_cnpj, ambiente, opts = {})
      data, _status_code, _headers = listar_nfe_with_http_info(cpf_cnpj, ambiente, opts)
      data
    end

    # Listar NF-e
    # Retorna a lista de notas de acordo com os critérios de busca utilizados. As notas são retornadas ordenadas pela data da criação, com as mais recentes aparecendo primeiro.
    # @param cpf_cnpj [String] Filtrar pelo CPF ou CNPJ do emitente.    Utilize o valor sem máscara.
    # @param ambiente [String] Identificação do Ambiente.    Valores aceitos: homologacao, producao
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :top Limite no número de objetos a serem retornados pela API, entre 1 e 100. (default to 10)
    # @option opts [Integer] :skip Quantidade de objetos que serão ignorados antes da lista começar a ser retornada. (default to 0)
    # @option opts [Boolean] :inlinecount Inclui no JSON de resposta, na propriedade &#x60;@count&#x60;, o número total de registros que o filtro retornaria, independente dos filtros de paginação. (default to false)
    # @option opts [String] :referencia Seu identificador único para o documento.
    # @option opts [String] :chave Chave de acesso do DF-e.
    # @option opts [String] :serie Série do DF-e.
    # @return [Array<(DfeListagem, Integer, Hash)>] DfeListagem data, response status code and response headers
    def listar_nfe_with_http_info(cpf_cnpj, ambiente, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NfeApi.listar_nfe ...'
      end
      # verify the required parameter 'cpf_cnpj' is set
      if @api_client.config.client_side_validation && cpf_cnpj.nil?
        fail ArgumentError, "Missing the required parameter 'cpf_cnpj' when calling NfeApi.listar_nfe"
      end
      # verify the required parameter 'ambiente' is set
      if @api_client.config.client_side_validation && ambiente.nil?
        fail ArgumentError, "Missing the required parameter 'ambiente' when calling NfeApi.listar_nfe"
      end
      # resource path
      local_var_path = '/nfe'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'cpf_cnpj'] = cpf_cnpj
      query_params[:'ambiente'] = ambiente
      query_params[:'$top'] = opts[:'top'] if !opts[:'top'].nil?
      query_params[:'$skip'] = opts[:'skip'] if !opts[:'skip'].nil?
      query_params[:'$inlinecount'] = opts[:'inlinecount'] if !opts[:'inlinecount'].nil?
      query_params[:'referencia'] = opts[:'referencia'] if !opts[:'referencia'].nil?
      query_params[:'chave'] = opts[:'chave'] if !opts[:'chave'].nil?
      query_params[:'serie'] = opts[:'serie'] if !opts[:'serie'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'DfeListagem'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['jwt', 'oauth2']

      new_options = opts.merge(
        :operation => :"NfeApi.listar_nfe",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NfeApi#listar_nfe\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Sincroniza dados na NF-e a partir da SEFAZ
    # Realiza a sincronização dos dados a partir da consulta da situação atual da NF-e na Base de Dados do Portal da Secretaria de Fazenda Estadual.    **Cenários de uso**:  * Sincronizar uma nota que se encontra com o status `erro` na Nuvem Fiscal, mas está autorizada na SEFAZ (útil em casos de erros de transmissão com a SEFAZ, como instabilidades e timeouts).  * Sincronizar uma nota que se encontra com o status `autorizado`na Nuvem Fiscal, mas está cancelada na SEFAZ.  * Sincronizar todos os eventos de Cancelamento, Carta de Correção e EPEC de uma nota que porventura não tenham sido feitos a partir da Nuvem Fiscal.    **Informações adicionais**:  - Cota: <a href=\"/docs/limites#dfe-eventos\">dfe-eventos</a>  - Consumo: 1 unidade por evento sincronizado ou requisição.
    # @param id [String] ID único da NF-e gerado pela Nuvem Fiscal.
    # @param [Hash] opts the optional parameters
    # @return [DfeSincronizacao]
    def sincronizar_nfe(id, opts = {})
      data, _status_code, _headers = sincronizar_nfe_with_http_info(id, opts)
      data
    end

    # Sincroniza dados na NF-e a partir da SEFAZ
    # Realiza a sincronização dos dados a partir da consulta da situação atual da NF-e na Base de Dados do Portal da Secretaria de Fazenda Estadual.    **Cenários de uso**:  * Sincronizar uma nota que se encontra com o status &#x60;erro&#x60; na Nuvem Fiscal, mas está autorizada na SEFAZ (útil em casos de erros de transmissão com a SEFAZ, como instabilidades e timeouts).  * Sincronizar uma nota que se encontra com o status &#x60;autorizado&#x60;na Nuvem Fiscal, mas está cancelada na SEFAZ.  * Sincronizar todos os eventos de Cancelamento, Carta de Correção e EPEC de uma nota que porventura não tenham sido feitos a partir da Nuvem Fiscal.    **Informações adicionais**:  - Cota: &lt;a href&#x3D;\&quot;/docs/limites#dfe-eventos\&quot;&gt;dfe-eventos&lt;/a&gt;  - Consumo: 1 unidade por evento sincronizado ou requisição.
    # @param id [String] ID único da NF-e gerado pela Nuvem Fiscal.
    # @param [Hash] opts the optional parameters
    # @return [Array<(DfeSincronizacao, Integer, Hash)>] DfeSincronizacao data, response status code and response headers
    def sincronizar_nfe_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NfeApi.sincronizar_nfe ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling NfeApi.sincronizar_nfe"
      end
      # resource path
      local_var_path = '/nfe/{id}/sincronizar'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'DfeSincronizacao'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['jwt', 'oauth2']

      new_options = opts.merge(
        :operation => :"NfeApi.sincronizar_nfe",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NfeApi#sincronizar_nfe\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
