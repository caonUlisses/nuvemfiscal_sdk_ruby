=begin
#API Nuvem Fiscal

#API para automação comercial e documentos fiscais.

The version of the OpenAPI document: 2.44.0

Generated by: https://openapi-generator.tech
Generator version: 7.10.0

=end

require 'cgi'

module NuvemfiscalSdkRuby
  class EmailApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Consultar e-mail
    # Obtém informações detalhadas sobre o envio de um email. Este endpoint  permite rastrear todos os eventos relacionados ao email, como envio,  entrega, falhas e outros eventos relevantes.    Com este endpoint, é possível ter uma visão completa do ciclo de vida  de um email enviado, permitindo que os usuários acompanhem e analisem  o status e o histórico de eventos do email. Isso é particularmente  útil para identificar problemas de entrega e entender o comportamento  do email ao longo do tempo.
    # @param id [String] ID único do e-mail.    Esse parâmetro é obtido após o envio do email por qualquer endpoint da  API da Nuvem Fiscal que realize disparos de email.    Exemplos:  * &lt;a href&#x3D;\&quot;#tag/Nfe/operation/EnviarEmailNfe\&quot;&gt;Envio de XML e PDF de NF-e&lt;/a&gt;.  * &lt;a href&#x3D;\&quot;#tag/Nfce/operation/EnviarEmailNfce\&quot;&gt;Envio de XML e PDF de NFC-e&lt;/a&gt;.
    # @param [Hash] opts the optional parameters
    # @return [Email]
    def consultar_email(id, opts = {})
      data, _status_code, _headers = consultar_email_with_http_info(id, opts)
      data
    end

    # Consultar e-mail
    # Obtém informações detalhadas sobre o envio de um email. Este endpoint  permite rastrear todos os eventos relacionados ao email, como envio,  entrega, falhas e outros eventos relevantes.    Com este endpoint, é possível ter uma visão completa do ciclo de vida  de um email enviado, permitindo que os usuários acompanhem e analisem  o status e o histórico de eventos do email. Isso é particularmente  útil para identificar problemas de entrega e entender o comportamento  do email ao longo do tempo.
    # @param id [String] ID único do e-mail.    Esse parâmetro é obtido após o envio do email por qualquer endpoint da  API da Nuvem Fiscal que realize disparos de email.    Exemplos:  * &lt;a href&#x3D;\&quot;#tag/Nfe/operation/EnviarEmailNfe\&quot;&gt;Envio de XML e PDF de NF-e&lt;/a&gt;.  * &lt;a href&#x3D;\&quot;#tag/Nfce/operation/EnviarEmailNfce\&quot;&gt;Envio de XML e PDF de NFC-e&lt;/a&gt;.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Email, Integer, Hash)>] Email data, response status code and response headers
    def consultar_email_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EmailApi.consultar_email ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling EmailApi.consultar_email"
      end
      # resource path
      local_var_path = '/emails/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Email'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['jwt', 'oauth2']

      new_options = opts.merge(
        :operation => :"EmailApi.consultar_email",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EmailApi#consultar_email\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Listar e-mails
    # Retorna a lista dos emails associadas à sua conta. Os e-emails são  retornados ordenados pela data da criação, com os mais recentes  aparecendo primeiro.
    # @param cpf_cnpj [String] Filtra pelo CPF ou CNPJ da empresa.    *Utilize o valor sem máscara*.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :top Limite no número de objetos a serem retornados pela API, entre 1 e 100. (default to 10)
    # @option opts [Integer] :skip Quantidade de objetos que serão ignorados antes da lista começar a ser retornada. (default to 0)
    # @option opts [Boolean] :inlinecount Inclui no JSON de resposta, na propriedade &#x60;@count&#x60;, o número total de registros que o filtro retornaria, independente dos filtros de paginação. (default to false)
    # @option opts [Boolean] :undelivered Filtra apenas emails com problemas de entrega.
    # @option opts [String] :email Filtra pelo endereço de e-mail do destinatário para qual o email foi enviado.
    # @return [EmailListagem]
    def listar_emails(cpf_cnpj, opts = {})
      data, _status_code, _headers = listar_emails_with_http_info(cpf_cnpj, opts)
      data
    end

    # Listar e-mails
    # Retorna a lista dos emails associadas à sua conta. Os e-emails são  retornados ordenados pela data da criação, com os mais recentes  aparecendo primeiro.
    # @param cpf_cnpj [String] Filtra pelo CPF ou CNPJ da empresa.    *Utilize o valor sem máscara*.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :top Limite no número de objetos a serem retornados pela API, entre 1 e 100. (default to 10)
    # @option opts [Integer] :skip Quantidade de objetos que serão ignorados antes da lista começar a ser retornada. (default to 0)
    # @option opts [Boolean] :inlinecount Inclui no JSON de resposta, na propriedade &#x60;@count&#x60;, o número total de registros que o filtro retornaria, independente dos filtros de paginação. (default to false)
    # @option opts [Boolean] :undelivered Filtra apenas emails com problemas de entrega.
    # @option opts [String] :email Filtra pelo endereço de e-mail do destinatário para qual o email foi enviado.
    # @return [Array<(EmailListagem, Integer, Hash)>] EmailListagem data, response status code and response headers
    def listar_emails_with_http_info(cpf_cnpj, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EmailApi.listar_emails ...'
      end
      # verify the required parameter 'cpf_cnpj' is set
      if @api_client.config.client_side_validation && cpf_cnpj.nil?
        fail ArgumentError, "Missing the required parameter 'cpf_cnpj' when calling EmailApi.listar_emails"
      end
      # resource path
      local_var_path = '/emails'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'cpf_cnpj'] = cpf_cnpj
      query_params[:'$top'] = opts[:'top'] if !opts[:'top'].nil?
      query_params[:'$skip'] = opts[:'skip'] if !opts[:'skip'].nil?
      query_params[:'$inlinecount'] = opts[:'inlinecount'] if !opts[:'inlinecount'].nil?
      query_params[:'undelivered'] = opts[:'undelivered'] if !opts[:'undelivered'].nil?
      query_params[:'email'] = opts[:'email'] if !opts[:'email'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'EmailListagem'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['jwt', 'oauth2']

      new_options = opts.merge(
        :operation => :"EmailApi.listar_emails",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EmailApi#listar_emails\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
