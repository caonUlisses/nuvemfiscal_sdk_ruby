=begin
#API Nuvem Fiscal

#API para automação comercial e documentos fiscais.

The version of the OpenAPI document: 2.44.0

Generated by: https://openapi-generator.tech
Generator version: 7.10.0

=end

require 'cgi'

module NuvemfiscalSdkRuby
  class NfceApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Comandos ESC/POS para impressão do DANFCE
    # ESC/POS é um sistema de comando criado pela Epson usado em diversos sistemas de impressoras POS.    Com o formato ESC/POS, você poderá imprimir nativamente em uma vasta quantidade de modelos de impressora térmicas utilizadas no Brasil e no mundo. Com ela, você consegue fazer o envio de comandos em ESC/POS direto para a porta da impressora.
    # @param id [String] ID único da NFC-e gerado pela Nuvem Fiscal.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :modelo Modelo da impressora:  * &#x60;0&#x60; - Texto  * &#x60;1&#x60; - Epson  * &#x60;2&#x60; - Bematech  * &#x60;3&#x60; - Daruma  * &#x60;4&#x60; - Vox  * &#x60;5&#x60; - Diebold  * &#x60;6&#x60; - Epson P2  * &#x60;7&#x60; - CustomPos  * &#x60;8&#x60; - Star  * &#x60;9&#x60; - Zjiang  * &#x60;10&#x60; - GPrinter  * &#x60;11&#x60; - Datecs  * &#x60;12&#x60; - Sunmi  * &#x60;13&#x60; - Externo (default to 1)
    # @option opts [Integer] :colunas Define o máximo de caracteres, em uma linha, usando a fonte normal.    Ex: 40, 42, 48, 58, 80. (default to 48)
    # @option opts [Boolean] :qrcode_lateral Imprime o QRCode na lateral do DANFCe.    OBS: não suportado por alguns modelos de impressora. (default to false)
    # @return [File]
    def baixar_esc_pos_nfce(id, opts = {})
      data, _status_code, _headers = baixar_esc_pos_nfce_with_http_info(id, opts)
      data
    end

    # Comandos ESC/POS para impressão do DANFCE
    # ESC/POS é um sistema de comando criado pela Epson usado em diversos sistemas de impressoras POS.    Com o formato ESC/POS, você poderá imprimir nativamente em uma vasta quantidade de modelos de impressora térmicas utilizadas no Brasil e no mundo. Com ela, você consegue fazer o envio de comandos em ESC/POS direto para a porta da impressora.
    # @param id [String] ID único da NFC-e gerado pela Nuvem Fiscal.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :modelo Modelo da impressora:  * &#x60;0&#x60; - Texto  * &#x60;1&#x60; - Epson  * &#x60;2&#x60; - Bematech  * &#x60;3&#x60; - Daruma  * &#x60;4&#x60; - Vox  * &#x60;5&#x60; - Diebold  * &#x60;6&#x60; - Epson P2  * &#x60;7&#x60; - CustomPos  * &#x60;8&#x60; - Star  * &#x60;9&#x60; - Zjiang  * &#x60;10&#x60; - GPrinter  * &#x60;11&#x60; - Datecs  * &#x60;12&#x60; - Sunmi  * &#x60;13&#x60; - Externo (default to 1)
    # @option opts [Integer] :colunas Define o máximo de caracteres, em uma linha, usando a fonte normal.    Ex: 40, 42, 48, 58, 80. (default to 48)
    # @option opts [Boolean] :qrcode_lateral Imprime o QRCode na lateral do DANFCe.    OBS: não suportado por alguns modelos de impressora. (default to false)
    # @return [Array<(File, Integer, Hash)>] File data, response status code and response headers
    def baixar_esc_pos_nfce_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NfceApi.baixar_esc_pos_nfce ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling NfceApi.baixar_esc_pos_nfce"
      end
      if @api_client.config.client_side_validation && !opts[:'modelo'].nil? && opts[:'modelo'] > 13
        fail ArgumentError, 'invalid value for "opts[:"modelo"]" when calling NfceApi.baixar_esc_pos_nfce, must be smaller than or equal to 13.'
      end

      if @api_client.config.client_side_validation && !opts[:'modelo'].nil? && opts[:'modelo'] < 0
        fail ArgumentError, 'invalid value for "opts[:"modelo"]" when calling NfceApi.baixar_esc_pos_nfce, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/nfce/{id}/escpos'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'modelo'] = opts[:'modelo'] if !opts[:'modelo'].nil?
      query_params[:'colunas'] = opts[:'colunas'] if !opts[:'colunas'].nil?
      query_params[:'qrcode_lateral'] = opts[:'qrcode_lateral'] if !opts[:'qrcode_lateral'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'File'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['jwt', 'oauth2']

      new_options = opts.merge(
        :operation => :"NfceApi.baixar_esc_pos_nfce",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NfceApi#baixar_esc_pos_nfce\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Baixar PDF do cancelamento
    # @param id [String] ID único da NFC-e gerado pela Nuvem Fiscal.
    # @param [Hash] opts the optional parameters
    # @return [File]
    def baixar_pdf_cancelamento_nfce(id, opts = {})
      data, _status_code, _headers = baixar_pdf_cancelamento_nfce_with_http_info(id, opts)
      data
    end

    # Baixar PDF do cancelamento
    # @param id [String] ID único da NFC-e gerado pela Nuvem Fiscal.
    # @param [Hash] opts the optional parameters
    # @return [Array<(File, Integer, Hash)>] File data, response status code and response headers
    def baixar_pdf_cancelamento_nfce_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NfceApi.baixar_pdf_cancelamento_nfce ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling NfceApi.baixar_pdf_cancelamento_nfce"
      end
      # resource path
      local_var_path = '/nfce/{id}/cancelamento/pdf'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'File'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['jwt', 'oauth2']

      new_options = opts.merge(
        :operation => :"NfceApi.baixar_pdf_cancelamento_nfce",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NfceApi#baixar_pdf_cancelamento_nfce\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Baixar PDF do evento
    # @param id [String] ID único do evento gerado pela Nuvem Fiscal.
    # @param [Hash] opts the optional parameters
    # @return [File]
    def baixar_pdf_evento_nfce(id, opts = {})
      data, _status_code, _headers = baixar_pdf_evento_nfce_with_http_info(id, opts)
      data
    end

    # Baixar PDF do evento
    # @param id [String] ID único do evento gerado pela Nuvem Fiscal.
    # @param [Hash] opts the optional parameters
    # @return [Array<(File, Integer, Hash)>] File data, response status code and response headers
    def baixar_pdf_evento_nfce_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NfceApi.baixar_pdf_evento_nfce ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling NfceApi.baixar_pdf_evento_nfce"
      end
      # resource path
      local_var_path = '/nfce/eventos/{id}/pdf'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'File'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['jwt', 'oauth2']

      new_options = opts.merge(
        :operation => :"NfceApi.baixar_pdf_evento_nfce",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NfceApi#baixar_pdf_evento_nfce\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Baixar PDF da inutilização
    # @param id [String] ID único do evento gerado pela Nuvem Fiscal.
    # @param [Hash] opts the optional parameters
    # @return [File]
    def baixar_pdf_inutilizacao_nfce(id, opts = {})
      data, _status_code, _headers = baixar_pdf_inutilizacao_nfce_with_http_info(id, opts)
      data
    end

    # Baixar PDF da inutilização
    # @param id [String] ID único do evento gerado pela Nuvem Fiscal.
    # @param [Hash] opts the optional parameters
    # @return [Array<(File, Integer, Hash)>] File data, response status code and response headers
    def baixar_pdf_inutilizacao_nfce_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NfceApi.baixar_pdf_inutilizacao_nfce ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling NfceApi.baixar_pdf_inutilizacao_nfce"
      end
      # resource path
      local_var_path = '/nfce/inutilizacoes/{id}/pdf'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'File'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['jwt', 'oauth2']

      new_options = opts.merge(
        :operation => :"NfceApi.baixar_pdf_inutilizacao_nfce",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NfceApi#baixar_pdf_inutilizacao_nfce\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Baixar PDF do DANFCE
    # @param id [String] ID único da NFC-e gerado pela Nuvem Fiscal.
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :logotipo Imprime o documento com logotipo, desde que esteja cadastrado na empresa. (default to false)
    # @option opts [Boolean] :nome_fantasia Exibe o nome fantasia do emitente, desde que esteja presente no XML da nota. (default to false)
    # @option opts [String] :mensagem_rodape Imprime mensagem no rodapé do documento.    O caractere &#x60;|&#x60; (pipe) poderá ser utilizado para definir a quantidade e o alinhamento das mensagens.    **Exemplos de Uso:**  * &#x60;\&quot;esquerda\&quot;&#x60;  * &#x60;\&quot;esquerda|centro\&quot;&#x60;  * &#x60;\&quot;esquerda|centro|direita\&quot;&#x60;  * &#x60;\&quot;|centro\&quot;&#x60;, &#x60;\&quot;|centro|\&quot;&#x60;  * &#x60;\&quot;|centro|direita\&quot;&#x60;  * &#x60;\&quot;||direita\&quot;&#x60;  * &#x60;\&quot;esquerda||direita\&quot;&#x60;
    # @option opts [Boolean] :resumido Poderá ser impresso apenas o DANFE NFC-e resumido ou ecológico, sem o detalhamento dos itens da venda, desde que a Unidade Federada permita esta opção em sua legislação e o consumidor assim o solicite. (default to false)
    # @option opts [Boolean] :qrcode_lateral Imprime o QRCode na lateral do DANFE NFC-e.    *Disponível apenas para DANFE com 80 milímetros de largura*. (default to false)
    # @option opts [Integer] :largura Largura do DANFE NFC-e (em milímetros). (default to 80)
    # @option opts [String] :margem Define as margens do DANFE NFC-e (em milímetros).    Essa propriedade pode ser especificada usando um, dois, três ou quatro valores (separados por vírgulas). Cada valor deve ser um número entre &#x60;0&#x60; e &#x60;9&#x60;.  * Quando **um** valor é especificado, a mesma margem é aplicada para **todos os quatro lados**.  * Quando **dois** valores são especificados, a primeira margem é aplicada aos **lados esquerdo e direito**, e a segunda aos **lados superior e inferior**.  * Quando **três** valores são especificados, a primeira margem é aplicada ao **lado esquerdo**, a segunda aos **lados superior e inferior**, e a terceira ao **lado direito**.  * Quando **quatro** valores são especificados, as margens são aplicadas aos lados **esquerdo**, **superior**, **direito** e **inferior**, nesta ordem (sentido horário).    **Exemplos de uso**:  * &#x60;margem&#x3D;1&#x60;    - Margem esquerda: 1mm    - Margem superior: 1mm    - Margem direita: 1mm    - Margem inferior: 1mm  * &#x60;margem&#x3D;1,2&#x60;    - Margem esquerda: 1mm    - Margem superior: 2mm    - Margem direita: 1mm    - Margem inferior: 2mm  * &#x60;margem&#x3D;1,2,3&#x60;    - Margem esquerda: 1mm    - Margem superior: 2mm    - Margem direita: 3mm    - Margem inferior: 2mm  * &#x60;margem&#x3D;1,2,3,4&#x60;    - Margem esquerda: 1mm    - Margem superior: 2mm    - Margem direita: 3mm    - Margem inferior: 4mm (default to '2')
    # @return [File]
    def baixar_pdf_nfce(id, opts = {})
      data, _status_code, _headers = baixar_pdf_nfce_with_http_info(id, opts)
      data
    end

    # Baixar PDF do DANFCE
    # @param id [String] ID único da NFC-e gerado pela Nuvem Fiscal.
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :logotipo Imprime o documento com logotipo, desde que esteja cadastrado na empresa. (default to false)
    # @option opts [Boolean] :nome_fantasia Exibe o nome fantasia do emitente, desde que esteja presente no XML da nota. (default to false)
    # @option opts [String] :mensagem_rodape Imprime mensagem no rodapé do documento.    O caractere &#x60;|&#x60; (pipe) poderá ser utilizado para definir a quantidade e o alinhamento das mensagens.    **Exemplos de Uso:**  * &#x60;\&quot;esquerda\&quot;&#x60;  * &#x60;\&quot;esquerda|centro\&quot;&#x60;  * &#x60;\&quot;esquerda|centro|direita\&quot;&#x60;  * &#x60;\&quot;|centro\&quot;&#x60;, &#x60;\&quot;|centro|\&quot;&#x60;  * &#x60;\&quot;|centro|direita\&quot;&#x60;  * &#x60;\&quot;||direita\&quot;&#x60;  * &#x60;\&quot;esquerda||direita\&quot;&#x60;
    # @option opts [Boolean] :resumido Poderá ser impresso apenas o DANFE NFC-e resumido ou ecológico, sem o detalhamento dos itens da venda, desde que a Unidade Federada permita esta opção em sua legislação e o consumidor assim o solicite. (default to false)
    # @option opts [Boolean] :qrcode_lateral Imprime o QRCode na lateral do DANFE NFC-e.    *Disponível apenas para DANFE com 80 milímetros de largura*. (default to false)
    # @option opts [Integer] :largura Largura do DANFE NFC-e (em milímetros). (default to 80)
    # @option opts [String] :margem Define as margens do DANFE NFC-e (em milímetros).    Essa propriedade pode ser especificada usando um, dois, três ou quatro valores (separados por vírgulas). Cada valor deve ser um número entre &#x60;0&#x60; e &#x60;9&#x60;.  * Quando **um** valor é especificado, a mesma margem é aplicada para **todos os quatro lados**.  * Quando **dois** valores são especificados, a primeira margem é aplicada aos **lados esquerdo e direito**, e a segunda aos **lados superior e inferior**.  * Quando **três** valores são especificados, a primeira margem é aplicada ao **lado esquerdo**, a segunda aos **lados superior e inferior**, e a terceira ao **lado direito**.  * Quando **quatro** valores são especificados, as margens são aplicadas aos lados **esquerdo**, **superior**, **direito** e **inferior**, nesta ordem (sentido horário).    **Exemplos de uso**:  * &#x60;margem&#x3D;1&#x60;    - Margem esquerda: 1mm    - Margem superior: 1mm    - Margem direita: 1mm    - Margem inferior: 1mm  * &#x60;margem&#x3D;1,2&#x60;    - Margem esquerda: 1mm    - Margem superior: 2mm    - Margem direita: 1mm    - Margem inferior: 2mm  * &#x60;margem&#x3D;1,2,3&#x60;    - Margem esquerda: 1mm    - Margem superior: 2mm    - Margem direita: 3mm    - Margem inferior: 2mm  * &#x60;margem&#x3D;1,2,3,4&#x60;    - Margem esquerda: 1mm    - Margem superior: 2mm    - Margem direita: 3mm    - Margem inferior: 4mm (default to '2')
    # @return [Array<(File, Integer, Hash)>] File data, response status code and response headers
    def baixar_pdf_nfce_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NfceApi.baixar_pdf_nfce ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling NfceApi.baixar_pdf_nfce"
      end
      if @api_client.config.client_side_validation && !opts[:'mensagem_rodape'].nil? && opts[:'mensagem_rodape'].to_s.length > 120
        fail ArgumentError, 'invalid value for "opts[:"mensagem_rodape"]" when calling NfceApi.baixar_pdf_nfce, the character length must be smaller than or equal to 120.'
      end

      if @api_client.config.client_side_validation && !opts[:'largura'].nil? && opts[:'largura'] > 80
        fail ArgumentError, 'invalid value for "opts[:"largura"]" when calling NfceApi.baixar_pdf_nfce, must be smaller than or equal to 80.'
      end

      if @api_client.config.client_side_validation && !opts[:'largura'].nil? && opts[:'largura'] < 40
        fail ArgumentError, 'invalid value for "opts[:"largura"]" when calling NfceApi.baixar_pdf_nfce, must be greater than or equal to 40.'
      end

      # resource path
      local_var_path = '/nfce/{id}/pdf'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'logotipo'] = opts[:'logotipo'] if !opts[:'logotipo'].nil?
      query_params[:'nome_fantasia'] = opts[:'nome_fantasia'] if !opts[:'nome_fantasia'].nil?
      query_params[:'mensagem_rodape'] = opts[:'mensagem_rodape'] if !opts[:'mensagem_rodape'].nil?
      query_params[:'resumido'] = opts[:'resumido'] if !opts[:'resumido'].nil?
      query_params[:'qrcode_lateral'] = opts[:'qrcode_lateral'] if !opts[:'qrcode_lateral'].nil?
      query_params[:'largura'] = opts[:'largura'] if !opts[:'largura'].nil?
      query_params[:'margem'] = opts[:'margem'] if !opts[:'margem'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'File'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['jwt', 'oauth2']

      new_options = opts.merge(
        :operation => :"NfceApi.baixar_pdf_nfce",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NfceApi#baixar_pdf_nfce\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Prévia do PDF do DANFCE
    # Através desse endpoint, é possível enviar os dados de uma NFC-e e gerar uma prévia do DANFCE.    Os dados de entrada são os mesmos do endpoint de emissão de NFC-e (`POST /nfce`).    **Atenção**: O DANFE gerado por este endpoint é apenas para fins de visualização e não possui valor fiscal. Para a emissão de uma NF-e com valor fiscal, utilize o processo de emissão padrão descrito na documentação.    **Informações adicionais**:  - Cota: <a href=\"/docs/limites#dfe-eventos\">dfe-eventos</a>  - Consumo: 1 unidade por requisição.
    # @param body [NfePedidoEmissao] 
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :logotipo Imprime o documento com logotipo, desde que esteja cadastrado na empresa. (default to false)
    # @option opts [Boolean] :nome_fantasia Exibe o nome fantasia do emitente, desde que esteja presente no XML da nota. (default to false)
    # @option opts [String] :mensagem_rodape Imprime mensagem no rodapé do documento.    O caractere &#x60;|&#x60; (pipe) poderá ser utilizado para definir a quantidade e o alinhamento das mensagens.    **Exemplos de Uso:**  * &#x60;\&quot;esquerda\&quot;&#x60;  * &#x60;\&quot;esquerda|centro\&quot;&#x60;  * &#x60;\&quot;esquerda|centro|direita\&quot;&#x60;  * &#x60;\&quot;|centro\&quot;&#x60;, &#x60;\&quot;|centro|\&quot;&#x60;  * &#x60;\&quot;|centro|direita\&quot;&#x60;  * &#x60;\&quot;||direita\&quot;&#x60;  * &#x60;\&quot;esquerda||direita\&quot;&#x60;
    # @option opts [Boolean] :resumido Poderá ser impresso apenas o DANFE NFC-e resumido ou ecológico, sem o detalhamento dos itens da venda, desde que a Unidade Federada permita esta opção em sua legislação e o consumidor assim o solicite. (default to false)
    # @option opts [Boolean] :qrcode_lateral Imprime o QRCode na lateral do DANFE NFC-e.    *Disponível apenas para DANFE com 80 milímetros de largura*. (default to false)
    # @option opts [Integer] :largura Largura do DANFE NFC-e (em milímetros). (default to 80)
    # @option opts [String] :margem Define as margens do DANFE NFC-e (em milímetros).    Essa propriedade pode ser especificada usando um, dois, três ou quatro valores (separados por vírgulas). Cada valor deve ser um número entre &#x60;0&#x60; e &#x60;9&#x60;.  * Quando **um** valor é especificado, a mesma margem é aplicada para **todos os quatro lados**.  * Quando **dois** valores são especificados, a primeira margem é aplicada aos **lados esquerdo e direito**, e a segunda aos **lados superior e inferior**.  * Quando **três** valores são especificados, a primeira margem é aplicada ao **lado esquerdo**, a segunda aos **lados superior e inferior**, e a terceira ao **lado direito**.  * Quando **quatro** valores são especificados, as margens são aplicadas aos lados **esquerdo**, **superior**, **direito** e **inferior**, nesta ordem (sentido horário).    **Exemplos de uso**:  * &#x60;margem&#x3D;1&#x60;    - Margem esquerda: 1mm    - Margem superior: 1mm    - Margem direita: 1mm    - Margem inferior: 1mm  * &#x60;margem&#x3D;1,2&#x60;    - Margem esquerda: 1mm    - Margem superior: 2mm    - Margem direita: 1mm    - Margem inferior: 2mm  * &#x60;margem&#x3D;1,2,3&#x60;    - Margem esquerda: 1mm    - Margem superior: 2mm    - Margem direita: 3mm    - Margem inferior: 2mm  * &#x60;margem&#x3D;1,2,3,4&#x60;    - Margem esquerda: 1mm    - Margem superior: 2mm    - Margem direita: 3mm    - Margem inferior: 4mm (default to '2')
    # @return [File]
    def baixar_previa_pdf_nfce(body, opts = {})
      data, _status_code, _headers = baixar_previa_pdf_nfce_with_http_info(body, opts)
      data
    end

    # Prévia do PDF do DANFCE
    # Através desse endpoint, é possível enviar os dados de uma NFC-e e gerar uma prévia do DANFCE.    Os dados de entrada são os mesmos do endpoint de emissão de NFC-e (&#x60;POST /nfce&#x60;).    **Atenção**: O DANFE gerado por este endpoint é apenas para fins de visualização e não possui valor fiscal. Para a emissão de uma NF-e com valor fiscal, utilize o processo de emissão padrão descrito na documentação.    **Informações adicionais**:  - Cota: &lt;a href&#x3D;\&quot;/docs/limites#dfe-eventos\&quot;&gt;dfe-eventos&lt;/a&gt;  - Consumo: 1 unidade por requisição.
    # @param body [NfePedidoEmissao] 
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :logotipo Imprime o documento com logotipo, desde que esteja cadastrado na empresa. (default to false)
    # @option opts [Boolean] :nome_fantasia Exibe o nome fantasia do emitente, desde que esteja presente no XML da nota. (default to false)
    # @option opts [String] :mensagem_rodape Imprime mensagem no rodapé do documento.    O caractere &#x60;|&#x60; (pipe) poderá ser utilizado para definir a quantidade e o alinhamento das mensagens.    **Exemplos de Uso:**  * &#x60;\&quot;esquerda\&quot;&#x60;  * &#x60;\&quot;esquerda|centro\&quot;&#x60;  * &#x60;\&quot;esquerda|centro|direita\&quot;&#x60;  * &#x60;\&quot;|centro\&quot;&#x60;, &#x60;\&quot;|centro|\&quot;&#x60;  * &#x60;\&quot;|centro|direita\&quot;&#x60;  * &#x60;\&quot;||direita\&quot;&#x60;  * &#x60;\&quot;esquerda||direita\&quot;&#x60;
    # @option opts [Boolean] :resumido Poderá ser impresso apenas o DANFE NFC-e resumido ou ecológico, sem o detalhamento dos itens da venda, desde que a Unidade Federada permita esta opção em sua legislação e o consumidor assim o solicite. (default to false)
    # @option opts [Boolean] :qrcode_lateral Imprime o QRCode na lateral do DANFE NFC-e.    *Disponível apenas para DANFE com 80 milímetros de largura*. (default to false)
    # @option opts [Integer] :largura Largura do DANFE NFC-e (em milímetros). (default to 80)
    # @option opts [String] :margem Define as margens do DANFE NFC-e (em milímetros).    Essa propriedade pode ser especificada usando um, dois, três ou quatro valores (separados por vírgulas). Cada valor deve ser um número entre &#x60;0&#x60; e &#x60;9&#x60;.  * Quando **um** valor é especificado, a mesma margem é aplicada para **todos os quatro lados**.  * Quando **dois** valores são especificados, a primeira margem é aplicada aos **lados esquerdo e direito**, e a segunda aos **lados superior e inferior**.  * Quando **três** valores são especificados, a primeira margem é aplicada ao **lado esquerdo**, a segunda aos **lados superior e inferior**, e a terceira ao **lado direito**.  * Quando **quatro** valores são especificados, as margens são aplicadas aos lados **esquerdo**, **superior**, **direito** e **inferior**, nesta ordem (sentido horário).    **Exemplos de uso**:  * &#x60;margem&#x3D;1&#x60;    - Margem esquerda: 1mm    - Margem superior: 1mm    - Margem direita: 1mm    - Margem inferior: 1mm  * &#x60;margem&#x3D;1,2&#x60;    - Margem esquerda: 1mm    - Margem superior: 2mm    - Margem direita: 1mm    - Margem inferior: 2mm  * &#x60;margem&#x3D;1,2,3&#x60;    - Margem esquerda: 1mm    - Margem superior: 2mm    - Margem direita: 3mm    - Margem inferior: 2mm  * &#x60;margem&#x3D;1,2,3,4&#x60;    - Margem esquerda: 1mm    - Margem superior: 2mm    - Margem direita: 3mm    - Margem inferior: 4mm (default to '2')
    # @return [Array<(File, Integer, Hash)>] File data, response status code and response headers
    def baixar_previa_pdf_nfce_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NfceApi.baixar_previa_pdf_nfce ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling NfceApi.baixar_previa_pdf_nfce"
      end
      if @api_client.config.client_side_validation && !opts[:'mensagem_rodape'].nil? && opts[:'mensagem_rodape'].to_s.length > 120
        fail ArgumentError, 'invalid value for "opts[:"mensagem_rodape"]" when calling NfceApi.baixar_previa_pdf_nfce, the character length must be smaller than or equal to 120.'
      end

      if @api_client.config.client_side_validation && !opts[:'largura'].nil? && opts[:'largura'] > 80
        fail ArgumentError, 'invalid value for "opts[:"largura"]" when calling NfceApi.baixar_previa_pdf_nfce, must be smaller than or equal to 80.'
      end

      if @api_client.config.client_side_validation && !opts[:'largura'].nil? && opts[:'largura'] < 40
        fail ArgumentError, 'invalid value for "opts[:"largura"]" when calling NfceApi.baixar_previa_pdf_nfce, must be greater than or equal to 40.'
      end

      # resource path
      local_var_path = '/nfce/previa/pdf'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'logotipo'] = opts[:'logotipo'] if !opts[:'logotipo'].nil?
      query_params[:'nome_fantasia'] = opts[:'nome_fantasia'] if !opts[:'nome_fantasia'].nil?
      query_params[:'mensagem_rodape'] = opts[:'mensagem_rodape'] if !opts[:'mensagem_rodape'].nil?
      query_params[:'resumido'] = opts[:'resumido'] if !opts[:'resumido'].nil?
      query_params[:'qrcode_lateral'] = opts[:'qrcode_lateral'] if !opts[:'qrcode_lateral'].nil?
      query_params[:'largura'] = opts[:'largura'] if !opts[:'largura'].nil?
      query_params[:'margem'] = opts[:'margem'] if !opts[:'margem'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'File'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['jwt', 'oauth2']

      new_options = opts.merge(
        :operation => :"NfceApi.baixar_previa_pdf_nfce",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NfceApi#baixar_previa_pdf_nfce\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Prévia do XML da NFC-e
    # Através desse endpoint, é possível enviar os dados de uma NFC-e e gerar uma prévia do XML, sem a assinatura digital.    Os dados de entrada são os mesmos do endpoint de emissão de NFC-e (`POST /nfce`).    **Atenção**: O XML gerado por este endpoint é apenas para fins de visualização e não possui valor fiscal. Para a emissão de uma NF-e com valor fiscal, utilize o processo de emissão padrão descrito na documentação.    **Informações adicionais**:  - Cota: <a href=\"/docs/limites#dfe-eventos\">dfe-eventos</a>  - Consumo: 1 unidade por requisição.
    # @param body [NfePedidoEmissao] 
    # @param [Hash] opts the optional parameters
    # @return [File]
    def baixar_previa_xml_nfce(body, opts = {})
      data, _status_code, _headers = baixar_previa_xml_nfce_with_http_info(body, opts)
      data
    end

    # Prévia do XML da NFC-e
    # Através desse endpoint, é possível enviar os dados de uma NFC-e e gerar uma prévia do XML, sem a assinatura digital.    Os dados de entrada são os mesmos do endpoint de emissão de NFC-e (&#x60;POST /nfce&#x60;).    **Atenção**: O XML gerado por este endpoint é apenas para fins de visualização e não possui valor fiscal. Para a emissão de uma NF-e com valor fiscal, utilize o processo de emissão padrão descrito na documentação.    **Informações adicionais**:  - Cota: &lt;a href&#x3D;\&quot;/docs/limites#dfe-eventos\&quot;&gt;dfe-eventos&lt;/a&gt;  - Consumo: 1 unidade por requisição.
    # @param body [NfePedidoEmissao] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(File, Integer, Hash)>] File data, response status code and response headers
    def baixar_previa_xml_nfce_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NfceApi.baixar_previa_xml_nfce ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling NfceApi.baixar_previa_xml_nfce"
      end
      # resource path
      local_var_path = '/nfce/previa/xml'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'File'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['jwt', 'oauth2']

      new_options = opts.merge(
        :operation => :"NfceApi.baixar_previa_xml_nfce",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NfceApi#baixar_previa_xml_nfce\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Baixar XML do cancelamento
    # @param id [String] ID único da NFC-e gerado pela Nuvem Fiscal.
    # @param [Hash] opts the optional parameters
    # @return [File]
    def baixar_xml_cancelamento_nfce(id, opts = {})
      data, _status_code, _headers = baixar_xml_cancelamento_nfce_with_http_info(id, opts)
      data
    end

    # Baixar XML do cancelamento
    # @param id [String] ID único da NFC-e gerado pela Nuvem Fiscal.
    # @param [Hash] opts the optional parameters
    # @return [Array<(File, Integer, Hash)>] File data, response status code and response headers
    def baixar_xml_cancelamento_nfce_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NfceApi.baixar_xml_cancelamento_nfce ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling NfceApi.baixar_xml_cancelamento_nfce"
      end
      # resource path
      local_var_path = '/nfce/{id}/cancelamento/xml'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'File'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['jwt', 'oauth2']

      new_options = opts.merge(
        :operation => :"NfceApi.baixar_xml_cancelamento_nfce",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NfceApi#baixar_xml_cancelamento_nfce\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Baixar XML do evento
    # @param id [String] ID único do evento gerado pela Nuvem Fiscal.
    # @param [Hash] opts the optional parameters
    # @return [File]
    def baixar_xml_evento_nfce(id, opts = {})
      data, _status_code, _headers = baixar_xml_evento_nfce_with_http_info(id, opts)
      data
    end

    # Baixar XML do evento
    # @param id [String] ID único do evento gerado pela Nuvem Fiscal.
    # @param [Hash] opts the optional parameters
    # @return [Array<(File, Integer, Hash)>] File data, response status code and response headers
    def baixar_xml_evento_nfce_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NfceApi.baixar_xml_evento_nfce ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling NfceApi.baixar_xml_evento_nfce"
      end
      # resource path
      local_var_path = '/nfce/eventos/{id}/xml'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'File'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['jwt', 'oauth2']

      new_options = opts.merge(
        :operation => :"NfceApi.baixar_xml_evento_nfce",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NfceApi#baixar_xml_evento_nfce\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Baixar XML da inutilização
    # @param id [String] ID único do evento gerado pela Nuvem Fiscal.
    # @param [Hash] opts the optional parameters
    # @return [File]
    def baixar_xml_inutilizacao_nfce(id, opts = {})
      data, _status_code, _headers = baixar_xml_inutilizacao_nfce_with_http_info(id, opts)
      data
    end

    # Baixar XML da inutilização
    # @param id [String] ID único do evento gerado pela Nuvem Fiscal.
    # @param [Hash] opts the optional parameters
    # @return [Array<(File, Integer, Hash)>] File data, response status code and response headers
    def baixar_xml_inutilizacao_nfce_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NfceApi.baixar_xml_inutilizacao_nfce ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling NfceApi.baixar_xml_inutilizacao_nfce"
      end
      # resource path
      local_var_path = '/nfce/inutilizacoes/{id}/xml'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'File'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['jwt', 'oauth2']

      new_options = opts.merge(
        :operation => :"NfceApi.baixar_xml_inutilizacao_nfce",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NfceApi#baixar_xml_inutilizacao_nfce\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Baixar XML da NFC-e processada
    # Utilize esse endpoint para obter o XML da nota enviado para a SEFAZ, complementado com a informação do protocolo de autorização ou denegação de uso (TAG raiz `nfeProc`).    O XML só estará disponível nesse endpoint caso a nota tenha sido autorizada ou denegada pela SEFAZ. Para obter o XML nos demais casos, utilize o endpoint `GET /nfce/{id}/xml/nota`.
    # @param id [String] ID único da NFC-e gerado pela Nuvem Fiscal.
    # @param [Hash] opts the optional parameters
    # @return [File]
    def baixar_xml_nfce(id, opts = {})
      data, _status_code, _headers = baixar_xml_nfce_with_http_info(id, opts)
      data
    end

    # Baixar XML da NFC-e processada
    # Utilize esse endpoint para obter o XML da nota enviado para a SEFAZ, complementado com a informação do protocolo de autorização ou denegação de uso (TAG raiz &#x60;nfeProc&#x60;).    O XML só estará disponível nesse endpoint caso a nota tenha sido autorizada ou denegada pela SEFAZ. Para obter o XML nos demais casos, utilize o endpoint &#x60;GET /nfce/{id}/xml/nota&#x60;.
    # @param id [String] ID único da NFC-e gerado pela Nuvem Fiscal.
    # @param [Hash] opts the optional parameters
    # @return [Array<(File, Integer, Hash)>] File data, response status code and response headers
    def baixar_xml_nfce_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NfceApi.baixar_xml_nfce ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling NfceApi.baixar_xml_nfce"
      end
      # resource path
      local_var_path = '/nfce/{id}/xml'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'File'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['jwt', 'oauth2']

      new_options = opts.merge(
        :operation => :"NfceApi.baixar_xml_nfce",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NfceApi#baixar_xml_nfce\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Baixar XML da NFC-e
    # Utilize esse endpoint para obter o XML da nota enviado para a SEFAZ.    O XML estará disponível nesse endpoint mesmo em casos que a nota tenha sido rejeitada.
    # @param id [String] ID único da NFC-e gerado pela Nuvem Fiscal.
    # @param [Hash] opts the optional parameters
    # @return [File]
    def baixar_xml_nfce_nota(id, opts = {})
      data, _status_code, _headers = baixar_xml_nfce_nota_with_http_info(id, opts)
      data
    end

    # Baixar XML da NFC-e
    # Utilize esse endpoint para obter o XML da nota enviado para a SEFAZ.    O XML estará disponível nesse endpoint mesmo em casos que a nota tenha sido rejeitada.
    # @param id [String] ID único da NFC-e gerado pela Nuvem Fiscal.
    # @param [Hash] opts the optional parameters
    # @return [Array<(File, Integer, Hash)>] File data, response status code and response headers
    def baixar_xml_nfce_nota_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NfceApi.baixar_xml_nfce_nota ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling NfceApi.baixar_xml_nfce_nota"
      end
      # resource path
      local_var_path = '/nfce/{id}/xml/nota'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'File'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['jwt', 'oauth2']

      new_options = opts.merge(
        :operation => :"NfceApi.baixar_xml_nfce_nota",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NfceApi#baixar_xml_nfce_nota\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Baixar XML do Protocolo da SEFAZ
    # @param id [String] ID único da NFC-e gerado pela Nuvem Fiscal.
    # @param [Hash] opts the optional parameters
    # @return [File]
    def baixar_xml_nfce_protocolo(id, opts = {})
      data, _status_code, _headers = baixar_xml_nfce_protocolo_with_http_info(id, opts)
      data
    end

    # Baixar XML do Protocolo da SEFAZ
    # @param id [String] ID único da NFC-e gerado pela Nuvem Fiscal.
    # @param [Hash] opts the optional parameters
    # @return [Array<(File, Integer, Hash)>] File data, response status code and response headers
    def baixar_xml_nfce_protocolo_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NfceApi.baixar_xml_nfce_protocolo ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling NfceApi.baixar_xml_nfce_protocolo"
      end
      # resource path
      local_var_path = '/nfce/{id}/xml/protocolo'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'File'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['jwt', 'oauth2']

      new_options = opts.merge(
        :operation => :"NfceApi.baixar_xml_nfce_protocolo",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NfceApi#baixar_xml_nfce_protocolo\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Cancelar uma NFC-e autorizada
    # **Informações adicionais**:  - Cota: <a href=\"/docs/limites#dfe-eventos\">dfe-eventos</a>  - Consumo: 1 unidade por requisição.
    # @param id [String] ID único da NFC-e gerado pela Nuvem Fiscal.
    # @param [Hash] opts the optional parameters
    # @option opts [NfePedidoCancelamento] :body 
    # @return [DfeCancelamento]
    def cancelar_nfce(id, opts = {})
      data, _status_code, _headers = cancelar_nfce_with_http_info(id, opts)
      data
    end

    # Cancelar uma NFC-e autorizada
    # **Informações adicionais**:  - Cota: &lt;a href&#x3D;\&quot;/docs/limites#dfe-eventos\&quot;&gt;dfe-eventos&lt;/a&gt;  - Consumo: 1 unidade por requisição.
    # @param id [String] ID único da NFC-e gerado pela Nuvem Fiscal.
    # @param [Hash] opts the optional parameters
    # @option opts [NfePedidoCancelamento] :body 
    # @return [Array<(DfeCancelamento, Integer, Hash)>] DfeCancelamento data, response status code and response headers
    def cancelar_nfce_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NfceApi.cancelar_nfce ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling NfceApi.cancelar_nfce"
      end
      # resource path
      local_var_path = '/nfce/{id}/cancelamento'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'body'])

      # return_type
      return_type = opts[:debug_return_type] || 'DfeCancelamento'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['jwt', 'oauth2']

      new_options = opts.merge(
        :operation => :"NfceApi.cancelar_nfce",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NfceApi#cancelar_nfce\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Consultar o cancelamento da NFC-e
    # @param id [String] ID único da NFC-e gerado pela Nuvem Fiscal.
    # @param [Hash] opts the optional parameters
    # @return [DfeCancelamento]
    def consultar_cancelamento_nfce(id, opts = {})
      data, _status_code, _headers = consultar_cancelamento_nfce_with_http_info(id, opts)
      data
    end

    # Consultar o cancelamento da NFC-e
    # @param id [String] ID único da NFC-e gerado pela Nuvem Fiscal.
    # @param [Hash] opts the optional parameters
    # @return [Array<(DfeCancelamento, Integer, Hash)>] DfeCancelamento data, response status code and response headers
    def consultar_cancelamento_nfce_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NfceApi.consultar_cancelamento_nfce ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling NfceApi.consultar_cancelamento_nfce"
      end
      # resource path
      local_var_path = '/nfce/{id}/cancelamento'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'DfeCancelamento'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['jwt', 'oauth2']

      new_options = opts.merge(
        :operation => :"NfceApi.consultar_cancelamento_nfce",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NfceApi#consultar_cancelamento_nfce\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Consultar evento
    # @param id [String] ID único do evento gerado pela Nuvem Fiscal.
    # @param [Hash] opts the optional parameters
    # @return [DfeEvento]
    def consultar_evento_nfce(id, opts = {})
      data, _status_code, _headers = consultar_evento_nfce_with_http_info(id, opts)
      data
    end

    # Consultar evento
    # @param id [String] ID único do evento gerado pela Nuvem Fiscal.
    # @param [Hash] opts the optional parameters
    # @return [Array<(DfeEvento, Integer, Hash)>] DfeEvento data, response status code and response headers
    def consultar_evento_nfce_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NfceApi.consultar_evento_nfce ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling NfceApi.consultar_evento_nfce"
      end
      # resource path
      local_var_path = '/nfce/eventos/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'DfeEvento'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['jwt', 'oauth2']

      new_options = opts.merge(
        :operation => :"NfceApi.consultar_evento_nfce",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NfceApi#consultar_evento_nfce\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Consultar a inutilização de sequência de numeração
    # @param id [String] ID único do evento gerado pela Nuvem Fiscal.
    # @param [Hash] opts the optional parameters
    # @return [DfeInutilizacao]
    def consultar_inutilizacao_nfce(id, opts = {})
      data, _status_code, _headers = consultar_inutilizacao_nfce_with_http_info(id, opts)
      data
    end

    # Consultar a inutilização de sequência de numeração
    # @param id [String] ID único do evento gerado pela Nuvem Fiscal.
    # @param [Hash] opts the optional parameters
    # @return [Array<(DfeInutilizacao, Integer, Hash)>] DfeInutilizacao data, response status code and response headers
    def consultar_inutilizacao_nfce_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NfceApi.consultar_inutilizacao_nfce ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling NfceApi.consultar_inutilizacao_nfce"
      end
      # resource path
      local_var_path = '/nfce/inutilizacoes/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'DfeInutilizacao'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['jwt', 'oauth2']

      new_options = opts.merge(
        :operation => :"NfceApi.consultar_inutilizacao_nfce",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NfceApi#consultar_inutilizacao_nfce\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Consultar lote de NFC-e
    # Consulta os detalhes de um lote já existente. Forneça o ID único obtido de uma requisição de emissão ou de listagem de lotes e a Nuvem Fiscal irá retornar as informações do lote correspondente.
    # @param id [String] ID único do lote gerado pela Nuvem Fiscal.
    # @param [Hash] opts the optional parameters
    # @return [DfeLote]
    def consultar_lote_nfce(id, opts = {})
      data, _status_code, _headers = consultar_lote_nfce_with_http_info(id, opts)
      data
    end

    # Consultar lote de NFC-e
    # Consulta os detalhes de um lote já existente. Forneça o ID único obtido de uma requisição de emissão ou de listagem de lotes e a Nuvem Fiscal irá retornar as informações do lote correspondente.
    # @param id [String] ID único do lote gerado pela Nuvem Fiscal.
    # @param [Hash] opts the optional parameters
    # @return [Array<(DfeLote, Integer, Hash)>] DfeLote data, response status code and response headers
    def consultar_lote_nfce_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NfceApi.consultar_lote_nfce ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling NfceApi.consultar_lote_nfce"
      end
      # resource path
      local_var_path = '/nfce/lotes/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'DfeLote'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['jwt', 'oauth2']

      new_options = opts.merge(
        :operation => :"NfceApi.consultar_lote_nfce",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NfceApi#consultar_lote_nfce\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Consultar NFC-e
    # Consulta os detalhes de uma NFC-e já existente. Forneça o ID único obtido de uma requisição de emissão ou de listagem de notas e a Nuvem Fiscal irá retornar as informações da nota correspondente.
    # @param id [String] ID único da NFC-e gerado pela Nuvem Fiscal.
    # @param [Hash] opts the optional parameters
    # @return [Dfe]
    def consultar_nfce(id, opts = {})
      data, _status_code, _headers = consultar_nfce_with_http_info(id, opts)
      data
    end

    # Consultar NFC-e
    # Consulta os detalhes de uma NFC-e já existente. Forneça o ID único obtido de uma requisição de emissão ou de listagem de notas e a Nuvem Fiscal irá retornar as informações da nota correspondente.
    # @param id [String] ID único da NFC-e gerado pela Nuvem Fiscal.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Dfe, Integer, Hash)>] Dfe data, response status code and response headers
    def consultar_nfce_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NfceApi.consultar_nfce ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling NfceApi.consultar_nfce"
      end
      # resource path
      local_var_path = '/nfce/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Dfe'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['jwt', 'oauth2']

      new_options = opts.merge(
        :operation => :"NfceApi.consultar_nfce",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NfceApi#consultar_nfce\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Consulta do Status do Serviço na SEFAZ Autorizadora
    # Consulta do status do serviço prestado pelo Portal da Secretaria de Fazenda Estadual.    A Nuvem Fiscal mantém a última consulta em cache por 5 minutos, evitando sobrecarregar desnecessariamente os servidores da SEFAZ (conforme orientação do MOC - versão 7.0, item 5.5.3). Dessa forma, você poderá chamar esse endpoint quantas vezes quiser, sem preocupar-se em ter o seu CNPJ bloqueado por consumo indevido (Rejeição 656).
    # @param cpf_cnpj [String] CPF/CNPJ do emitente.  Utilize o valor sem máscara.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :autorizador Ambiente Autorizador.    Autorizadores disponíveis: &#x60;AM&#x60;, &#x60;BA&#x60;, &#x60;CE&#x60;, &#x60;GO&#x60;, &#x60;MG&#x60;, &#x60;MS&#x60;, &#x60;MT&#x60;, &#x60;PE&#x60;, &#x60;PR&#x60;, &#x60;RS&#x60;, &#x60;SP&#x60;, &#x60;SVRS&#x60;.    *Caso não seja informado, será utilizado o ambiente autorizador da UF do emitente.*
    # @return [DfeSefazStatus]
    def consultar_status_sefaz_nfce(cpf_cnpj, opts = {})
      data, _status_code, _headers = consultar_status_sefaz_nfce_with_http_info(cpf_cnpj, opts)
      data
    end

    # Consulta do Status do Serviço na SEFAZ Autorizadora
    # Consulta do status do serviço prestado pelo Portal da Secretaria de Fazenda Estadual.    A Nuvem Fiscal mantém a última consulta em cache por 5 minutos, evitando sobrecarregar desnecessariamente os servidores da SEFAZ (conforme orientação do MOC - versão 7.0, item 5.5.3). Dessa forma, você poderá chamar esse endpoint quantas vezes quiser, sem preocupar-se em ter o seu CNPJ bloqueado por consumo indevido (Rejeição 656).
    # @param cpf_cnpj [String] CPF/CNPJ do emitente.  Utilize o valor sem máscara.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :autorizador Ambiente Autorizador.    Autorizadores disponíveis: &#x60;AM&#x60;, &#x60;BA&#x60;, &#x60;CE&#x60;, &#x60;GO&#x60;, &#x60;MG&#x60;, &#x60;MS&#x60;, &#x60;MT&#x60;, &#x60;PE&#x60;, &#x60;PR&#x60;, &#x60;RS&#x60;, &#x60;SP&#x60;, &#x60;SVRS&#x60;.    *Caso não seja informado, será utilizado o ambiente autorizador da UF do emitente.*
    # @return [Array<(DfeSefazStatus, Integer, Hash)>] DfeSefazStatus data, response status code and response headers
    def consultar_status_sefaz_nfce_with_http_info(cpf_cnpj, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NfceApi.consultar_status_sefaz_nfce ...'
      end
      # verify the required parameter 'cpf_cnpj' is set
      if @api_client.config.client_side_validation && cpf_cnpj.nil?
        fail ArgumentError, "Missing the required parameter 'cpf_cnpj' when calling NfceApi.consultar_status_sefaz_nfce"
      end
      # resource path
      local_var_path = '/nfce/sefaz/status'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'cpf_cnpj'] = cpf_cnpj
      query_params[:'autorizador'] = opts[:'autorizador'] if !opts[:'autorizador'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'DfeSefazStatus'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['jwt', 'oauth2']

      new_options = opts.merge(
        :operation => :"NfceApi.consultar_status_sefaz_nfce",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NfceApi#consultar_status_sefaz_nfce\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Emitir lote de NFC-e
    # **Informações adicionais**:  - Cota: <a href=\"/docs/limites#dfe-eventos\">dfe-eventos</a>  - Consumo: 1 unidade por NFC-e.
    # @param body [NfePedidoEmissaoLote] 
    # @param [Hash] opts the optional parameters
    # @return [DfeLote]
    def emitir_lote_nfce(body, opts = {})
      data, _status_code, _headers = emitir_lote_nfce_with_http_info(body, opts)
      data
    end

    # Emitir lote de NFC-e
    # **Informações adicionais**:  - Cota: &lt;a href&#x3D;\&quot;/docs/limites#dfe-eventos\&quot;&gt;dfe-eventos&lt;/a&gt;  - Consumo: 1 unidade por NFC-e.
    # @param body [NfePedidoEmissaoLote] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(DfeLote, Integer, Hash)>] DfeLote data, response status code and response headers
    def emitir_lote_nfce_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NfceApi.emitir_lote_nfce ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling NfceApi.emitir_lote_nfce"
      end
      # resource path
      local_var_path = '/nfce/lotes'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'DfeLote'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['jwt', 'oauth2']

      new_options = opts.merge(
        :operation => :"NfceApi.emitir_lote_nfce",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NfceApi#emitir_lote_nfce\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Emitir NFC-e
    # **Informações adicionais**:  - Cota: <a href=\"/docs/limites#dfe-eventos\">dfe-eventos</a>  - Consumo: 1 unidade por requisição.
    # @param body [NfePedidoEmissao] 
    # @param [Hash] opts the optional parameters
    # @return [Dfe]
    def emitir_nfce(body, opts = {})
      data, _status_code, _headers = emitir_nfce_with_http_info(body, opts)
      data
    end

    # Emitir NFC-e
    # **Informações adicionais**:  - Cota: &lt;a href&#x3D;\&quot;/docs/limites#dfe-eventos\&quot;&gt;dfe-eventos&lt;/a&gt;  - Consumo: 1 unidade por requisição.
    # @param body [NfePedidoEmissao] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Dfe, Integer, Hash)>] Dfe data, response status code and response headers
    def emitir_nfce_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NfceApi.emitir_nfce ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling NfceApi.emitir_nfce"
      end
      # resource path
      local_var_path = '/nfce'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'Dfe'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['jwt', 'oauth2']

      new_options = opts.merge(
        :operation => :"NfceApi.emitir_nfce",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NfceApi#emitir_nfce\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Enviar e-mail
    # Envia o XML e PDF da nota via email.    **Informações adicionais**:  - Cota: <a href=\"/docs/limites#dfe-eventos\">dfe-eventos</a>  - Consumo: 1 unidade por requisição.
    # @param id [String] ID único da NFC-e gerado pela Nuvem Fiscal.
    # @param [Hash] opts the optional parameters
    # @option opts [DfePedidoEnvioEmail] :body 
    # @return [EmailStatusResponse]
    def enviar_email_nfce(id, opts = {})
      data, _status_code, _headers = enviar_email_nfce_with_http_info(id, opts)
      data
    end

    # Enviar e-mail
    # Envia o XML e PDF da nota via email.    **Informações adicionais**:  - Cota: &lt;a href&#x3D;\&quot;/docs/limites#dfe-eventos\&quot;&gt;dfe-eventos&lt;/a&gt;  - Consumo: 1 unidade por requisição.
    # @param id [String] ID único da NFC-e gerado pela Nuvem Fiscal.
    # @param [Hash] opts the optional parameters
    # @option opts [DfePedidoEnvioEmail] :body 
    # @return [Array<(EmailStatusResponse, Integer, Hash)>] EmailStatusResponse data, response status code and response headers
    def enviar_email_nfce_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NfceApi.enviar_email_nfce ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling NfceApi.enviar_email_nfce"
      end
      # resource path
      local_var_path = '/nfce/{id}/email'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'body'])

      # return_type
      return_type = opts[:debug_return_type] || 'EmailStatusResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['jwt', 'oauth2']

      new_options = opts.merge(
        :operation => :"NfceApi.enviar_email_nfce",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NfceApi#enviar_email_nfce\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Inutilizar uma sequência de numeração de NFC-e
    # **Informações adicionais**:  - Cota: <a href=\"/docs/limites#dfe-eventos\">dfe-eventos</a>  - Consumo: 1 unidade por requisição.
    # @param body [DfePedidoInutilizacao] 
    # @param [Hash] opts the optional parameters
    # @return [DfeInutilizacao]
    def inutilizar_numeracao_nfce(body, opts = {})
      data, _status_code, _headers = inutilizar_numeracao_nfce_with_http_info(body, opts)
      data
    end

    # Inutilizar uma sequência de numeração de NFC-e
    # **Informações adicionais**:  - Cota: &lt;a href&#x3D;\&quot;/docs/limites#dfe-eventos\&quot;&gt;dfe-eventos&lt;/a&gt;  - Consumo: 1 unidade por requisição.
    # @param body [DfePedidoInutilizacao] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(DfeInutilizacao, Integer, Hash)>] DfeInutilizacao data, response status code and response headers
    def inutilizar_numeracao_nfce_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NfceApi.inutilizar_numeracao_nfce ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling NfceApi.inutilizar_numeracao_nfce"
      end
      # resource path
      local_var_path = '/nfce/inutilizacoes'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'DfeInutilizacao'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['jwt', 'oauth2']

      new_options = opts.merge(
        :operation => :"NfceApi.inutilizar_numeracao_nfce",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NfceApi#inutilizar_numeracao_nfce\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Listar eventos
    # Retorna a lista de eventos vinculados a um documento fiscal de acordo com os critérios de busca utilizados. Os eventos são retornados ordenados pela data da criação, com as mais recentes aparecendo primeiro.
    # @param dfe_id [String] ID único gerado pela Nuvem Fiscal para o documento fiscal.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :top Limite no número de objetos a serem retornados pela API, entre 1 e 100. (default to 10)
    # @option opts [Integer] :skip Quantidade de objetos que serão ignorados antes da lista começar a ser retornada. (default to 0)
    # @option opts [Boolean] :inlinecount Inclui no JSON de resposta, na propriedade &#x60;@count&#x60;, o número total de registros que o filtro retornaria, independente dos filtros de paginação. (default to false)
    # @return [DfeEventoListagem]
    def listar_eventos_nfce(dfe_id, opts = {})
      data, _status_code, _headers = listar_eventos_nfce_with_http_info(dfe_id, opts)
      data
    end

    # Listar eventos
    # Retorna a lista de eventos vinculados a um documento fiscal de acordo com os critérios de busca utilizados. Os eventos são retornados ordenados pela data da criação, com as mais recentes aparecendo primeiro.
    # @param dfe_id [String] ID único gerado pela Nuvem Fiscal para o documento fiscal.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :top Limite no número de objetos a serem retornados pela API, entre 1 e 100. (default to 10)
    # @option opts [Integer] :skip Quantidade de objetos que serão ignorados antes da lista começar a ser retornada. (default to 0)
    # @option opts [Boolean] :inlinecount Inclui no JSON de resposta, na propriedade &#x60;@count&#x60;, o número total de registros que o filtro retornaria, independente dos filtros de paginação. (default to false)
    # @return [Array<(DfeEventoListagem, Integer, Hash)>] DfeEventoListagem data, response status code and response headers
    def listar_eventos_nfce_with_http_info(dfe_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NfceApi.listar_eventos_nfce ...'
      end
      # verify the required parameter 'dfe_id' is set
      if @api_client.config.client_side_validation && dfe_id.nil?
        fail ArgumentError, "Missing the required parameter 'dfe_id' when calling NfceApi.listar_eventos_nfce"
      end
      # resource path
      local_var_path = '/nfce/eventos'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'dfe_id'] = dfe_id
      query_params[:'$top'] = opts[:'top'] if !opts[:'top'].nil?
      query_params[:'$skip'] = opts[:'skip'] if !opts[:'skip'].nil?
      query_params[:'$inlinecount'] = opts[:'inlinecount'] if !opts[:'inlinecount'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'DfeEventoListagem'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['jwt', 'oauth2']

      new_options = opts.merge(
        :operation => :"NfceApi.listar_eventos_nfce",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NfceApi#listar_eventos_nfce\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Listar lotes de NFC-e
    # Retorna a lista dos lotes de acordo com os critérios de busca utilizados. Os lotes são retornados ordenados pela data da criação, com os mais recentes aparecendo primeiro.
    # @param cpf_cnpj [String] Filtrar pelo CPF ou CNPJ do emitente.  Utilize o valor sem máscara.
    # @param ambiente [String] Identificação do Ambiente.    Valores aceitos: homologacao, producao
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :top Limite no número de objetos a serem retornados pela API, entre 1 e 100. (default to 10)
    # @option opts [Integer] :skip Quantidade de objetos que serão ignorados antes da lista começar a ser retornada. (default to 0)
    # @option opts [Boolean] :inlinecount Inclui no JSON de resposta, na propriedade &#x60;@count&#x60;, o número total de registros que o filtro retornaria, independente dos filtros de paginação. (default to false)
    # @option opts [String] :referencia 
    # @return [DfeLoteListagem]
    def listar_lotes_nfce(cpf_cnpj, ambiente, opts = {})
      data, _status_code, _headers = listar_lotes_nfce_with_http_info(cpf_cnpj, ambiente, opts)
      data
    end

    # Listar lotes de NFC-e
    # Retorna a lista dos lotes de acordo com os critérios de busca utilizados. Os lotes são retornados ordenados pela data da criação, com os mais recentes aparecendo primeiro.
    # @param cpf_cnpj [String] Filtrar pelo CPF ou CNPJ do emitente.  Utilize o valor sem máscara.
    # @param ambiente [String] Identificação do Ambiente.    Valores aceitos: homologacao, producao
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :top Limite no número de objetos a serem retornados pela API, entre 1 e 100. (default to 10)
    # @option opts [Integer] :skip Quantidade de objetos que serão ignorados antes da lista começar a ser retornada. (default to 0)
    # @option opts [Boolean] :inlinecount Inclui no JSON de resposta, na propriedade &#x60;@count&#x60;, o número total de registros que o filtro retornaria, independente dos filtros de paginação. (default to false)
    # @option opts [String] :referencia 
    # @return [Array<(DfeLoteListagem, Integer, Hash)>] DfeLoteListagem data, response status code and response headers
    def listar_lotes_nfce_with_http_info(cpf_cnpj, ambiente, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NfceApi.listar_lotes_nfce ...'
      end
      # verify the required parameter 'cpf_cnpj' is set
      if @api_client.config.client_side_validation && cpf_cnpj.nil?
        fail ArgumentError, "Missing the required parameter 'cpf_cnpj' when calling NfceApi.listar_lotes_nfce"
      end
      # verify the required parameter 'ambiente' is set
      if @api_client.config.client_side_validation && ambiente.nil?
        fail ArgumentError, "Missing the required parameter 'ambiente' when calling NfceApi.listar_lotes_nfce"
      end
      # resource path
      local_var_path = '/nfce/lotes'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'cpf_cnpj'] = cpf_cnpj
      query_params[:'ambiente'] = ambiente
      query_params[:'$top'] = opts[:'top'] if !opts[:'top'].nil?
      query_params[:'$skip'] = opts[:'skip'] if !opts[:'skip'].nil?
      query_params[:'$inlinecount'] = opts[:'inlinecount'] if !opts[:'inlinecount'].nil?
      query_params[:'referencia'] = opts[:'referencia'] if !opts[:'referencia'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'DfeLoteListagem'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['jwt', 'oauth2']

      new_options = opts.merge(
        :operation => :"NfceApi.listar_lotes_nfce",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NfceApi#listar_lotes_nfce\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Listar NFC-e
    # Retorna a lista de notas de acordo com os critérios de busca utilizados. As notas são retornadas ordenadas pela data da criação, com as mais recentes aparecendo primeiro.
    # @param cpf_cnpj [String] Filtrar pelo CPF ou CNPJ do emitente.    Utilize o valor sem máscara.
    # @param ambiente [String] Identificação do Ambiente.    Valores aceitos: homologacao, producao
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :top Limite no número de objetos a serem retornados pela API, entre 1 e 100. (default to 10)
    # @option opts [Integer] :skip Quantidade de objetos que serão ignorados antes da lista começar a ser retornada. (default to 0)
    # @option opts [Boolean] :inlinecount Inclui no JSON de resposta, na propriedade &#x60;@count&#x60;, o número total de registros que o filtro retornaria, independente dos filtros de paginação. (default to false)
    # @option opts [String] :referencia Seu identificador único para o documento.
    # @option opts [String] :chave Chave de acesso do DF-e.
    # @option opts [String] :serie Série do DF-e.
    # @return [DfeListagem]
    def listar_nfce(cpf_cnpj, ambiente, opts = {})
      data, _status_code, _headers = listar_nfce_with_http_info(cpf_cnpj, ambiente, opts)
      data
    end

    # Listar NFC-e
    # Retorna a lista de notas de acordo com os critérios de busca utilizados. As notas são retornadas ordenadas pela data da criação, com as mais recentes aparecendo primeiro.
    # @param cpf_cnpj [String] Filtrar pelo CPF ou CNPJ do emitente.    Utilize o valor sem máscara.
    # @param ambiente [String] Identificação do Ambiente.    Valores aceitos: homologacao, producao
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :top Limite no número de objetos a serem retornados pela API, entre 1 e 100. (default to 10)
    # @option opts [Integer] :skip Quantidade de objetos que serão ignorados antes da lista começar a ser retornada. (default to 0)
    # @option opts [Boolean] :inlinecount Inclui no JSON de resposta, na propriedade &#x60;@count&#x60;, o número total de registros que o filtro retornaria, independente dos filtros de paginação. (default to false)
    # @option opts [String] :referencia Seu identificador único para o documento.
    # @option opts [String] :chave Chave de acesso do DF-e.
    # @option opts [String] :serie Série do DF-e.
    # @return [Array<(DfeListagem, Integer, Hash)>] DfeListagem data, response status code and response headers
    def listar_nfce_with_http_info(cpf_cnpj, ambiente, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NfceApi.listar_nfce ...'
      end
      # verify the required parameter 'cpf_cnpj' is set
      if @api_client.config.client_side_validation && cpf_cnpj.nil?
        fail ArgumentError, "Missing the required parameter 'cpf_cnpj' when calling NfceApi.listar_nfce"
      end
      # verify the required parameter 'ambiente' is set
      if @api_client.config.client_side_validation && ambiente.nil?
        fail ArgumentError, "Missing the required parameter 'ambiente' when calling NfceApi.listar_nfce"
      end
      # resource path
      local_var_path = '/nfce'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'cpf_cnpj'] = cpf_cnpj
      query_params[:'ambiente'] = ambiente
      query_params[:'$top'] = opts[:'top'] if !opts[:'top'].nil?
      query_params[:'$skip'] = opts[:'skip'] if !opts[:'skip'].nil?
      query_params[:'$inlinecount'] = opts[:'inlinecount'] if !opts[:'inlinecount'].nil?
      query_params[:'referencia'] = opts[:'referencia'] if !opts[:'referencia'].nil?
      query_params[:'chave'] = opts[:'chave'] if !opts[:'chave'].nil?
      query_params[:'serie'] = opts[:'serie'] if !opts[:'serie'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'DfeListagem'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['jwt', 'oauth2']

      new_options = opts.merge(
        :operation => :"NfceApi.listar_nfce",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NfceApi#listar_nfce\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Sincroniza dados na NFC-e a partir da SEFAZ
    # Realiza a sincronização dos dados a partir da consulta da situação atual da NFC-e na Base de Dados do Portal da Secretaria de Fazenda Estadual.    **Cenários de uso**:  * Sincronizar uma nota que se encontra com o status `erro` na Nuvem Fiscal, mas está autorizada na SEFAZ (útil em casos de erros de transmissão com a SEFAZ, como instabilidades e timeouts).  * Sincronizar uma nota que se encontra com o status `autorizado`na Nuvem Fiscal, mas está cancelada na SEFAZ.  * Sincronizar todos os eventos de Cancelamento, Carta de Correção e EPEC de uma nota que porventura não tenham sido feitos a partir da Nuvem Fiscal.    **Informações adicionais**:  - Cota: <a href=\"/docs/limites#dfe-eventos\">dfe-eventos</a>  - Consumo: 1 unidade por evento sincronizado ou requisição.
    # @param id [String] ID único da NFC-e gerado pela Nuvem Fiscal.
    # @param [Hash] opts the optional parameters
    # @return [DfeSincronizacao]
    def sincronizar_nfce(id, opts = {})
      data, _status_code, _headers = sincronizar_nfce_with_http_info(id, opts)
      data
    end

    # Sincroniza dados na NFC-e a partir da SEFAZ
    # Realiza a sincronização dos dados a partir da consulta da situação atual da NFC-e na Base de Dados do Portal da Secretaria de Fazenda Estadual.    **Cenários de uso**:  * Sincronizar uma nota que se encontra com o status &#x60;erro&#x60; na Nuvem Fiscal, mas está autorizada na SEFAZ (útil em casos de erros de transmissão com a SEFAZ, como instabilidades e timeouts).  * Sincronizar uma nota que se encontra com o status &#x60;autorizado&#x60;na Nuvem Fiscal, mas está cancelada na SEFAZ.  * Sincronizar todos os eventos de Cancelamento, Carta de Correção e EPEC de uma nota que porventura não tenham sido feitos a partir da Nuvem Fiscal.    **Informações adicionais**:  - Cota: &lt;a href&#x3D;\&quot;/docs/limites#dfe-eventos\&quot;&gt;dfe-eventos&lt;/a&gt;  - Consumo: 1 unidade por evento sincronizado ou requisição.
    # @param id [String] ID único da NFC-e gerado pela Nuvem Fiscal.
    # @param [Hash] opts the optional parameters
    # @return [Array<(DfeSincronizacao, Integer, Hash)>] DfeSincronizacao data, response status code and response headers
    def sincronizar_nfce_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NfceApi.sincronizar_nfce ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling NfceApi.sincronizar_nfce"
      end
      # resource path
      local_var_path = '/nfce/{id}/sincronizar'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'DfeSincronizacao'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['jwt', 'oauth2']

      new_options = opts.merge(
        :operation => :"NfceApi.sincronizar_nfce",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NfceApi#sincronizar_nfce\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
