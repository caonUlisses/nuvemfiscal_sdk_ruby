=begin
#API Nuvem Fiscal

#API para automação comercial e documentos fiscais.

The version of the OpenAPI document: 2.44.0

Generated by: https://openapi-generator.tech
Generator version: 7.10.0

=end

require 'cgi'

module NuvemfiscalSdkRuby
  class NfcomApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Baixar XML do cancelamento
    # @param id [String] ID único da NFCom gerada pela Nuvem Fiscal.
    # @param [Hash] opts the optional parameters
    # @return [File]
    def baixar_xml_cancelamento_nfcom(id, opts = {})
      data, _status_code, _headers = baixar_xml_cancelamento_nfcom_with_http_info(id, opts)
      data
    end

    # Baixar XML do cancelamento
    # @param id [String] ID único da NFCom gerada pela Nuvem Fiscal.
    # @param [Hash] opts the optional parameters
    # @return [Array<(File, Integer, Hash)>] File data, response status code and response headers
    def baixar_xml_cancelamento_nfcom_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NfcomApi.baixar_xml_cancelamento_nfcom ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling NfcomApi.baixar_xml_cancelamento_nfcom"
      end
      # resource path
      local_var_path = '/nfcom/{id}/cancelamento/xml'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'File'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['jwt', 'oauth2']

      new_options = opts.merge(
        :operation => :"NfcomApi.baixar_xml_cancelamento_nfcom",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NfcomApi#baixar_xml_cancelamento_nfcom\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Baixar XML da NFCom processada
    # Utilize esse endpoint para obter o XML da nota enviada para a SEFAZ, complementado com a informação do protocolo de autorização de uso (TAG raiz `nfcomProc`).    O XML só estará disponível nesse endpoint caso a nota tenha sido autorizada pela SEFAZ. Para obter o XML nos demais casos, utilize o endpoint `GET /nfcom/{id}/xml/nota`.
    # @param id [String] ID único da NFCom gerada pela Nuvem Fiscal.
    # @param [Hash] opts the optional parameters
    # @return [File]
    def baixar_xml_nfcom(id, opts = {})
      data, _status_code, _headers = baixar_xml_nfcom_with_http_info(id, opts)
      data
    end

    # Baixar XML da NFCom processada
    # Utilize esse endpoint para obter o XML da nota enviada para a SEFAZ, complementado com a informação do protocolo de autorização de uso (TAG raiz &#x60;nfcomProc&#x60;).    O XML só estará disponível nesse endpoint caso a nota tenha sido autorizada pela SEFAZ. Para obter o XML nos demais casos, utilize o endpoint &#x60;GET /nfcom/{id}/xml/nota&#x60;.
    # @param id [String] ID único da NFCom gerada pela Nuvem Fiscal.
    # @param [Hash] opts the optional parameters
    # @return [Array<(File, Integer, Hash)>] File data, response status code and response headers
    def baixar_xml_nfcom_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NfcomApi.baixar_xml_nfcom ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling NfcomApi.baixar_xml_nfcom"
      end
      # resource path
      local_var_path = '/nfcom/{id}/xml'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'File'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['jwt', 'oauth2']

      new_options = opts.merge(
        :operation => :"NfcomApi.baixar_xml_nfcom",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NfcomApi#baixar_xml_nfcom\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Baixar XML da NFCom
    # Utilize esse endpoint para obter o XML da nota enviada para a SEFAZ.    O XML estará disponível nesse endpoint mesmo em casos que a nota tenha sido rejeitada.
    # @param id [String] ID único da NFCom gerada pela Nuvem Fiscal.
    # @param [Hash] opts the optional parameters
    # @return [File]
    def baixar_xml_nfcom_nota(id, opts = {})
      data, _status_code, _headers = baixar_xml_nfcom_nota_with_http_info(id, opts)
      data
    end

    # Baixar XML da NFCom
    # Utilize esse endpoint para obter o XML da nota enviada para a SEFAZ.    O XML estará disponível nesse endpoint mesmo em casos que a nota tenha sido rejeitada.
    # @param id [String] ID único da NFCom gerada pela Nuvem Fiscal.
    # @param [Hash] opts the optional parameters
    # @return [Array<(File, Integer, Hash)>] File data, response status code and response headers
    def baixar_xml_nfcom_nota_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NfcomApi.baixar_xml_nfcom_nota ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling NfcomApi.baixar_xml_nfcom_nota"
      end
      # resource path
      local_var_path = '/nfcom/{id}/xml/nota'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'File'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['jwt', 'oauth2']

      new_options = opts.merge(
        :operation => :"NfcomApi.baixar_xml_nfcom_nota",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NfcomApi#baixar_xml_nfcom_nota\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Baixar XML do Protocolo da SEFAZ
    # @param id [String] ID único da NFCom gerada pela Nuvem Fiscal.
    # @param [Hash] opts the optional parameters
    # @return [File]
    def baixar_xml_nfcom_protocolo(id, opts = {})
      data, _status_code, _headers = baixar_xml_nfcom_protocolo_with_http_info(id, opts)
      data
    end

    # Baixar XML do Protocolo da SEFAZ
    # @param id [String] ID único da NFCom gerada pela Nuvem Fiscal.
    # @param [Hash] opts the optional parameters
    # @return [Array<(File, Integer, Hash)>] File data, response status code and response headers
    def baixar_xml_nfcom_protocolo_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NfcomApi.baixar_xml_nfcom_protocolo ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling NfcomApi.baixar_xml_nfcom_protocolo"
      end
      # resource path
      local_var_path = '/nfcom/{id}/xml/protocolo'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'File'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['jwt', 'oauth2']

      new_options = opts.merge(
        :operation => :"NfcomApi.baixar_xml_nfcom_protocolo",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NfcomApi#baixar_xml_nfcom_protocolo\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Cancelar uma NFCom autorizada
    # **Informações adicionais**:  - Cota: <a href=\"/docs/limites#dfe-eventos\">dfe-eventos</a>  - Consumo: 1 unidade por requisição.
    # @param id [String] ID único da NFCom gerada pela Nuvem Fiscal.
    # @param [Hash] opts the optional parameters
    # @option opts [NfcomPedidoCancelamento] :body 
    # @return [DfeCancelamento]
    def cancelar_nfcom(id, opts = {})
      data, _status_code, _headers = cancelar_nfcom_with_http_info(id, opts)
      data
    end

    # Cancelar uma NFCom autorizada
    # **Informações adicionais**:  - Cota: &lt;a href&#x3D;\&quot;/docs/limites#dfe-eventos\&quot;&gt;dfe-eventos&lt;/a&gt;  - Consumo: 1 unidade por requisição.
    # @param id [String] ID único da NFCom gerada pela Nuvem Fiscal.
    # @param [Hash] opts the optional parameters
    # @option opts [NfcomPedidoCancelamento] :body 
    # @return [Array<(DfeCancelamento, Integer, Hash)>] DfeCancelamento data, response status code and response headers
    def cancelar_nfcom_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NfcomApi.cancelar_nfcom ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling NfcomApi.cancelar_nfcom"
      end
      # resource path
      local_var_path = '/nfcom/{id}/cancelamento'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'body'])

      # return_type
      return_type = opts[:debug_return_type] || 'DfeCancelamento'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['jwt', 'oauth2']

      new_options = opts.merge(
        :operation => :"NfcomApi.cancelar_nfcom",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NfcomApi#cancelar_nfcom\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Consultar o cancelamento da NFCom
    # @param id [String] ID único da NFCom gerada pela Nuvem Fiscal.
    # @param [Hash] opts the optional parameters
    # @return [DfeCancelamento]
    def consultar_cancelamento_nfcom(id, opts = {})
      data, _status_code, _headers = consultar_cancelamento_nfcom_with_http_info(id, opts)
      data
    end

    # Consultar o cancelamento da NFCom
    # @param id [String] ID único da NFCom gerada pela Nuvem Fiscal.
    # @param [Hash] opts the optional parameters
    # @return [Array<(DfeCancelamento, Integer, Hash)>] DfeCancelamento data, response status code and response headers
    def consultar_cancelamento_nfcom_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NfcomApi.consultar_cancelamento_nfcom ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling NfcomApi.consultar_cancelamento_nfcom"
      end
      # resource path
      local_var_path = '/nfcom/{id}/cancelamento'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'DfeCancelamento'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['jwt', 'oauth2']

      new_options = opts.merge(
        :operation => :"NfcomApi.consultar_cancelamento_nfcom",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NfcomApi#consultar_cancelamento_nfcom\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Consultar NFCom
    # Consulta os detalhes de uma NFCom já existente. Forneça o ID único obtido de uma requisição de emissão ou de listagem de NFCom e a Nuvem Fiscal irá retornar as informações da NFCom correspondente.
    # @param id [String] ID único da NFCom gerada pela Nuvem Fiscal.
    # @param [Hash] opts the optional parameters
    # @return [Dfe]
    def consultar_nfcom(id, opts = {})
      data, _status_code, _headers = consultar_nfcom_with_http_info(id, opts)
      data
    end

    # Consultar NFCom
    # Consulta os detalhes de uma NFCom já existente. Forneça o ID único obtido de uma requisição de emissão ou de listagem de NFCom e a Nuvem Fiscal irá retornar as informações da NFCom correspondente.
    # @param id [String] ID único da NFCom gerada pela Nuvem Fiscal.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Dfe, Integer, Hash)>] Dfe data, response status code and response headers
    def consultar_nfcom_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NfcomApi.consultar_nfcom ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling NfcomApi.consultar_nfcom"
      end
      # resource path
      local_var_path = '/nfcom/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Dfe'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['jwt', 'oauth2']

      new_options = opts.merge(
        :operation => :"NfcomApi.consultar_nfcom",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NfcomApi#consultar_nfcom\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Consulta do Status do Serviço na SEFAZ Autorizadora
    # Consulta do status do serviço prestado pelo Portal da Secretaria de Fazenda Estadual.    A Nuvem Fiscal mantém a última consulta em cache por 5 minutos, evitando sobrecarregar desnecessariamente os servidores da SEFAZ.
    # @param cpf_cnpj [String] CPF/CNPJ do emitente.  Utilize o valor sem máscara.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :autorizador Ambiente Autorizador.    Autorizadores disponíveis: &#x60;SVRS&#x60;.    *Caso não seja informado, será utilizado o ambiente autorizador da UF do emitente.*
    # @return [DfeSefazStatus]
    def consultar_status_sefaz_nfcom(cpf_cnpj, opts = {})
      data, _status_code, _headers = consultar_status_sefaz_nfcom_with_http_info(cpf_cnpj, opts)
      data
    end

    # Consulta do Status do Serviço na SEFAZ Autorizadora
    # Consulta do status do serviço prestado pelo Portal da Secretaria de Fazenda Estadual.    A Nuvem Fiscal mantém a última consulta em cache por 5 minutos, evitando sobrecarregar desnecessariamente os servidores da SEFAZ.
    # @param cpf_cnpj [String] CPF/CNPJ do emitente.  Utilize o valor sem máscara.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :autorizador Ambiente Autorizador.    Autorizadores disponíveis: &#x60;SVRS&#x60;.    *Caso não seja informado, será utilizado o ambiente autorizador da UF do emitente.*
    # @return [Array<(DfeSefazStatus, Integer, Hash)>] DfeSefazStatus data, response status code and response headers
    def consultar_status_sefaz_nfcom_with_http_info(cpf_cnpj, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NfcomApi.consultar_status_sefaz_nfcom ...'
      end
      # verify the required parameter 'cpf_cnpj' is set
      if @api_client.config.client_side_validation && cpf_cnpj.nil?
        fail ArgumentError, "Missing the required parameter 'cpf_cnpj' when calling NfcomApi.consultar_status_sefaz_nfcom"
      end
      # resource path
      local_var_path = '/nfcom/sefaz/status'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'cpf_cnpj'] = cpf_cnpj
      query_params[:'autorizador'] = opts[:'autorizador'] if !opts[:'autorizador'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'DfeSefazStatus'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['jwt', 'oauth2']

      new_options = opts.merge(
        :operation => :"NfcomApi.consultar_status_sefaz_nfcom",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NfcomApi#consultar_status_sefaz_nfcom\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Emitir NFCom
    # **Informações adicionais**:  - Cota: <a href=\"/docs/limites#dfe-eventos\">dfe-eventos</a>  - Consumo: 1 unidade por requisição.
    # @param body [NfcomPedidoEmissao] 
    # @param [Hash] opts the optional parameters
    # @return [Dfe]
    def emitir_nfcom(body, opts = {})
      data, _status_code, _headers = emitir_nfcom_with_http_info(body, opts)
      data
    end

    # Emitir NFCom
    # **Informações adicionais**:  - Cota: &lt;a href&#x3D;\&quot;/docs/limites#dfe-eventos\&quot;&gt;dfe-eventos&lt;/a&gt;  - Consumo: 1 unidade por requisição.
    # @param body [NfcomPedidoEmissao] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Dfe, Integer, Hash)>] Dfe data, response status code and response headers
    def emitir_nfcom_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NfcomApi.emitir_nfcom ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling NfcomApi.emitir_nfcom"
      end
      # resource path
      local_var_path = '/nfcom'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'Dfe'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['jwt', 'oauth2']

      new_options = opts.merge(
        :operation => :"NfcomApi.emitir_nfcom",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NfcomApi#emitir_nfcom\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Listar NFCom
    # Retorna a lista de NFCom de acordo com os critérios de busca utilizados. As NFCom são retornadas ordenadas pela data da criação, com as mais recentes aparecendo primeiro.
    # @param cpf_cnpj [String] Filtrar pelo CPF ou CNPJ do emitente.    Utilize o valor sem máscara.
    # @param ambiente [String] Identificação do Ambiente.    Valores aceitos: homologacao, producao
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :top Limite no número de objetos a serem retornados pela API, entre 1 e 100. (default to 10)
    # @option opts [Integer] :skip Quantidade de objetos que serão ignorados antes da lista começar a ser retornada. (default to 0)
    # @option opts [Boolean] :inlinecount Inclui no JSON de resposta, na propriedade &#x60;@count&#x60;, o número total de registros que o filtro retornaria, independente dos filtros de paginação. (default to false)
    # @option opts [String] :referencia Seu identificador único para o documento.
    # @option opts [String] :chave Chave de acesso do DF-e.
    # @option opts [String] :serie Série do DF-e.
    # @return [DfeListagem]
    def listar_nfcom(cpf_cnpj, ambiente, opts = {})
      data, _status_code, _headers = listar_nfcom_with_http_info(cpf_cnpj, ambiente, opts)
      data
    end

    # Listar NFCom
    # Retorna a lista de NFCom de acordo com os critérios de busca utilizados. As NFCom são retornadas ordenadas pela data da criação, com as mais recentes aparecendo primeiro.
    # @param cpf_cnpj [String] Filtrar pelo CPF ou CNPJ do emitente.    Utilize o valor sem máscara.
    # @param ambiente [String] Identificação do Ambiente.    Valores aceitos: homologacao, producao
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :top Limite no número de objetos a serem retornados pela API, entre 1 e 100. (default to 10)
    # @option opts [Integer] :skip Quantidade de objetos que serão ignorados antes da lista começar a ser retornada. (default to 0)
    # @option opts [Boolean] :inlinecount Inclui no JSON de resposta, na propriedade &#x60;@count&#x60;, o número total de registros que o filtro retornaria, independente dos filtros de paginação. (default to false)
    # @option opts [String] :referencia Seu identificador único para o documento.
    # @option opts [String] :chave Chave de acesso do DF-e.
    # @option opts [String] :serie Série do DF-e.
    # @return [Array<(DfeListagem, Integer, Hash)>] DfeListagem data, response status code and response headers
    def listar_nfcom_with_http_info(cpf_cnpj, ambiente, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NfcomApi.listar_nfcom ...'
      end
      # verify the required parameter 'cpf_cnpj' is set
      if @api_client.config.client_side_validation && cpf_cnpj.nil?
        fail ArgumentError, "Missing the required parameter 'cpf_cnpj' when calling NfcomApi.listar_nfcom"
      end
      # verify the required parameter 'ambiente' is set
      if @api_client.config.client_side_validation && ambiente.nil?
        fail ArgumentError, "Missing the required parameter 'ambiente' when calling NfcomApi.listar_nfcom"
      end
      # resource path
      local_var_path = '/nfcom'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'cpf_cnpj'] = cpf_cnpj
      query_params[:'ambiente'] = ambiente
      query_params[:'$top'] = opts[:'top'] if !opts[:'top'].nil?
      query_params[:'$skip'] = opts[:'skip'] if !opts[:'skip'].nil?
      query_params[:'$inlinecount'] = opts[:'inlinecount'] if !opts[:'inlinecount'].nil?
      query_params[:'referencia'] = opts[:'referencia'] if !opts[:'referencia'].nil?
      query_params[:'chave'] = opts[:'chave'] if !opts[:'chave'].nil?
      query_params[:'serie'] = opts[:'serie'] if !opts[:'serie'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'DfeListagem'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['jwt', 'oauth2']

      new_options = opts.merge(
        :operation => :"NfcomApi.listar_nfcom",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NfcomApi#listar_nfcom\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
