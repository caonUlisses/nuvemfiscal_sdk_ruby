=begin
#API Nuvem Fiscal

#API para automação comercial e documentos fiscais.

The version of the OpenAPI document: 2.44.0

Generated by: https://openapi-generator.tech
Generator version: 7.10.0

=end

require 'cgi'

module NuvemfiscalSdkRuby
  class CnpjApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Consultar dados do CNPJ
    # **Informações adicionais**:  - Cota: <a href=\"/docs/limites#cnpj-consultas\">cnpj-consultas</a>  - Consumo: 1 unidade por requisição.
    # @param cnpj [String] CNPJ sem máscara.
    # @param [Hash] opts the optional parameters
    # @return [CnpjEmpresa]
    def consultar_cnpj(cnpj, opts = {})
      data, _status_code, _headers = consultar_cnpj_with_http_info(cnpj, opts)
      data
    end

    # Consultar dados do CNPJ
    # **Informações adicionais**:  - Cota: &lt;a href&#x3D;\&quot;/docs/limites#cnpj-consultas\&quot;&gt;cnpj-consultas&lt;/a&gt;  - Consumo: 1 unidade por requisição.
    # @param cnpj [String] CNPJ sem máscara.
    # @param [Hash] opts the optional parameters
    # @return [Array<(CnpjEmpresa, Integer, Hash)>] CnpjEmpresa data, response status code and response headers
    def consultar_cnpj_with_http_info(cnpj, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CnpjApi.consultar_cnpj ...'
      end
      # verify the required parameter 'cnpj' is set
      if @api_client.config.client_side_validation && cnpj.nil?
        fail ArgumentError, "Missing the required parameter 'cnpj' when calling CnpjApi.consultar_cnpj"
      end
      # resource path
      local_var_path = '/cnpj/{Cnpj}'.sub('{' + 'Cnpj' + '}', CGI.escape(cnpj.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'CnpjEmpresa'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['jwt', 'oauth2']

      new_options = opts.merge(
        :operation => :"CnpjApi.consultar_cnpj",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CnpjApi#consultar_cnpj\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Listar estabelecimentos ativos a partir da base de CNPJ
    # Retorna uma lista de estabelecimentos de acordo com os critérios de busca utilizados.  Somente serão retornados estabelecimentos com situação cadastral \"Ativa\".    **Informações adicionais**:  - Cota: <a href=\"/docs/limites#cnpj-listagem\">cnpj-listagem</a>  - Consumo: 1 unidade por estabelecimento listado ou requisição.
    # @param cnae_principal [String] Filtro pelo código CNAE da atividade principal do estabelecimento.  Utilize o valor sem máscara.
    # @param municipio [String] Filtro pelo código IBGE ou TOM (Tabela de Órgãos e Municípios) do município do estabelecimento.  Utilize o valor sem máscara.
    # @param natureza_juridica [String] Filtro pela natureza jurídica do estabelecimento   Utilize o valor de quatro dígitos sem máscara.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :top Limite no número de objetos a serem retornados pela API, entre 1 e 100. (default to 10)
    # @option opts [Integer] :skip Quantidade de objetos que serão ignorados antes da lista começar a ser retornada. (default to 0)
    # @option opts [Boolean] :inlinecount Inclui no JSON de resposta, na propriedade &#x60;@count&#x60;, o número total de registros que o filtro retornaria, independente dos filtros de paginação. (default to false)
    # @return [CnpjListagem]
    def listar_cnpj(cnae_principal, municipio, natureza_juridica, opts = {})
      data, _status_code, _headers = listar_cnpj_with_http_info(cnae_principal, municipio, natureza_juridica, opts)
      data
    end

    # Listar estabelecimentos ativos a partir da base de CNPJ
    # Retorna uma lista de estabelecimentos de acordo com os critérios de busca utilizados.  Somente serão retornados estabelecimentos com situação cadastral \&quot;Ativa\&quot;.    **Informações adicionais**:  - Cota: &lt;a href&#x3D;\&quot;/docs/limites#cnpj-listagem\&quot;&gt;cnpj-listagem&lt;/a&gt;  - Consumo: 1 unidade por estabelecimento listado ou requisição.
    # @param cnae_principal [String] Filtro pelo código CNAE da atividade principal do estabelecimento.  Utilize o valor sem máscara.
    # @param municipio [String] Filtro pelo código IBGE ou TOM (Tabela de Órgãos e Municípios) do município do estabelecimento.  Utilize o valor sem máscara.
    # @param natureza_juridica [String] Filtro pela natureza jurídica do estabelecimento   Utilize o valor de quatro dígitos sem máscara.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :top Limite no número de objetos a serem retornados pela API, entre 1 e 100. (default to 10)
    # @option opts [Integer] :skip Quantidade de objetos que serão ignorados antes da lista começar a ser retornada. (default to 0)
    # @option opts [Boolean] :inlinecount Inclui no JSON de resposta, na propriedade &#x60;@count&#x60;, o número total de registros que o filtro retornaria, independente dos filtros de paginação. (default to false)
    # @return [Array<(CnpjListagem, Integer, Hash)>] CnpjListagem data, response status code and response headers
    def listar_cnpj_with_http_info(cnae_principal, municipio, natureza_juridica, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CnpjApi.listar_cnpj ...'
      end
      # verify the required parameter 'cnae_principal' is set
      if @api_client.config.client_side_validation && cnae_principal.nil?
        fail ArgumentError, "Missing the required parameter 'cnae_principal' when calling CnpjApi.listar_cnpj"
      end
      # verify the required parameter 'municipio' is set
      if @api_client.config.client_side_validation && municipio.nil?
        fail ArgumentError, "Missing the required parameter 'municipio' when calling CnpjApi.listar_cnpj"
      end
      # verify the required parameter 'natureza_juridica' is set
      if @api_client.config.client_side_validation && natureza_juridica.nil?
        fail ArgumentError, "Missing the required parameter 'natureza_juridica' when calling CnpjApi.listar_cnpj"
      end
      # resource path
      local_var_path = '/cnpj'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'cnae_principal'] = cnae_principal
      query_params[:'municipio'] = municipio
      query_params[:'natureza_juridica'] = natureza_juridica
      query_params[:'$top'] = opts[:'top'] if !opts[:'top'].nil?
      query_params[:'$skip'] = opts[:'skip'] if !opts[:'skip'].nil?
      query_params[:'$inlinecount'] = opts[:'inlinecount'] if !opts[:'inlinecount'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'CnpjListagem'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['jwt', 'oauth2']

      new_options = opts.merge(
        :operation => :"CnpjApi.listar_cnpj",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CnpjApi#listar_cnpj\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
